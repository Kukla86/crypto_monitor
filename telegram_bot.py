#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ monitor.py
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, ConversationHandler, filters
import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import os
from dotenv import load_dotenv
import aiohttp
import asyncio
from dataclasses import dataclass
import threading
import time
import requests
import hashlib
import openai

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from token_manager import get_all_tokens, add_token_to_json, remove_token_from_json
    from notifier import send_alert, send_price_alert, send_volume_alert
    from process_manager import process_manager
    TOKEN_MANAGER_AVAILABLE = True
    NOTIFIER_AVAILABLE = True
    PROCESS_MANAGER_AVAILABLE = True
except ImportError as e:
    TOKEN_MANAGER_AVAILABLE = False
    NOTIFIER_AVAILABLE = False
    PROCESS_MANAGER_AVAILABLE = False
    print(f"–ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DB_PATH = 'crypto_monitor.db'

# –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
TOKENS = ['FUEL', 'ARC', 'URO', 'XION', 'AI16Z', 'SAHARA', 'VIRTUAL', 'BID', 'MANTA', 'ANON']

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤)
WAITING_TOKEN_ADDRESS = 1
WAITING_VOLUME_THRESHOLD = 2
WAITING_CHECK_INTERVAL = 3

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, Dict[str, Any]] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ monitor.py)
alert_cache = {}
last_alert_time = {}

# Data classes –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤
@dataclass
class TokenConfig:
    user_id: int
    token_address: str
    volume_threshold: float
    check_interval: int
    added_at: datetime

@dataclass
class VolumeData:
    token_address: str
    volume_24h: float
    volume_change_24h: float
    price: float
    price_change_24h: float
    timestamp: datetime

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –ê–õ–ï–†–¢–û–í (–ü–ï–†–ï–ù–ï–°–ï–ù–´ –ò–ó MONITOR.PY)
# ============================================================================

async def send_alert_unified(level: str, message: str, token_symbol: str = None, context: Dict[str, Any] = None) -> bool:
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ monitor.py, —Ç–∞–∫ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    """
    try:
        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞: —É—Ä–æ–≤–µ–Ω—å={level}, —Ç–æ–∫–µ–Ω={token_symbol}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–ª–µ—Ä—Ç–æ–≤
        base_message = message.split('\n')[0]
        alert_hash = hashlib.md5(f"{level}_{token_symbol}_{base_message}".encode()).hexdigest()
        cache_key = f"alert_{alert_hash}"
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if cache_key in alert_cache:
            last_time = alert_cache[cache_key]
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: 2 —á–∞—Å–∞ –¥–ª—è INFO, 4 —á–∞—Å–∞ –¥–ª—è WARNING, 8 —á–∞—Å–æ–≤ –¥–ª—è ERROR
            block_time = 7200 if level == 'INFO' else (14400 if level == 'WARNING' else 28800)
            if current_time - last_time < block_time:
                logger.debug(f"–ê–ª–µ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫—ç—à–µ–º: {base_message[:50]}... (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {block_time//3600}—á)")
                return False
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        base_message = message
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            'chat_id': CHAT_ID,
            'text': base_message,
            'parse_mode': 'HTML'
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {base_message[:200]}...")
        logger.info(f"DEBUG: TELEGRAM_TOKEN: {TELEGRAM_TOKEN[:10]}...")
        logger.info(f"DEBUG: CHAT_ID: {CHAT_ID}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {base_message[:100]}...")
                    alert_cache[cache_key] = current_time
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    try:
                        import sqlite3
                        from datetime import datetime
                        
                        with sqlite3.connect('crypto_monitor.db') as conn:
                            cursor = conn.cursor()
                            cursor.execute('''
                                INSERT INTO alerts (timestamp, level, message, token_symbol)
                                VALUES (?, ?, ?, ?)
                            ''', (
                                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                                level,
                                base_message,
                                token_symbol
                            ))
                            conn.commit()
                        logger.debug(f"–ê–ª–µ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {token_symbol}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –≤ –ë–î: {e}")
                    
                    return True
                else:
                    response_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status} - {response_text}")
                    return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
        return False

async def send_twitter_alert_to_telegram(tweet_text: str, username: str, token_symbol: str, 
                                       alert_level: str, link: str, ai_analysis: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ —Ç–≤–∏—Ç–µ –≤ Telegram"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üê¶ <b>Twitter Alert - {token_symbol}</b>\n"
        message += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{username}\n"
        message += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {tweet_text[:200]}...\n"
        
        if ai_analysis and 'sentiment' in ai_analysis:
            sentiment = ai_analysis['sentiment']
            sentiment_emoji = "üü¢" if sentiment == "positive" else "üî¥" if sentiment == "negative" else "üü°"
            message += f"{sentiment_emoji} <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b> {sentiment}\n"
        
        if link:
            message += f"üîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å —Ç–≤–∏—Ç</a>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        await send_alert_unified(alert_level, message, token_symbol)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Twitter –∞–ª–µ—Ä—Ç–∞: {e}")

async def send_github_alert(message: str, level: str, commit_link: str, repo_info: Dict[str, str]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ GitHub –∫–æ–º–º–∏—Ç–µ"""
    try:
        full_message = f"üîß <b>GitHub Alert</b>\n"
        full_message += f"üìÅ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {repo_info['owner']}/{repo_info['repo']}\n"
        full_message += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}\n"
        full_message += f"üîó <a href='{commit_link}'>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–º–∏—Ç–∞</a>"
        
        await send_alert_unified(level, full_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GitHub –∞–ª–µ—Ä—Ç–∞: {e}")

async def send_social_alert(level: str, source: str, original_text: str, translated_text: str, 
                          link: str = "", token: str = "", keywords: List[str] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    try:
        message = f"üì± <b>Social Alert - {source.upper()}</b>\n"
        if token:
            message += f"ü™ô <b>–¢–æ–∫–µ–Ω:</b> {token}\n"
        message += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {translated_text[:200]}...\n"
        
        if keywords:
            message += f"üè∑ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(keywords)}\n"
        
        if link:
            message += f"üîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
        
        await send_alert_unified(level, message, token)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")

async def send_news_alert(news_data: Dict[str, Any], symbol: str, priority: str = 'medium'):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö"""
    try:
        message = f"üì∞ <b>News Alert - {symbol}</b>\n"
        message += f"üìã <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {news_data.get('title', 'N/A')}\n"
        message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {news_data.get('description', 'N/A')[:200]}...\n"
        message += f"üè∑ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority}\n"
        
        if news_data.get('url'):
            message += f"üîó <a href='{news_data['url']}'>–ß–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å</a>"
        
        level = 'WARNING' if priority == 'high' else 'INFO'
        await send_alert_unified(level, message, symbol)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")

async def send_official_post_alert(post_data: Dict[str, Any], symbol: str, platform: str, account: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –ø–æ—Å—Ç–µ"""
    try:
        message = f"üì¢ <b>Official Post - {symbol}</b>\n"
        message += f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}\n"
        message += f"üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account}\n"
        message += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_data.get('content', 'N/A')[:200]}...\n"
        
        if post_data.get('url'):
            message += f"üîó <a href='{post_data['url']}'>–ß–∏—Ç–∞—Ç—å –ø–æ—Å—Ç</a>"
        
        await send_alert_unified('WARNING', message, symbol)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –ø–æ—Å—Ç–µ: {e}")

async def send_github_commit_alert(commit_data: Dict[str, Any], symbol: str, owner: str, repo: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ GitHub –∫–æ–º–º–∏—Ç–µ"""
    try:
        message = f"üîß <b>GitHub Commit - {symbol}</b>\n"
        message += f"üìÅ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {owner}/{repo}\n"
        message += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {commit_data.get('commit', {}).get('author', {}).get('name', 'Unknown')}\n"
        message += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {commit_data.get('commit', {}).get('message', 'N/A')[:200]}...\n"
        
        commit_url = f"https://github.com/{owner}/{repo}/commit/{commit_data.get('sha', '')}"
        message += f"üîó <a href='{commit_url}'>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–º–∏—Ç–∞</a>"
        
        await send_alert_unified('INFO', message, symbol)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ GitHub –∫–æ–º–º–∏—Ç–µ: {e}")

async def send_discord_server_alert(server_data: Dict[str, Any], symbol: str, invite_code: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ Discord —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        message = f"üéÆ <b>Discord Server - {symbol}</b>\n"
        message += f"üè† <b>–°–µ—Ä–≤–µ—Ä:</b> {server_data.get('name', 'N/A')}\n"
        message += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {server_data.get('member_count', 'N/A')}\n"
        message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {server_data.get('description', 'N/A')[:200]}...\n"
        
        if invite_code:
            invite_url = f"https://discord.gg/{invite_code}"
            message += f"üîó <a href='{invite_url}'>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</a>"
        
        await send_alert_unified('INFO', message, symbol)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ Discord —Å–µ—Ä–≤–µ—Ä–µ: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ monitor.py)
def was_recent_alert_sent(symbol: str, alert_type: str, minutes: int = 120) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç"""
    try:
        cache_key = f"{symbol}_{alert_type}"
        if cache_key in last_alert_time:
            last_time = last_alert_time[cache_key]
            if time.time() - last_time < minutes * 60:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM alerts 
                WHERE token_symbol = ? AND level = ? 
                AND timestamp > datetime('now', '-{} minutes')
            '''.format(minutes), (symbol, alert_type))
            count = cursor.fetchone()[0]
            return count > 0
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
        return False

def get_token_alert_cooldown(symbol: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    high_volume_tokens = ['BID', 'SAHARA', 'AI16Z', 'URO']
    if symbol in high_volume_tokens:
        return 240  # 4 —á–∞—Å–∞
    return 120  # 2 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def should_send_alert(symbol: str, alert_type: str, alert_level: str = 'INFO') -> bool:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        cooldown_minutes = get_token_alert_cooldown(symbol)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç
        if was_recent_alert_sent(symbol, alert_type, cooldown_minutes):
            logger.debug(f"–ê–ª–µ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {symbol} {alert_type} (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {cooldown_minutes} –º–∏–Ω)")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç

async def cleanup_alert_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    while True:
        try:
            current_time = time.time()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
            expired_keys = []
            for key, timestamp in alert_cache.items():
                if current_time - timestamp > 14400:  # 4 —á–∞—Å–∞
                    expired_keys.append(key)
            
            for key in expired_keys:
                del alert_cache[key]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ last_alert_time
            expired_keys = []
            for key, timestamp in last_alert_time.items():
                if current_time - timestamp > 14400:  # 4 —á–∞—Å–∞
                    expired_keys.append(key)
            
            for key in expired_keys:
                del last_alert_time[key]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã –∏–∑ –ë–î
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    DELETE FROM alerts 
                    WHERE timestamp < datetime('now', '-4 hours')
                ''')
                conn.commit()
            
            logger.debug(f"–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ {len(expired_keys)} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        
        # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–æ–π
        await asyncio.sleep(3600)

# ============================================================================
# –ö–õ–ê–°–°–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° DEXSCREENER
# ============================================================================

class DexScreenerMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DexScreener API"""
    
    def __init__(self):
        self.base_url = "https://api.dexscreener.com/latest"
        self.db_path = "token_monitor.db"
        self.json_path = "user_tokens.json"
        self.init_database()
        self.load_user_tokens()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS user_tokens (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        token_address TEXT NOT NULL,
                        volume_threshold REAL NOT NULL,
                        price_threshold REAL DEFAULT 0,
                        check_interval INTEGER NOT NULL,
                        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(user_id, token_address)
                    )
                ''')
                
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS volume_history (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        token_address TEXT NOT NULL,
                        volume_24h REAL NOT NULL,
                        volume_change_24h REAL NOT NULL,
                        price REAL NOT NULL,
                        price_change_24h REAL NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS peak_values (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        token_address TEXT NOT NULL,
                        user_id INTEGER NOT NULL,
                        peak_price REAL NOT NULL,
                        peak_volume REAL NOT NULL,
                        last_alert_price REAL NOT NULL,
                        last_alert_volume REAL NOT NULL,
                        last_alert_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(token_address, user_id)
                    )
                ''')
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def load_user_tokens(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON"""
        try:
            if os.path.exists(self.json_path):
                with open(self.json_path, 'r', encoding='utf-8') as f:
                    self.user_tokens = json.load(f)
            else:
                self.user_tokens = {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            self.user_tokens = {}
    
    def save_user_tokens(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON"""
        try:
            with open(self.json_path, 'w', encoding='utf-8') as f:
                json.dump(self.user_tokens, f, indent=2, ensure_ascii=False, default=str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
    
    def get_token_info(self, token_address: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ —á–µ—Ä–µ–∑ DexScreener API"""
        try:
            url = f"{self.base_url}/dex/tokens/{token_address}"
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ DexScreener API: {url}")
            
            response = requests.get(url, timeout=10)
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ DexScreener: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç DexScreener: {data}")
                
                if data.get('pairs') and len(data['pairs']) > 0:
                    pair = data['pairs'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
                    price_usd = pair.get('priceUsd', 0)
                    try:
                        if isinstance(price_usd, str):
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                            price_usd = price_usd.strip()
                            if '/' in price_usd or 'bash' in price_usd.lower():
                                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤ DexScreener: {price_usd}")
                                price_usd = 0
                        price = float(price_usd) if price_usd else 0
                    except (ValueError, TypeError):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã: {price_usd}")
                        price = 0
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–º–∞
                    volume_24h = pair.get('volume', {}).get('h24', 0)
                    try:
                        volume = float(volume_24h) if volume_24h else 0
                    except (ValueError, TypeError):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä–µ–º–∞: {volume_24h}")
                        volume = 0
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    price_change_24h = pair.get('priceChange', {}).get('h24', 0)
                    try:
                        price_change = float(price_change_24h) if price_change_24h else 0
                    except (ValueError, TypeError):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {price_change_24h}")
                        price_change = 0
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    liquidity_usd = pair.get('liquidity', {}).get('usd', 0)
                    try:
                        liquidity = float(liquidity_usd) if liquidity_usd else 0
                    except (ValueError, TypeError):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {liquidity_usd}")
                        liquidity = 0
                    
                    return {
                        'address': pair.get('tokenAddress'),
                        'name': pair.get('baseToken', {}).get('name'),
                        'symbol': pair.get('baseToken', {}).get('symbol'),
                        'price': price,
                        'volume_24h': volume,
                        'price_change_24h': price_change,
                        'liquidity': liquidity
                    }
                else:
                    logger.warning(f"–¢–æ–∫–µ–Ω {token_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DexScreener –∏–ª–∏ –Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            else:
                logger.warning(f"DexScreener –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ {token_address}: {e}")
            return None
    
    def add_token(self, user_id: int, token_address: str, volume_threshold: float, price_threshold: float, check_interval: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            token_info = self.get_token_info(token_address)
            if not token_info:
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO user_tokens 
                    (user_id, token_address, volume_threshold, price_threshold, check_interval)
                    VALUES (?, ?, ?, ?, ?)
                ''', (user_id, token_address, volume_threshold, price_threshold, check_interval))
                conn.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —á–µ—Ä–µ–∑ token_manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if TOKEN_MANAGER_AVAILABLE:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ –¥–ª—è tokens.json
                token_symbol = token_info.get('symbol', token_address[:10].upper())
                token_data = {
                    'symbol': token_symbol,
                    'name': token_info.get('name', token_symbol),
                    'chain': token_info.get('chain', 'unknown'),
                    'contract': token_address,
                    'decimals': token_info.get('decimals', 18),
                    'priority': 'medium',
                    'min_amount_usd': 1000,
                    'description': f'Token added via Telegram by user {user_id}',
                    'volume_threshold': volume_threshold,
                    'price_threshold': price_threshold,
                    'check_interval': check_interval,
                    'user_id': user_id
                }
                
                success = add_token_to_json(token_symbol, token_data)
                if success:
                    logger.info(f"–¢–æ–∫–µ–Ω {token_symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ tokens.json —á–µ—Ä–µ–∑ token_manager")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω {token_symbol} –≤ tokens.json")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π JSON –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if str(user_id) not in self.user_tokens:
                self.user_tokens[str(user_id)] = []
            
            token_config = {
                'token_address': token_address,
                'volume_threshold': volume_threshold,
                'price_threshold': price_threshold,
                'check_interval': check_interval,
                'monitor_price': True,
                'added_at': datetime.now().isoformat(),
                'token_info': token_info
            }
            
            # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.user_tokens[str(user_id)] = [
                t for t in self.user_tokens[str(user_id)] 
                if t['token_address'] != token_address
            ]
            
            self.user_tokens[str(user_id)].append(token_config)
            self.save_user_tokens()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def remove_token(self, user_id: int, token_address: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    DELETE FROM user_tokens 
                    WHERE user_id = ? AND token_address = ?
                ''', (user_id, token_address))
                conn.commit()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ tokens.json —á–µ—Ä–µ–∑ token_manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if TOKEN_MANAGER_AVAILABLE:
                # –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
                token_symbol = None
                for token_config in self.user_tokens.get(str(user_id), []):
                    if token_config['token_address'] == token_address:
                        token_info = token_config.get('token_info', {})
                        token_symbol = token_info.get('symbol', token_address[:10].upper())
                        break
                
                if token_symbol:
                    success = remove_token_from_json(token_symbol)
                    if success:
                        logger.info(f"–¢–æ–∫–µ–Ω {token_symbol} —É–¥–∞–ª–µ–Ω –∏–∑ tokens.json —á–µ—Ä–µ–∑ token_manager")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω {token_symbol} –∏–∑ tokens.json")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if str(user_id) in self.user_tokens:
                self.user_tokens[str(user_id)] = [
                    t for t in self.user_tokens[str(user_id)] 
                    if t['token_address'] != token_address
                ]
                self.save_user_tokens()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def get_user_tokens(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_tokens.get(str(user_id), [])
    
    def check_volume_changes(self, user_id: int) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—ä–µ–º–∞ –∏ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        alerts = []
        user_tokens = self.get_user_tokens(user_id)
        
        for token_config in user_tokens:
            try:
                token_info = self.get_token_info(token_config['token_address'])
                if token_info:
                    volume_threshold = token_config.get('volume_threshold', 0)
                    price_threshold = token_config.get('price_threshold', 0)
                    monitor_price = token_config.get('monitor_price', True)
                    
                    current_price = token_info['price']
                    current_volume = token_info['volume_24h']
                    token_address = token_config['token_address']
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    self.update_peak_values(token_address, user_id, current_price, current_volume)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
                    if volume_threshold > 0:
                        if self.should_send_volume_alert(token_address, user_id, current_volume, volume_threshold):
                            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
                            peak_data = self.get_peak_values(token_address, user_id)
                            if peak_data['last_alert_volume'] > 0:
                                volume_change = ((current_volume - peak_data['last_alert_volume']) / peak_data['last_alert_volume']) * 100
                            else:
                                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
                                volume_change = token_info.get('volume_change_24h', 0)
                            
                            alerts.append({
                                'token_address': token_address,
                                'token_name': token_info.get('name', 'Unknown'),
                                'type': 'volume',
                                'change': volume_change,
                                'threshold': volume_threshold,
                                'current_price': current_price,
                                'current_volume': current_volume
                            })
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞ –æ–±—ä–µ–º–∞
                            self.update_peak_values(token_address, user_id, current_price, current_volume, 
                                                  alert_volume=current_volume)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    if monitor_price and price_threshold > 0:
                        if self.should_send_price_alert(token_address, user_id, current_price, price_threshold):
                            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
                            peak_data = self.get_peak_values(token_address, user_id)
                            if peak_data['last_alert_price'] > 0:
                                price_change = ((current_price - peak_data['last_alert_price']) / peak_data['last_alert_price']) * 100
                            else:
                                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
                                price_change = token_info.get('price_change_24h', 0)
                            
                            alerts.append({
                                'token_address': token_address,
                                'token_name': token_info.get('name', 'Unknown'),
                                'type': 'price',
                                'change': price_change,
                                'threshold': price_threshold,
                                'current_price': current_price,
                                'current_volume': current_volume
                            })
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞ —Ü–µ–Ω—ã
                            self.update_peak_values(token_address, user_id, current_price, current_volume, 
                                                  alert_price=current_price)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_config['token_address']}: {e}")
        
        return alerts
    
    async def save_volume_data(self, token_address: str, volume_data: VolumeData):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞ –≤ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO volume_history 
                    (token_address, volume_24h, volume_change_24h, price, price_change_24h)
                    VALUES (?, ?, ?, ?, ?)
                ''', (token_address, volume_data.volume_24h, volume_data.volume_change_24h,
                     volume_data.price, volume_data.price_change_24h))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞: {e}")
    
    def get_peak_values(self, token_address: str, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT peak_price, peak_volume, last_alert_price, last_alert_volume, last_alert_time
                    FROM peak_values 
                    WHERE token_address = ? AND user_id = ?
                ''', (token_address, user_id))
                row = cursor.fetchone()
                
                if row:
                    return {
                        'peak_price': row[0],
                        'peak_volume': row[1],
                        'last_alert_price': row[2],
                        'last_alert_volume': row[3],
                        'last_alert_time': row[4]
                    }
                else:
                    return {
                        'peak_price': 0.0,
                        'peak_volume': 0.0,
                        'last_alert_price': 0.0,
                        'last_alert_volume': 0.0,
                        'last_alert_time': None
                    }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {e}")
            return {
                'peak_price': 0.0,
                'peak_volume': 0.0,
                'last_alert_price': 0.0,
                'last_alert_volume': 0.0,
                'last_alert_time': None
            }
    
    def update_peak_values(self, token_address: str, user_id: int, current_price: float, current_volume: float, alert_price: float = None, alert_volume: float = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                peak_data = self.get_peak_values(token_address, user_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –±–æ–ª—å—à–µ
                new_peak_price = max(peak_data['peak_price'], current_price)
                new_peak_volume = max(peak_data['peak_volume'], current_volume)
                
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
                if alert_price is not None:
                    new_alert_price = alert_price
                else:
                    new_alert_price = peak_data['last_alert_price']
                
                if alert_volume is not None:
                    new_alert_volume = alert_volume
                else:
                    new_alert_volume = peak_data['last_alert_volume']
                
                cursor.execute('''
                    INSERT OR REPLACE INTO peak_values 
                    (token_address, user_id, peak_price, peak_volume, last_alert_price, last_alert_volume, last_alert_time)
                    VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                ''', (token_address, user_id, new_peak_price, new_peak_volume, new_alert_price, new_alert_volume))
                conn.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {e}")
    
    def should_send_price_alert(self, token_address: str, user_id: int, current_price: float, price_threshold: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç —Ü–µ–Ω—ã"""
        try:
            peak_data = self.get_peak_values(token_address, user_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç –∏–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–∏–∫–∞
            if peak_data['last_alert_price'] == 0.0:
                return True
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
            price_change = ((current_price - peak_data['last_alert_price']) / peak_data['last_alert_price']) * 100
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥
            return abs(price_change) >= price_threshold
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞ —Ü–µ–Ω—ã: {e}")
            return True
    
    def should_send_volume_alert(self, token_address: str, user_id: int, current_volume: float, volume_threshold: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ–±—ä–µ–º–∞"""
        try:
            peak_data = self.get_peak_values(token_address, user_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç –∏–ª–∏ –æ–±—ä–µ–º –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –ø–∏–∫–∞
            if peak_data['last_alert_volume'] == 0.0:
                return True
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
            volume_change = ((current_volume - peak_data['last_alert_volume']) / peak_data['last_alert_volume']) * 100
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥
            return abs(volume_change) >= volume_threshold
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ–±—ä–µ–º–∞: {e}")
            return True


class CryptoMonitorBot:
    def __init__(self):
        self.updater = None
        self.dex_monitor = DexScreenerMonitor()
        self.loop = asyncio.new_event_loop()
        self.bg_thread = threading.Thread(target=self._start_async_loop, daemon=True)
        self.bg_thread.start()
    
    def safe_edit_message(self, query, text, reply_markup=None, parse_mode=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É - —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    if self.updater and self.updater.bot:
                        self.updater.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=text,
                            reply_markup=reply_markup,
                            parse_mode=parse_mode
                        )
                except Exception as send_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")

    def _start_async_loop(self):
        asyncio.set_event_loop(self.loop)
        self.background_volume_checker()

    def background_volume_checker(self):
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_ids = list(self.dex_monitor.user_tokens.keys())
                for user_id in user_ids:
                    alerts = self.dex_monitor.check_volume_changes(int(user_id))
                    for alert in alerts:
                        self.send_alert(int(user_id), alert)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                try:
                    if hasattr(self, 'loop') and self.loop.is_running():
                        asyncio.run_coroutine_threadsafe(cleanup_alert_cache(), self.loop)
                except Exception as cleanup_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {cleanup_error}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            time.sleep(300)  # 5 –º–∏–Ω—É—Ç

    def send_alert(self, user_id, alert):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            token_symbol = alert.get('token_name', alert.get('token_address', 'UNKNOWN'))
            alert_type = alert.get('type', 'volume')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            if not should_send_alert(token_symbol, alert_type, 'INFO'):
                logger.debug(f"–ê–ª–µ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {token_symbol} {alert_type}")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
            if alert_type == 'volume':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if alert['current_price'] <= 0 or alert['current_volume'] <= 0:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ª–µ—Ä—Ç –æ–±—ä–µ–º–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: —Ü–µ–Ω–∞={alert['current_price']}, –æ–±—ä–µ–º={alert['current_volume']}")
                    return
                
                direction = "üöÄ" if alert['change'] > 0 else "üîª" if alert['change'] < 0 else "‚ö™"
                message = f"{direction}{token_symbol}\n"
                message += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {alert['change']:+.2f}% (–ø–æ—Ä–æ–≥ {alert['threshold']}%)\n"
                message += f"–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${alert['current_volume']:,.0f}\n"
                message += f"–¶–µ–Ω–∞: ${alert['current_price']:.6f}"
                
                context = {
                    'price': alert['current_price'],
                    'volume_24h': alert['current_volume'],
                    'change_percent': alert['change']
                }
                
            else:  # price
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if alert['current_price'] <= 0 or alert['current_volume'] <= 0:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ª–µ—Ä—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: —Ü–µ–Ω–∞={alert['current_price']}, –æ–±—ä–µ–º={alert['current_volume']}")
                    return
                
                direction = "üöÄ" if alert['change'] > 0 else "üîª" if alert['change'] < 0 else "‚ö™"
                message = f"{direction}{token_symbol}\n"
                message += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {alert['change']:+.2f}% (–ø–æ—Ä–æ–≥ {alert['threshold']}%)\n"
                message += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${alert['current_price']:.6f}\n"
                message += f"–û–±—ä–µ–º 24—á: ${alert['current_volume']:,.0f}"
                
                context = {
                    'price': alert['current_price'],
                    'volume_24h': alert['current_volume'],
                    'change_percent': alert['change']
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            if hasattr(self, 'loop') and self.loop.is_running():
                asyncio.run_coroutine_threadsafe(send_alert_unified('INFO', message, token_symbol, context), self.loop)
                logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {token_symbol} {alert_type}")
            else:
                logger.error("Event loop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    

    
    def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üìä –¢–æ–∫–µ–Ω—ã –∏ —Ü–µ–Ω—ã", callback_data="tokens")],
            [InlineKeyboardButton("üìà –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤", callback_data="volumes")],
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã", callback_data="alerts")],
            [InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton("üìä –†—ã–Ω–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data="summary")],
            [InlineKeyboardButton("üîó –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤", callback_data="token_monitor")],
            [InlineKeyboardButton("üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏", callback_data="process_control")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "ü§ñ **Crypto Monitor Bot**\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ (–æ–±—ä–µ–º + —Ü–µ–Ω–∞)\n"
            "‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ç–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def button_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        
        # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
        try:
            query.answer()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        import threading
        thread = threading.Thread(target=self._process_button, args=(query, context))
        thread.daemon = True
        thread.start()
    
    def _process_button(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if query.data == "tokens":
                self.show_tokens(query, context)
            elif query.data == "volumes":
                self.show_volumes(query, context)
            elif query.data == "alerts":
                self.show_alerts(query, context)
            elif query.data == "analytics":
                self.show_analytics(query, context)
            elif query.data == "summary":
                self.show_summary(query, context)
            elif query.data == "token_monitor":
                self.show_token_monitor_menu(query, context)
            elif query.data == "process_control":
                self.show_process_control(query, context)
            elif query.data == "settings":
                self.show_settings(query, context)
            elif query.data == "back_to_main":
                self.show_main_menu(query, context)
            elif query.data.startswith("token_"):
                token = query.data.split("_")[1]
                self.show_token_details(query, context, token)
            elif query.data == "refresh":
                self.refresh_data(query, context)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤
            elif query.data == "add_token":
                self.add_token_command(query, context)
            elif query.data == "list_tokens":
                self.list_tokens_command(query, context)
            elif query.data == "remove_token":
                self.remove_token_command(query, context)
            elif query.data == "check_volumes":
                self.check_volume_command(query, context)
            elif query.data == "refresh_tokens":
                self.list_tokens_command(query, context)
            elif query.data == "check_all_volumes":
                self.check_volume_command(query, context)
            elif query.data == "cancel_remove":
                self.safe_edit_message(query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            elif query.data.startswith("remove_"):
                self.handle_remove_token(query, context)
            elif query.data.startswith("interval_"):
                self.handle_interval_selection(query, context)
            elif query.data == "notifications":
                self.show_notification_settings(query, context)
            elif query.data == "thresholds":
                self.show_threshold_settings(query, context)
            elif query.data == "auto_refresh":
                self.show_auto_refresh_settings(query, context)
            elif query.data == "notification_settings":
                self.show_notification_settings(query, context)
            elif query.data in ["disable_all", "enable_all"]:
                self.toggle_notifications(query, context)
            elif query.data in ["edit_thresholds", "reset_thresholds"]:
                self.handle_threshold_action(query, context)
            elif query.data in ["fast_mode", "eco_mode"]:
                self.handle_performance_mode(query, context)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
            elif query.data.startswith("process_"):
                self.handle_process_command(query, context)
            elif query.data.startswith("script_"):
                self.handle_script_command(query, context)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {query.data}: {e}")
            try:
                self.safe_edit_message(
                    query,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]])
                )
            except:
                pass
    
    def show_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìä –¢–æ–∫–µ–Ω—ã –∏ —Ü–µ–Ω—ã", callback_data="tokens")],
            [InlineKeyboardButton("üìà –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤", callback_data="volumes")],
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã", callback_data="alerts")],
            [InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton("üìä –†—ã–Ω–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data="summary")],
            [InlineKeyboardButton("üîó –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤", callback_data="token_monitor")],
            [InlineKeyboardButton("üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏", callback_data="process_control")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            "ü§ñ **Crypto Monitor Bot**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def show_tokens(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å —Ü–µ–Ω–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            token_data = self.get_latest_token_data()
            
            message = "üí∞ **–¢–û–ö–ï–ù–´ –ò –¶–ï–ù–´**\n\n"
            
            for token in TOKENS:
                if token in token_data:
                    data = token_data[token]
                    price = data.get('price', 0)
                    volume = data.get('volume_24h', 0)
                    change = data.get('price_change_24h', 0)
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    direction = "üöÄ" if change > 0 else "üîª" if change < 0 else "‚ö™"
                    
                    message += f"{direction} **{token}**: ${price:.6f}\n"
                    message += f"   üìä ${volume:,.0f} | {change:+.2f}%\n\n"
                else:
                    message += f"‚ö™ **{token}**: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton("üìä –†—ã–Ω–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data="summary")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.safe_edit_message(
                query,
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            self.safe_edit_message(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    def show_volumes(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤"""
        try:
            token_data = self.get_latest_token_data()
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            sorted_tokens = sorted(
                [(token, data) for token, data in token_data.items() if 'volume_24h' in data],
                key=lambda x: x[1]['volume_24h'],
                reverse=True
            )
            
            message = "üìà **–û–ë–™–ï–ú–´ –¢–û–†–ì–û–í**\n\n"
            
            for i, (token, data) in enumerate(sorted_tokens[:10], 1):
                volume = data['volume_24h']
                price = data.get('price', 0)
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
                rank_emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                
                message += f"{rank_emoji} **{token}**: ${volume:,.0f}\n"
                message += f"   üí∞ ${price:.6f}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton("üìä –¢–æ–∫–µ–Ω—ã –∏ —Ü–µ–Ω—ã", callback_data="tokens")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.safe_edit_message(
                query,
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–±—ä–µ–º–æ–≤: {e}")
            self.safe_edit_message(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    def show_summary(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å–≤–æ–¥–∫—É"""
        try:
            token_data = self.get_latest_token_data()
            
            # –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É
            top_volume = sorted(
                [(token, data) for token, data in token_data.items() if 'volume_24h' in data],
                key=lambda x: x[1]['volume_24h'],
                reverse=True
            )[:5]
            
            # –¢–æ–ø –ø–æ —Ä–æ—Å—Ç—É
            top_gainers = sorted(
                [(token, data) for token, data in token_data.items() if 'price_change_24h' in data],
                key=lambda x: x[1]['price_change_24h'],
                reverse=True
            )[:5]
            
            # –¢–æ–ø –ø–æ –ø–∞–¥–µ–Ω–∏—é
            top_losers = sorted(
                [(token, data) for token, data in token_data.items() if 'price_change_24h' in data],
                key=lambda x: x[1]['price_change_24h']
            )[:5]
            
            message = "üìä **–†–´–ù–û–ß–ù–ê–Ø –°–í–û–î–ö–ê**\n\n"
            
            message += "üî• **–¢–æ–ø –ø–æ –æ–±—ä–µ–º—É:**\n"
            for i, (token, data) in enumerate(top_volume, 1):
                volume = data['volume_24h']
                change = data.get('price_change_24h', 0)
                emoji = "üü¢" if change > 0 else "üî¥" if change < 0 else "‚ö™"
                message += f"{i}. {token}: ${volume:,.0f} ({emoji}{change:+.2f}%)\n"
            
            message += "\nüìà **–¢–æ–ø –ø–æ —Ä–æ—Å—Ç—É:**\n"
            for i, (token, data) in enumerate(top_gainers, 1):
                change = data['price_change_24h']
                message += f"{i}. {token}: üü¢+{change:.2f}%\n"
            
            message += "\nüìâ **–¢–æ–ø –ø–æ –ø–∞–¥–µ–Ω–∏—é:**\n"
            for i, (token, data) in enumerate(top_losers, 1):
                change = data['price_change_24h']
                message += f"{i}. {token}: üî¥{change:.2f}%\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton("üìä –¢–æ–∫–µ–Ω—ã –∏ —Ü–µ–Ω—ã", callback_data="tokens")],
                [InlineKeyboardButton("üìà –û–±—ä–µ–º—ã", callback_data="volumes")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.safe_edit_message(
                query,
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏: {e}")
            self.safe_edit_message(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    def show_alerts(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã –∏–∑ –ë–î
            alerts = self.get_recent_alerts()
            
            if not alerts:
                message = "‚úÖ **–ê–ö–¢–ò–í–ù–´–ï –ê–õ–ï–†–¢–´**\n\n"
                message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"
            else:
                message = "‚ö° **–ü–û–°–õ–ï–î–ù–ò–ï –ê–õ–ï–†–¢–´**\n\n"
                
                for alert in alerts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    level = alert['level']
                    symbol = alert.get('token_symbol', 'N/A')
                    message_text = alert['message'][:100] + "..." if len(alert['message']) > 100 else alert['message']
                    timestamp = alert['timestamp']
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
                    level_emoji = "üö®" if level == "CRITICAL" else "‚ö†Ô∏è" if level == "WARNING" else "üìä"
                    
                    message += f"{level_emoji} **{symbol}** ({level})\n"
                    message += f"   {message_text}\n"
                    message += f"   üìÖ {timestamp}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton("üìä –†—ã–Ω–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data="summary")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.safe_edit_message(
                query,
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            self.safe_edit_message(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    def show_analytics(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            keyboard = []
            for i in range(0, len(TOKENS), 2):
                row = []
                row.append(InlineKeyboardButton(TOKENS[i], callback_data=f"token_{TOKENS[i]}"))
                if i + 1 < len(TOKENS):
                    row.append(InlineKeyboardButton(TOKENS[i + 1], callback_data=f"token_{TOKENS[i + 1]}"))
                keyboard.append(row)
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.safe_edit_message(
                query,
                "üîç **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    def show_token_details(self, query, context, token):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            token_data = self.get_latest_token_data()
            
            if token not in token_data:
                self.safe_edit_message(
                    query,
                    f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
                    ]])
                )
                return
            
            data = token_data[token]
            price = data.get('price', 0)
            volume = data.get('volume_24h', 0)
            change = data.get('price_change_24h', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            price_history = self.get_correct_price_history(token, hours=24)
            
            message = f"üîç **–ê–ù–ê–õ–ò–ó {token}**\n\n"
            message += f"üí∞ **–¶–µ–Ω–∞**: ${price:.6f}\n"
            message += f"üìä **–û–±—ä–µ–º**: ${volume:,.0f}\n"
            direction = "üöÄ" if change > 0 else "üîª" if change < 0 else "‚ö™"
            message += f"{direction} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ**: {change:+.2f}%\n"
            
            if price_history and len(price_history) > 1:
                prices = [p[0] for p in price_history if p[0] > 0]
                if prices:
                    min_price = min(prices)
                    max_price = max(prices)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                    if max_price < price * 10 and min_price > price * 0.1:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                        message += f"üìâ **–ú–∏–Ω**: ${min_price:.6f}\n"
                        message += f"üìà **–ú–∞–∫—Å**: ${max_price:.6f}\n"
                    else:
                        message += f"üìâ **–ú–∏–Ω**: ${price:.6f}\n"
                        message += f"üìà **–ú–∞–∫—Å**: ${price:.6f}\n"
                else:
                    message += f"üìâ **–ú–∏–Ω**: ${price:.6f}\n"
                    message += f"üìà **–ú–∞–∫—Å**: ${price:.6f}\n"
            else:
                message += f"üìâ **–ú–∏–Ω**: ${price:.6f}\n"
                message += f"üìà **–ú–∞–∫—Å**: ${price:.6f}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            token_alerts = self.get_token_alerts(token)
            if token_alerts:
                message += f"\n‚ö†Ô∏è **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã**: {len(token_alerts)}\n"
            
            keyboard = [
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data=f"history_{token}")],
                [InlineKeyboardButton("üìà –¢–µ—Ö. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", callback_data=f"indicators_{token}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.safe_edit_message(
                query,
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–∫–µ–Ω–∞: {e}")
            self.safe_edit_message(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
                ]])
            )
    
    def show_settings(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        message = "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**\n\n"
        message += "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**: –í–∫–ª—é—á–µ–Ω—ã\n"
        message += "üìä **–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**: 30 —Å–µ–∫\n"
        message += "üö® **–ü–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤**:\n"
        message += "   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: 25%\n"
        message += "   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: 15%\n"
        message += "   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: 8%\n\n"
        message += "üìà **–ü–æ—Ä–æ–≥–∏ –æ–±—ä–µ–º–∞**:\n"
        message += "   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: 150%\n"
        message += "   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: 80%\n\n"
        message += "üéØ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**:\n"
        message += "   ‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ\n"
        message += "   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö: –í–∫–ª—é—á–µ–Ω–æ\n"
        message += "   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã: –í–∫–ª—é—á–µ–Ω–æ"
        
        keyboard = [
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notifications")],
            [InlineKeyboardButton("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤", callback_data="thresholds")],
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="auto_refresh")],
            [InlineKeyboardButton("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def show_notification_settings(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        message = "üîî **–ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**\n\n"
        message += "üì± **–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**:\n"
        message += "   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã (25%+)\n"
        message += "   ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (15%+)\n"
        message += "   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ (8%+)\n"
        message += "   ‚úÖ –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã\n"
        message += "   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞\n\n"
        message += "‚è∞ **–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**:\n"
        message += "   ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö\n"
        message += "   ‚Ä¢ –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö\n"
        message += "   ‚Ä¢ –°–≤–æ–¥–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å"
        
        keyboard = [
            [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="disable_all")],
            [InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="enable_all")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def show_threshold_settings(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤"""
        message = "üìä **–ù–ê–°–¢–†–û–ô–ö–ò –ü–û–†–û–ì–û–í**\n\n"
        message += "üö® **–ü–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤**:\n"
        message += "   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: 25% (üî¥)\n"
        message += "   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: 15% (üü°)\n"
        message += "   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: 8% (üü¢)\n\n"
        message += "üìà **–ü–æ—Ä–æ–≥–∏ –æ–±—ä–µ–º–∞**:\n"
        message += "   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: 150% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ\n"
        message += "   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: 80% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ\n\n"
        message += "üí∞ **–ü–æ—Ä–æ–≥–∏ —Ü–µ–Ω—ã**:\n"
        message += "   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: $0.000001\n"
        message += "   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: $1000"
        
        keyboard = [
            [InlineKeyboardButton("üìà –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏", callback_data="edit_thresholds")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_thresholds")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def show_auto_refresh_settings(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        message = "üîÑ **–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï**\n\n"
        message += "‚è±Ô∏è **–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã**:\n"
        message += "   ‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤: 30 —Å–µ–∫\n"
        message += "   ‚Ä¢ –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤: 60 —Å–µ–∫\n"
        message += "   ‚Ä¢ On-chain –¥–∞–Ω–Ω—ã–µ: 5 –º–∏–Ω\n"
        message += "   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: 10 –º–∏–Ω\n\n"
        message += "üìä **–°—Ç–∞—Ç—É—Å**:\n"
        message += "   ‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
        message += "   ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n"
        message += "   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏\n\n"
        message += "‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**:\n"
        message += "   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã: < 1 —Å–µ–∫\n"
        message += "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ~5%\n"
        message += "   ‚Ä¢ –ü–∞–º—è—Ç—å: ~50 MB"
        
        keyboard = [
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º", callback_data="fast_mode")],
            [InlineKeyboardButton("üêå –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π", callback_data="eco_mode")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def refresh_data(self, query, context):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        try:
            query.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É
            self.show_summary(query, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.safe_edit_message(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    def toggle_notifications(self, query, context):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        action = query.data
        if action == "disable_all":
            message = "üîï **–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´**\n\n"
            message += "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n"
            message += "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ'."
        else:
            message = "üîî **–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í–ö–õ–Æ–ß–ï–ù–´**\n\n"
            message += "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:\n"
            message += "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã\n"
            message += "‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
            message += "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ\n"
            message += "‚úÖ –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã"
        
        keyboard = [
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notifications")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def handle_threshold_action(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Ä–æ–≥–∞–º–∏"""
        action = query.data
        if action == "reset_thresholds":
            message = "üîÑ **–ü–û–†–û–ì–ò –°–ë–†–û–®–ï–ù–´**\n\n"
            message += "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            message += "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: 25%\n"
            message += "‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: 15%\n"
            message += "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: 8%"
        else:
            message = "üìà **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–†–û–ì–û–í**\n\n"
            message += "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            message += "/set_critical <–∑–Ω–∞—á–µ–Ω–∏–µ>\n"
            message += "/set_warning <–∑–Ω–∞—á–µ–Ω–∏–µ>\n"
            message += "/set_info <–∑–Ω–∞—á–µ–Ω–∏–µ>"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤", callback_data="thresholds")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def handle_performance_mode(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∂–∏–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        action = query.data
        if action == "fast_mode":
            message = "‚ö° **–ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù**\n\n"
            message += "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏:\n"
            message += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫\n"
            message += "‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ\n"
            message += "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ\n"
            message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ~10%"
        else:
            message = "üêå **–≠–ö–û–ù–û–ú–ò–ß–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù**\n\n"
            message += "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:\n"
            message += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫\n"
            message += "‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: —É–º–µ—Ä–µ–Ω–Ω–æ–µ\n"
            message += "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω\n"
            message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ~2%"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="auto_refresh")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.safe_edit_message(
            query,
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def get_latest_token_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ë–î"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            with sqlite3.connect('crypto_monitor.db') as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ token_data
                cursor.execute('''
                    SELECT 
                        symbol,
                        price,
                        volume_24h,
                        timestamp
                    FROM token_data 
                    WHERE timestamp = (
                        SELECT MAX(timestamp) 
                        FROM token_data t2 
                        WHERE t2.symbol = token_data.symbol
                    )
                    ORDER BY symbol
                ''')
                
                rows = cursor.fetchall()
                result = {}
                
                for row in rows:
                    symbol, price, volume_24h, timestamp = row
                    result[symbol] = {
                        'price': price or 0,
                        'volume_24h': volume_24h or 0,
                        'price_change_24h': 0,  # –ü–æ–∫–∞ –Ω–µ –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                        'timestamp': timestamp
                    }
                
                return result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            return {}
    
    def get_recent_alerts(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã"""
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT level, message, token_symbol, timestamp
                    FROM alerts
                    ORDER BY timestamp DESC
                    LIMIT 10
                ''')
                
                rows = cursor.fetchall()
                result = []
                
                for row in rows:
                    level, message, token_symbol, timestamp = row
                    result.append({
                        'level': level,
                        'message': message,
                        'token_symbol': token_symbol,
                        'timestamp': timestamp
                    })
                
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    def get_token_alerts(self, token: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT level, message, timestamp
                    FROM alerts
                    WHERE token_symbol = ?
                    ORDER BY timestamp DESC
                    LIMIT 5
                ''', (token,))
                
                rows = cursor.fetchall()
                result = []
                
                for row in rows:
                    level, message, timestamp = row
                    result.append({
                        'level': level,
                        'message': message,
                        'timestamp': timestamp
                    })
                
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ —Ç–æ–∫–µ–Ω–∞: {e}")
            return []
    
    def get_correct_price_history(self, token: str, hours: int = 24) -> List[tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î"""
        try:
            with sqlite3.connect('crypto_monitor.db') as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
                cursor.execute('''
                    SELECT price, timestamp
                    FROM token_data
                    WHERE symbol = ?
                    AND timestamp >= datetime('now', '-{} hours')
                    ORDER BY timestamp DESC
                    LIMIT 100
                '''.format(hours), (token,))
                
                rows = cursor.fetchall()
                return [(float(row[0]), row[1]) for row in rows if row[0] is not None]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è {token}: {e}")
            return []
    
    def get_price_history(self, token: str, hours: int = 24) -> List[tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Ç–æ–∫–µ–Ω–∞"""
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT price, timestamp
                    FROM token_data
                    WHERE symbol = ?
                    AND timestamp >= datetime('now', '-{} hours')
                    ORDER BY timestamp DESC
                '''.format(hours), (token,))
                
                return cursor.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {e}")
            return []
    
    # ===== –ú–ï–¢–û–î–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¢–û–ö–ï–ù–û–í =====
    
    def show_token_monitor_menu(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        welcome_text = """
üîó **–ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–ö–ï–ù–û–í**

–î–æ–±–∞–≤–ª—è–π—Ç–µ –ª—é–±—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ DexScreener API.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ (24—á)
‚Ä¢ üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã (24—á)
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
‚Ä¢ üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å–µ—Ç–µ–π (Ethereum, BSC, Polygon, Solana)
‚Ä¢ ‚öôÔ∏è –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
‚Ä¢ üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∞–ª–µ—Ä—Ç—ã (–æ–±—ä–µ–º –∏/–∏–ª–∏ —Ü–µ–Ω–∞)

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:**
‚Ä¢ Ethereum, BSC, Polygon (EVM)
‚Ä¢ Solana (SPL —Ç–æ–∫–µ–Ω—ã)

**–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:**
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –∑–∞ 24 —á–∞—Å–∞
‚Ä¢ –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="add_token")],
            [InlineKeyboardButton("üìã –ú–æ–∏ —Ç–æ–∫–µ–Ω—ã", callback_data="list_tokens")],
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä–µ–º—ã", callback_data="check_volumes")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def add_token_command(self, query, context):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        user_id = query.from_user.id
        
        logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'step': 'waiting_address',
            'token_address': None,
            'volume_threshold': None,
            'price_threshold': None,
            'check_interval': 5,
            'monitor_volume': True,
            'monitor_price': True
        }
        
        query.edit_message_text(
            "üîó **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞:\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:**\n"
            "‚Ä¢ Ethereum, BSC, Polygon: `0x1234567890123456789012345678901234567890`\n"
            "‚Ä¢ Solana: `4YWy8JNjB4CLjG71hxGwzFXWd4DtpdvsAY2GqQ1Fbonk`\n\n"
            "**–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:**\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (24—á)\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ (24—á)\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='Markdown'
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        context.user_data['waiting_token_address'] = True
    
    def handle_token_address(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
        user_id = update.effective_user.id
        token_address = update.message.text.strip()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {token_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if user_id not in user_states or user_states[user_id].get('step') != 'waiting_address':
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º EVM –∏ Solana)
        is_valid_address = False
        
        # EVM –∞–¥—Ä–µ—Å–∞ (Ethereum, BSC, Polygon –∏ –¥—Ä.)
        if token_address.startswith('0x') and len(token_address) == 42:
            is_valid_address = True
        # Solana –∞–¥—Ä–µ—Å–∞ (–±–∞–∑–∞58, –æ–±—ã—á–Ω–æ 32-44 —Å–∏–º–≤–æ–ª–∞)
        elif len(token_address) >= 32 and len(token_address) <= 44:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ base58 —Å—Ç—Ä–æ–∫–∞
            try:
                import base58
                base58.b58decode(token_address)
                is_valid_address = True
            except:
                pass
        
        if not is_valid_address:
            update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!**\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ **EVM –∞–¥—Ä–µ—Å–∞:** `0x1234567890123456789012345678901234567890`\n"
                "‚Ä¢ **Solana –∞–¥—Ä–µ—Å–∞:** `4YWy8JNjB4CLjG71hxGwzFXWd4DtpdvsAY2GqQ1Fbonk`\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode='Markdown'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        user_states[user_id]['token_address'] = token_address
        user_states[user_id]['step'] = 'waiting_threshold'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω –≤ DexScreener...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ DexScreener API
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ asyncio
            import requests
            url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ DexScreener API: {url}")
            
            response = requests.get(url, timeout=10)
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ DexScreener: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç DexScreener: {data}")
                
                if data.get('pairs') and len(data['pairs']) > 0:
                    pair = data['pairs'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
                    token_info = {
                        'address': pair.get('tokenAddress'),
                        'name': pair.get('baseToken', {}).get('name'),
                        'symbol': pair.get('baseToken', {}).get('symbol'),
                        'price': float(pair.get('priceUsd', 0)),
                        'volume_24h': float(pair.get('volume', {}).get('h24', 0)),
                        'price_change_24h': float(pair.get('priceChange', {}).get('h24', 0)),
                        'liquidity': float(pair.get('liquidity', {}).get('usd', 0))
                    }
                    
                    update.message.reply_text(
                        f"‚úÖ **–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω!**\n\n"
                        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {token_info.get('name', 'Unknown')}\n"
                        f"**–°–∏–º–≤–æ–ª:** {token_info.get('symbol', 'Unknown')}\n"
                        f"**–¶–µ–Ω–∞:** ${token_info.get('price', 0):.6f}\n"
                        f"**–û–±—ä–µ–º 24—á:** ${token_info.get('volume_24h', 0):,.0f}\n\n"
                        f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ % –ø—Ä–∏—Ä–æ—Å—Ç–∞ –æ–±—ä–µ–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                        f"–ü—Ä–∏–º–µ—Ä: `10` (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞ 10%)",
                        parse_mode='Markdown'
                    )
                    logger.info(f"–¢–æ–∫–µ–Ω {token_address} –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ—Ä–æ–≥–∞")
                else:
                    update.message.reply_text(
                        "‚ùå **–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!**\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ DEX.",
                        parse_mode='Markdown'
                    )
                    return
            else:
                update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ API DexScreener!**\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {response.status_code}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                    parse_mode='Markdown'
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_address}: {e}")
            update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:** {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='Markdown'
            )
            return
    
    def handle_volume_threshold(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–æ–≤ –æ–±—ä–µ–º–∞ –∏ —Ü–µ–Ω—ã"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Ä–æ–≥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_step = user_states[user_id].get('step')
        
        if current_step == 'waiting_threshold':
            # –í–≤–æ–¥ –ø–æ—Ä–æ–≥–∞ –æ–±—ä–µ–º–∞
            try:
                volume_threshold = float(text)
                if volume_threshold <= 0 or volume_threshold > 1000:
                    raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            except ValueError:
                update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!**\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 1000.\n"
                    "–ü—Ä–∏–º–µ—Ä: `10` (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –æ–±—ä–µ–º–∞ –Ω–∞ 10%)",
                    parse_mode='Markdown'
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞
            user_states[user_id]['volume_threshold'] = volume_threshold
            user_states[user_id]['step'] = 'waiting_price_threshold'
            
            update.message.reply_text(
                f"üìä **–ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {volume_threshold}%**\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ % –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                f"–ü—Ä–∏–º–µ—Ä: `20` (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ 20%)\n"
                f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0` –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É",
                parse_mode='Markdown'
            )
            
        elif current_step == 'waiting_price_threshold':
            # –í–≤–æ–¥ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã
            try:
                price_threshold = float(text)
                if price_threshold < 0 or price_threshold > 1000:
                    raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            except ValueError:
                update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!**\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1000.\n"
                    "–ü—Ä–∏–º–µ—Ä: `20` (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ 20%)\n"
                    f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0` –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É",
                    parse_mode='Markdown'
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã
            user_states[user_id]['price_threshold'] = price_threshold
            user_states[user_id]['monitor_price'] = price_threshold > 0
            user_states[user_id]['step'] = 'waiting_interval'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            keyboard = [
                [InlineKeyboardButton("5 –º–∏–Ω—É—Ç", callback_data="interval_5")],
                [InlineKeyboardButton("15 –º–∏–Ω—É—Ç", callback_data="interval_15")],
                [InlineKeyboardButton("30 –º–∏–Ω—É—Ç", callback_data="interval_30")],
                [InlineKeyboardButton("60 –º–∏–Ω—É—Ç", callback_data="interval_60")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            volume_threshold = user_states[user_id]['volume_threshold']
            monitor_text = f"üìä **–ü–æ—Ä–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:**\n‚Ä¢ –û–±—ä–µ–º: {volume_threshold}%\n‚Ä¢ –¶–µ–Ω–∞: {price_threshold}%"
            
            update.message.reply_text(
                f"{monitor_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            return
    
    def handle_interval_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        user_id = query.from_user.id
        interval = int(query.data.split('_')[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        user_states[user_id]['check_interval'] = interval
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = user_states[user_id]
        token_address = user_data['token_address']
        volume_threshold = user_data['volume_threshold']
        price_threshold = user_data.get('price_threshold', 0)
        monitor_price = user_data.get('monitor_price', True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        try:
            success = self.dex_monitor.add_token(user_id, token_address, volume_threshold, price_threshold, interval)
            if success:
                logger.info(f"–¢–æ–∫–µ–Ω {token_address} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω {token_address} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            success = False
        
        if success:
            monitor_text = f"‚Ä¢ –û–±—ä–µ–º: {volume_threshold}%"
            if monitor_price and price_threshold > 0:
                monitor_text += f"\n‚Ä¢ –¶–µ–Ω–∞: {price_threshold}%"
            
            query.edit_message_text(
                f"‚úÖ **–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"**–ê–¥—Ä–µ—Å:** `{token_address}`\n"
                f"**–ü–æ—Ä–æ–≥–∏:**\n{monitor_text}\n"
                f"**–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {interval} –º–∏–Ω—É—Ç\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤!",
                parse_mode='Markdown'
            )
        else:
            query.edit_message_text(
                "‚ùå **–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞!**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.clear()
    
    def handle_price_threshold(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
        
        try:
            price_threshold = float(text)
            if price_threshold <= 0:
                update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã
            if user_id in user_states:
                user_states[user_id]['price_threshold'] = price_threshold
                user_states[user_id]['step'] = 'waiting_interval'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            keyboard = [
                [InlineKeyboardButton("5 –º–∏–Ω—É—Ç", callback_data="interval_5")],
                [InlineKeyboardButton("10 –º–∏–Ω—É—Ç", callback_data="interval_10")],
                [InlineKeyboardButton("15 –º–∏–Ω—É—Ç", callback_data="interval_15")],
                [InlineKeyboardButton("30 –º–∏–Ω—É—Ç", callback_data="interval_30")],
                [InlineKeyboardButton("60 –º–∏–Ω—É—Ç", callback_data="interval_60")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(
                f"‚úÖ **–ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {price_threshold}%**\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except ValueError:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã:")
    
    def list_tokens_command(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DexScreener –º–æ–Ω–∏—Ç–æ—Ä–æ–º
        tokens = self.dex_monitor.get_user_tokens(user_id)
        if not tokens:
            tokens_text = "üìã **–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã:**\n\n–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!"
        else:
            tokens_text = "üìã **–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã:**\n\n"
            for t in tokens:
                tokens_text += f"‚Ä¢ `{t['token_address']}` | –ü–æ—Ä–æ–≥: {t['volume_threshold']}% | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {t['check_interval']} –º–∏–Ω\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tokens")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="add_token")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="token_monitor")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            query.edit_message_text(
                tokens_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                pass
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                query.message.reply_text(
                    tokens_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
    
    def remove_token_command(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = query.from_user.id
        tokens = self.dex_monitor.get_user_tokens(user_id)
        if not tokens:
            query.edit_message_text(
                "üóë **–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤**\n\n–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="token_monitor")]]),
                parse_mode='Markdown'
            )
            return
        keyboard = [[InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {t['token_address'][:8]}...", callback_data=f"remove_{t['token_address']}")]
                    for t in tokens]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="token_monitor")])
        query.edit_message_text(
            "üóë **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    def handle_remove_token(self, query, context):
        token_address = query.data.split('_', 1)[1]
        user_id = query.from_user.id
        try:
            success = self.dex_monitor.remove_token(user_id, token_address)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            success = False
        
        if success:
            query.edit_message_text(
                f"‚úÖ **–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω!**\n\n–ê–¥—Ä–µ—Å: `{token_address[:10]}...{token_address[-8:]}`",
                parse_mode='Markdown'
            )
        else:
            query.edit_message_text(
                "‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞!**",
                parse_mode='Markdown'
            )

    def check_volume_command(self, query, context):
        user_id = query.from_user.id
        try:
            alerts = self.dex_monitor.check_volume_changes(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä–µ–º–æ–≤: {e}")
            alerts = []
        
        if not alerts:
            text = "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–æ–≤**\n\n–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ø–æ—Ä–æ–≥–∞."
        else:
            text = "üîç **–¢–æ–∫–µ–Ω—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ø–æ—Ä–æ–≥–∞:**\n\n"
            for alert in alerts:
                text += (f"‚Ä¢ `{alert['token_address']}` | {alert['token_name']}\n"
                        f"  –û–±—ä–µ–º: {alert['current_volume']}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {alert['volume_change']}% (–ø–æ—Ä–æ–≥ {alert['threshold']}%)\n"
                        f"  –¶–µ–Ω–∞: ${alert['current_price']:.6f}\n\n")
        query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="token_monitor")]]),
            parse_mode='Markdown'
        )
    
    def my_alerts(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        tokens = self.dex_monitor.get_user_tokens(user_id)
        if not tokens:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.")
            return
        text = "\U0001F514 <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>\n\n"
        keyboard = []
        for t in tokens:
            text += (f"‚Ä¢ <code>{t['token_address']}</code> | –ü–æ—Ä–æ–≥: {t['volume_threshold']}% | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {t['check_interval']} –º–∏–Ω\n")
            keyboard.append([InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {t['token_address'][:8]}...", callback_data=f"remove_alert_{t['token_address']}")])
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

    def remove_alert(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        tokens = self.dex_monitor.get_user_tokens(user_id)
        if not tokens:
            update.message.reply_text("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        keyboard = [[InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {t['token_address'][:8]}...", callback_data=f"remove_alert_{t['token_address']}")]
                    for t in tokens]
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–µ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    def clear_alerts(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        tokens = self.dex_monitor.get_user_tokens(user_id)
        if not tokens:
            update.message.reply_text("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        try:
            for t in tokens:
                self.dex_monitor.remove_token(user_id, t['token_address'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        update.message.reply_text("–í—Å–µ –∞–ª–µ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")

    def handle_remove_alert(self, update: Update, context: CallbackContext):
        query = update.callback_query
        user_id = query.from_user.id
        token_address = query.data.split('_', 2)[2]
        try:
            success = self.dex_monitor.remove_token(user_id, token_address)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            success = False
        if success:
            query.edit_message_text(f"‚úÖ –ê–ª–µ—Ä—Ç –ø–æ —Ç–æ–∫–µ–Ω—É {token_address[:10]}... —É–¥–∞–ª—ë–Ω.")
        else:
            query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞.")

    def handle_text_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_states:
            update.message.reply_text("‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        user_state = user_states[user_id]
        current_step = user_state.get('step')
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_step}")
        
        if current_step == 'waiting_address':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
            self.handle_token_address(update, context)
        elif current_step == 'waiting_threshold':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–∞ –æ–±—ä–µ–º–∞
            self.handle_volume_threshold(update, context)
        elif current_step == 'waiting_price_threshold':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã
            self.handle_price_threshold(update, context)
        else:
            update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            if user_id in user_states:
                del user_states[user_id]

    def show_process_control(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
        logger.info("DEBUG: –§—É–Ω–∫—Ü–∏—è show_process_control –≤—ã–∑–≤–∞–Ω–∞")
        if not PROCESS_MANAGER_AVAILABLE:
            self.safe_edit_message(
                query,
                "‚ùå **–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–¥—É–ª—å `process_manager`",
                parse_mode='Markdown'
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å process_manager
            logger.info("DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å process_manager")
            if not process_manager:
                logger.error("DEBUG: process_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.safe_edit_message(
                    query,
                    "‚ùå **–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–¥—É–ª—å `process_manager`",
                    parse_mode='Markdown'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            logger.info("DEBUG: –í—ã–∑—ã–≤–∞–µ–º process_manager.get_status()")
            status = process_manager.get_status()
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç process_manager: {status}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = "üß† **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏**\n\n"
            text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: {status['summary']['total']}\n"
            text += f"‚Ä¢ –ó–∞–ø—É—â–µ–Ω–æ: {status['summary']['running']}\n"
            text += f"‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {status['summary']['stopped']}\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            keyboard = []
            for script_name, script_info in status['scripts'].items():
                status_icon = "üü¢" if script_info['running'] else "üî¥"
                status_text = "–ó–∞–ø—É—â–µ–Ω" if script_info['running'] else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
                logger.info(f"DEBUG: –°–∫—Ä–∏–ø—Ç {script_name}: running={script_info['running']}, name={script_info['name']}")
                
                text += f"{status_icon} **{script_info['name']}**\n"
                text += f"‚îî {script_info['description']}\n"
                text += f"‚îî –°—Ç–∞—Ç—É—Å: {status_text}\n"
                
                if script_info['running'] and script_info['process_info']:
                    info = script_info['process_info']
                    text += f"‚îî PID: {info['pid']} | CPU: {info['cpu_percent']:.1f}% | RAM: {info['memory_mb']:.1f}MB\n"
                
                text += "\n"
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
                row = []
                if script_info['running']:
                    row.append(InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"script_stop_{script_name}"))
                    row.append(InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"script_restart_{script_name}"))
                else:
                    row.append(InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"script_start_{script_name}"))
                
                row.append(InlineKeyboardButton("üìã –õ–æ–≥–∏", callback_data=f"script_logs_{script_name}"))
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
            keyboard.append([
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="process_control"),
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="process_cleanup")
            ])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.safe_edit_message(
                query,
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            self.safe_edit_message(
                query,
                f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}",
                parse_mode='Markdown'
            )
    
    def handle_process_command(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
        try:
            command = query.data.split("_")[1]
            
            if command == "cleanup":
                process_manager.cleanup_dead_processes()
                self.safe_edit_message(query, "‚úÖ –ú–µ—Ä—Ç–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—á–∏—â–µ–Ω—ã")
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                self.show_process_control(query, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            self.safe_edit_message(query, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    def handle_script_command(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏"""
        try:
            parts = query.data.split("_")
            action = parts[1]
            script_name = parts[2]
            user_id = query.from_user.id
            
            if action == "start":
                success, message = process_manager.start_script(script_name, user_id)
                icon = "‚úÖ" if success else "‚ùå"
                self.safe_edit_message(query, f"{icon} {message}")
                
            elif action == "stop":
                success, message = process_manager.stop_script(script_name, user_id)
                icon = "‚úÖ" if success else "‚ùå"
                self.safe_edit_message(query, f"{icon} {message}")
                
            elif action == "restart":
                success, message = process_manager.restart_script(script_name, user_id)
                icon = "‚úÖ" if success else "‚ùå"
                self.safe_edit_message(query, f"{icon} {message}")
                
            elif action == "logs":
                logs = process_manager.get_logs(script_name, 20)
                if len(logs) > 4000:
                    logs = logs[-4000:] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏)"
                
                self.safe_edit_message(
                    query,
                    f"üìã **–õ–æ–≥–∏ {script_name}:**\n\n```\n{logs}\n```",
                    parse_mode='Markdown'
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            time.sleep(1)
            self.show_process_control(query, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å–∫—Ä–∏–ø—Ç–∞: {e}")
            self.safe_edit_message(query, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        if not TELEGRAM_TOKEN:
            logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        try:
            self.updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
            dispatcher = self.updater.dispatcher
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            dispatcher.add_handler(CommandHandler("start", self.start))
            dispatcher.add_handler(CommandHandler("my_alerts", self.my_alerts))
            dispatcher.add_handler(CommandHandler("remove_alert", self.remove_alert))
            dispatcher.add_handler(CommandHandler("clear_alerts", self.clear_alerts))
            dispatcher.add_handler(CallbackQueryHandler(self.handle_remove_alert, pattern='^remove_alert_'))
            dispatcher.add_handler(CallbackQueryHandler(self.button_handler))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            dispatcher.add_handler(CallbackQueryHandler(self.add_token_command, pattern='^add_token$'))
            dispatcher.add_handler(CallbackQueryHandler(self.handle_interval_selection, pattern='^interval_'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            dispatcher.add_handler(MessageHandler(None, self.handle_text_message))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            def error_handler(update, context):
                logger.error(f"–û—à–∏–±–∫–∞ –≤ updater: {context.error}")
            
            dispatcher.add_error_handler(error_handler)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å drop_pending_updates=True –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            self.updater.start_polling(drop_pending_updates=True, timeout=30)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            if "Conflict" in str(e):
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –æ–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                self.run()
            else:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                # –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                return
    
    async def cancel(self, update, context):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if user_id in user_states:
            del user_states[user_id]
        
        update.message.reply_text(
            "‚ùå **–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import os
    import tempfile
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    lock_file = os.path.join(tempfile.gettempdir(), 'crypto_monitor_bot.lock')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
        if os.path.exists(lock_file):
            with open(lock_file, 'r') as f:
                pid = f.read().strip()
            if os.path.exists(f'/proc/{pid}') or os.path.exists(f'/tmp/{pid}'):
                logger.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID {pid}")
                return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        with open(lock_file, 'w') as f:
            f.write(str(os.getpid()))
        
        bot = CryptoMonitorBot()
        bot.run()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            if os.path.exists(lock_file):
                os.remove(lock_file)
        except:
            pass

if __name__ == "__main__":
    main() 