#!/usr/bin/env python3
"""
–¢–µ—Å—Ç AI-–∞–Ω–∞–ª–∏–∑–∞ GitHub –∫–æ–º–º–∏—Ç–æ–≤
"""

import asyncio
import json
import logging
from config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_ai_analysis():
    """–¢–µ—Å—Ç AI-–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–∏—Ç–∞"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ monitor.py
        import sys
        sys.path.append('.')
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞
        commit_data = {
            'sha': 'abc123def456789',
            'commit': {
                'message': 'feat: add new smart contract functionality for token swaps',
                'author': {
                    'name': 'John Doe',
                    'email': 'john@example.com',
                    'date': '2024-01-15T10:30:00Z'
                }
            },
            'author': {
                'login': 'johndoe'
            },
            'stats': {
                'additions': 150,
                'deletions': 25,
                'total': 175
            },
            'files': [
                {
                    'filename': 'contracts/TokenSwap.sol',
                    'additions': 100,
                    'deletions': 10
                },
                {
                    'filename': 'tests/TokenSwap.test.js',
                    'additions': 50,
                    'deletions': 15
                }
            ]
        }
        
        repo_info = {
            'owner': 'FuelLabs',
            'repo': 'fuel-core'
        }
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–∞...")
        logger.info(f"–ö–æ–º–º–∏—Ç: {commit_data['sha'][:8]}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {commit_data['commit']['message']}")
        logger.info(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_info['owner']}/{repo_info['repo']}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
        from monitor import analyze_github_changes_with_ai
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º AI-–∞–Ω–∞–ª–∏–∑
        result = await analyze_github_changes_with_ai(commit_data, repo_info)
        
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç AI-–∞–Ω–∞–ª–∏–∑–∞:")
        logger.info(f"  –í–∞–∂–Ω–æ—Å—Ç—å: {result.get('importance')}")
        logger.info(f"  –í–ª–∏—è–Ω–∏–µ: {result.get('impact')}")
        logger.info(f"  –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç: {result.get('should_alert')}")
        logger.info(f"  –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {result.get('summary')}")
        logger.info(f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result.get('reason')}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

async def test_openai_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI"""
    try:
        from monitor import analyze_with_chatgpt
        
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI...")
        
        test_prompt = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: 'OK'"
        
        response = await analyze_with_chatgpt(test_prompt, "test")
        
        if response and 'choices' in response:
            content = response['choices'][0]['message']['content']
            logger.info(f"‚úÖ OpenAI –æ—Ç–≤–µ—á–∞–µ—Ç: {content}")
            return True
        else:
            logger.error("‚ùå OpenAI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–∞–Ω–∞–ª–∏–∑–∞ GitHub...")
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
    logger.info("\n--- –¢–ï–°–¢ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI ---")
    openai_ok = await test_openai_connection()
    
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 2: AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–∞
    logger.info("\n--- –¢–ï–°–¢ 2: AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–∞ ---")
    analysis_result = await test_ai_analysis()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---")
    logger.info(f"OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ –£–°–ü–ï–•' if openai_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    logger.info(f"AI-–∞–Ω–∞–ª–∏–∑: {'‚úÖ –£–°–ü–ï–•' if analysis_result else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if openai_ok and analysis_result:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã AI-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis_result.get('summary', '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')}")
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main()) 