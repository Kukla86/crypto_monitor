#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Telegram
"""

import asyncio
import aiohttp
import logging
from config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_telegram_alert():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
    try:
        config = get_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        bot_token = config.api_config['telegram']['bot_token']
        chat_id = config.api_config['telegram']['chat_id']
        
        logger.info(f"Bot token: {bot_token[:10]}...")
        logger.info(f"Chat ID: {chat_id}")
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üß™ <b>–¢–ï–°–¢ –ê–õ–ï–†–¢–ê</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    logger.error(f"–û—Ç–≤–µ—Ç: {error_text}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

async def test_github_alert():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ GitHub –∞–ª–µ—Ä—Ç–∞"""
    try:
        config = get_config()
        
        bot_token = config.api_config['telegram']['bot_token']
        chat_id = config.api_config['telegram']['chat_id']
        
        # –¢–µ—Å—Ç–æ–≤—ã–π GitHub –∞–ª–µ—Ä—Ç
        message = "üîß <b>GITHUB UPDATE</b>\n\n–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\n\n<b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> FuelLabs/fuel-core\n<b>–ö–æ–º–º–∏—Ç:</b> abc123\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> Test commit"
        
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º GitHub –∞–ª–µ—Ä—Ç...")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ GitHub –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GitHub –∞–ª–µ—Ä—Ç–∞: {response.status}")
                    logger.error(f"–û—Ç–≤–µ—Ç: {error_text}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GitHub —Ç–µ—Å—Ç–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∞–ª–µ—Ä—Ç
    logger.info("\n--- –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π –∞–ª–µ—Ä—Ç ---")
    success1 = await test_telegram_alert()
    
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 2: GitHub –∞–ª–µ—Ä—Ç
    logger.info("\n--- –¢–ï–°–¢ 2: GitHub –∞–ª–µ—Ä—Ç ---")
    success2 = await test_github_alert()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---")
    logger.info(f"–ü—Ä–æ—Å—Ç–æ–π –∞–ª–µ—Ä—Ç: {'‚úÖ –£–°–ü–ï–•' if success1 else '‚ùå –û–®–ò–ë–ö–ê'}")
    logger.info(f"GitHub –∞–ª–µ—Ä—Ç: {'‚úÖ –£–°–ü–ï–•' if success2 else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if success1 and success2:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main()) 