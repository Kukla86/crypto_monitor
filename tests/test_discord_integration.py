#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Discord –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import json
import logging
from config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_discord_ai_analysis():
    """–¢–µ—Å—Ç AI-–∞–Ω–∞–ª–∏–∑–∞ Discord —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        from monitor import analyze_discord_message_with_ai
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            {
                'content': 'üöÄ ANNOUNCEMENT: FUEL Network mainnet launch is scheduled for next week! Get ready for the biggest event in crypto history!',
                'server': 'Fuel Network Official',
                'channel': 'announcements',
                'expected_level': 'CRITICAL'
            },
            {
                'content': 'New partnership announcement: ARC token will be listed on Binance next month. This is huge for our community!',
                'server': 'ARC Community',
                'channel': 'news',
                'expected_level': 'HIGH'
            },
            {
                'content': 'Just had a great chat about the weather today. Nice sunny day for trading!',
                'server': 'Crypto Chat',
                'channel': 'general',
                'expected_level': 'LOW'
            }
        ]
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI-–∞–Ω–∞–ª–∏–∑ Discord —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        for i, test_msg in enumerate(test_messages, 1):
            logger.info(f"\n--- –¢–µ—Å—Ç {i}: {test_msg['expected_level']} ---")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {test_msg['content'][:50]}...")
            logger.info(f"–°–µ—Ä–≤–µ—Ä: {test_msg['server']}")
            logger.info(f"–ö–∞–Ω–∞–ª: {test_msg['channel']}")
            
            result = await analyze_discord_message_with_ai(
                test_msg['content'], 
                test_msg['server'], 
                test_msg['channel']
            )
            
            logger.info(f"AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            logger.info(f"  –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç: {result.get('should_alert')}")
            logger.info(f"  –£—Ä–æ–≤–µ–Ω—å: {result.get('level')}")
            logger.info(f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result.get('reason', '–ù–µ—Ç')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('level') == test_msg['expected_level']:
                logger.info(f"‚úÖ –¢–µ—Å—Ç {i} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç {i}: –æ–∂–∏–¥–∞–ª–∏ {test_msg['expected_level']}, –ø–æ–ª—É—á–∏–ª–∏ {result.get('level')}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ Discord: {e}")
        return False

async def test_discord_token_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ Discord —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    try:
        test_cases = [
            {
                'text': 'FUEL token is mooning today!',
                'expected_token': 'FUEL'
            },
            {
                'text': 'ARC community is growing fast',
                'expected_token': 'ARC'
            },
            {
                'text': 'CreatorBid platform is amazing',
                'expected_token': 'BID'
            },
            {
                'text': 'Manta Network partnership announced',
                'expected_token': 'MANTA'
            },
            {
                'text': 'Hey Anon, check this out!',
                'expected_token': 'ANON'
            }
        ]
        
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ Discord —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...")
        
        for i, test_case in enumerate(test_cases, 1):
            text = test_case['text'].lower()
            expected = test_case['expected_token']
            
            # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–∫–∞–∫ –≤ monitor.py)
            token = ''
            if 'fuel' in text:
                token = 'FUEL'
            elif 'arc' in text:
                token = 'ARC'
            elif 'bid' in text or 'creatorbid' in text:
                token = 'BID'
            elif 'manta' in text:
                token = 'MANTA'
            elif 'anon' in text or 'hey anon' in text:
                token = 'ANON'
            
            if token == expected:
                logger.info(f"‚úÖ –¢–µ—Å—Ç {i}: {expected} - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç {i}: –æ–∂–∏–¥–∞–ª–∏ {expected}, –ø–æ–ª—É—á–∏–ª–∏ {token}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return False

async def test_discord_cache():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Discord —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        cache_file = 'discord_messages_cache.json'
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à
        test_cache = {
            'test_server_123_test_channel_456_test_message_789': {
                'timestamp': '2024-01-15T10:30:00',
                'level': 'HIGH',
                'server': 'Test Server',
                'channel': 'test-channel'
            }
        }
        
        logger.info("üíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Discord —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à
        with open(cache_file, 'w') as f:
            json.dump(test_cache, f, indent=2)
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –ß–∏—Ç–∞–µ–º –∫—ç—à –æ–±—Ä–∞—Ç–Ω–æ
        with open(cache_file, 'r') as f:
            loaded_cache = json.load(f)
        
        if loaded_cache == test_cache:
            logger.info("‚úÖ –ö—ç—à –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
        message_key = 'test_server_123_test_channel_456_test_message_789'
        if message_key in loaded_cache:
            logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫—ç—à–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Discord –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    # –¢–µ—Å—Ç 1: AI-–∞–Ω–∞–ª–∏–∑
    logger.info("\n--- –¢–ï–°–¢ 1: AI-–∞–Ω–∞–ª–∏–∑ Discord —Å–æ–æ–±—â–µ–Ω–∏–π ---")
    ai_ok = await test_discord_ai_analysis()
    
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    logger.info("\n--- –¢–ï–°–¢ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ ---")
    token_ok = await test_discord_token_detection()
    
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 3: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("\n--- –¢–ï–°–¢ 3: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ---")
    cache_ok = await test_discord_cache()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---")
    logger.info(f"AI-–∞–Ω–∞–ª–∏–∑: {'‚úÖ –£–°–ü–ï–•' if ai_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {'‚úÖ –£–°–ü–ï–•' if token_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    logger.info(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –£–°–ü–ï–•' if cache_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if ai_ok and token_ok and cache_ok:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Discord –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üí° Discord –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ monitor.py")
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main()) 