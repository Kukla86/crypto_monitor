#!/usr/bin/env python3
"""
–¢–µ—Å—Ç GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import aiohttp
import json
import logging
from datetime import datetime, timedelta
from config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_github_api():
    """–¢–µ—Å—Ç API GitHub"""
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        owner = "FuelLabs"
        repo = "fuel-core"
        
        url = f"https://api.github.com/repos/{owner}/{repo}/commits"
        params = {
            'per_page': 5,
            'since': (datetime.now() - timedelta(days=7)).isoformat()
        }
        
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–∏—Ç—ã: {owner}/{repo}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                response_text = await response.text()
                if response.status == 200:
                    commits = json.loads(response_text)
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤")
                    if not commits:
                        logger.warning(f"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤. –û—Ç–≤–µ—Ç GitHub: {response_text}")
                    for i, commit in enumerate(commits[:3]):
                        logger.info(f"–ö–æ–º–º–∏—Ç {i+1}: {commit['sha'][:8]} - {commit['commit']['message'][:50]}...")
                    return commits
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GitHub API: {response.status}")
                    logger.error(f"–û—Ç–≤–µ—Ç GitHub: {response_text}")
                    return []
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ GitHub API: {e}")
        return []

async def test_github_alert_send():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ GitHub –∞–ª–µ—Ä—Ç–∞"""
    try:
        config = get_config()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞
        commit_data = {
            'sha': 'abc123def456',
            'commit': {
                'message': 'Test commit message for monitoring system',
                'author': {
                    'name': 'Test Author',
                    'email': 'test@example.com'
                }
            },
            'author': {
                'login': 'testuser'
            },
            'html_url': 'https://github.com/FuelLabs/fuel-core/commit/abc123def456'
        }
        
        repo_info = {
            'owner': 'FuelLabs',
            'repo': 'fuel-core'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üîß <b>GITHUB UPDATE</b>\n\n"
        message += f"<b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {repo_info['owner']}/{repo_info['repo']}\n"
        message += f"<b>–ö–æ–º–º–∏—Ç:</b> {commit_data['sha'][:8]}\n"
        message += f"<b>–ê–≤—Ç–æ—Ä:</b> {commit_data['author']['login']}\n"
        message += f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {commit_data['commit']['message'][:100]}...\n\n"
        message += f"<b>–°—Å—ã–ª–∫–∞:</b> {commit_data['html_url']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        bot_token = config.api_config['telegram']['bot_token']
        chat_id = config.api_config['telegram']['chat_id']
        
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π GitHub –∞–ª–µ—Ä—Ç...")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ GitHub –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GitHub –∞–ª–µ—Ä—Ç–∞: {response.status}")
                    logger.error(f"–û—Ç–≤–µ—Ç: {error_text}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ GitHub –∞–ª–µ—Ä—Ç–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    # –¢–µ—Å—Ç 1: GitHub API
    logger.info("\n--- –¢–ï–°–¢ 1: GitHub API ---")
    commits = await test_github_api()
    
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
    logger.info("\n--- –¢–ï–°–¢ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ GitHub –∞–ª–µ—Ä—Ç–∞ ---")
    success = await test_github_alert_send()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---")
    logger.info(f"GitHub API: {'‚úÖ –£–°–ü–ï–•' if commits else '‚ùå –û–®–ò–ë–ö–ê'}")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if commits and success:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main()) 