#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_github_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        from monitor import analyze_github_changes_with_ai, send_github_alert
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç
        commit_data = {
            'sha': 'test123abc456',
            'commit': {
                'message': 'fix: resolve critical security vulnerability in token transfer',
                'author': {
                    'name': 'Security Team',
                    'email': 'security@fuellabs.com',
                    'date': datetime.now().isoformat()
                }
            },
            'author': {
                'login': 'security-team'
            },
            'stats': {
                'additions': 50,
                'deletions': 30,
                'total': 80
            },
            'files': [
                {
                    'filename': 'src/security/TokenTransfer.sol',
                    'additions': 30,
                    'deletions': 20
                },
                {
                    'filename': 'tests/security/TokenTransfer.test.js',
                    'additions': 20,
                    'deletions': 10
                }
            ]
        }
        
        repo_info = {
            'owner': 'FuelLabs',
            'repo': 'fuel-core'
        }
        
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π workflow GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        logger.info(f"–ö–æ–º–º–∏—Ç: {commit_data['sha'][:8]}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {commit_data['commit']['message']}")
        
        # –®–∞–≥ 1: AI-–∞–Ω–∞–ª–∏–∑
        logger.info("\n--- –®–ê–ì 1: AI-–∞–Ω–∞–ª–∏–∑ ---")
        ai_analysis = await analyze_github_changes_with_ai(commit_data, repo_info)
        
        logger.info(f"AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –≤–∞–∂–Ω–æ—Å—Ç—å={ai_analysis.get('importance')}, –≤–ª–∏—è–Ω–∏–µ={ai_analysis.get('impact')}")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç: {ai_analysis.get('should_alert')}")
        
        # –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info("\n--- –®–ê–ì 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---")
        
        if ai_analysis.get('should_alert', False):
            importance = ai_analysis.get('importance', 'medium')
            level_map = {
                'critical': 'CRITICAL',
                'high': 'HIGH', 
                'medium': 'MEDIUM',
                'low': 'INFO'
            }
            level = level_map.get(importance, 'MEDIUM')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            summary = ai_analysis.get('summary', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏')
            reason = ai_analysis.get('reason', '')
            
            message = f"üîß <b>GITHUB UPDATE - {level}</b>\n\n"
            message += f"<b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {repo_info['owner']}/{repo_info['repo']}\n"
            message += f"<b>–ö–æ–º–º–∏—Ç:</b> {commit_data['sha'][:8]}\n"
            message += f"<b>–ê–≤—Ç–æ—Ä:</b> {commit_data['author']['login']}\n"
            message += f"<b>AI-–∞–Ω–∞–ª–∏–∑:</b> {summary}\n"
            if reason:
                message += f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> {reason[:100]}...\n"
            message += f"\n<b>–°—Å—ã–ª–∫–∞:</b> https://github.com/{repo_info['owner']}/{repo_info['repo']}/commit/{commit_data['sha']}"
            
            logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:200]}...")
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
            logger.info("\n--- –®–ê–ì 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ ---")
            commit_link = f"https://github.com/{repo_info['owner']}/{repo_info['repo']}/commit/{commit_data['sha']}"
            
            await send_github_alert(message, level, commit_link, repo_info)
            logger.info("‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
            return True
        else:
            logger.info("‚ö†Ô∏è AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ workflow: {e}")
        return False

async def test_with_real_commit():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–º–º–∏—Ç–æ–º –∏–∑ GitHub"""
    try:
        import aiohttp
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        owner = "torvalds"
        repo = "linux"
        
        url = f"https://api.github.com/repos/{owner}/{repo}/commits"
        params = {
            'per_page': 1,
            'since': (datetime.now() - timedelta(days=30)).isoformat()
        }
        
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç –∏–∑ {owner}/{repo}...")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    commits = await response.json()
                    if commits:
                        commit = commits[0]
                        logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–º–º–∏—Ç: {commit['sha'][:8]} - {commit['commit']['message'][:50]}...")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        commit_detail_url = f"https://api.github.com/repos/{owner}/{repo}/commits/{commit['sha']}"
                        async with session.get(commit_detail_url) as detail_response:
                            if detail_response.status == 200:
                                detailed_commit = await detail_response.json()
                                
                                repo_info = {'owner': owner, 'repo': repo}
                                
                                # AI-–∞–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
                                from monitor import analyze_github_changes_with_ai
                                ai_analysis = await analyze_github_changes_with_ai(detailed_commit, repo_info)
                                
                                logger.info(f"AI-–∞–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞:")
                                logger.info(f"  –í–∞–∂–Ω–æ—Å—Ç—å: {ai_analysis.get('importance')}")
                                logger.info(f"  –í–ª–∏—è–Ω–∏–µ: {ai_analysis.get('impact')}")
                                logger.info(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {ai_analysis.get('summary')}")
                                
                                return True
                    
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤")
                    return False
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ GitHub API: {response.status}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–º–º–∏—Ç–æ–º: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub workflow...")
    
    # –¢–µ—Å—Ç 1: –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow
    logger.info("\n--- –¢–ï–°–¢ 1: –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow ---")
    workflow_ok = await test_github_workflow()
    
    await asyncio.sleep(3)
    
    # –¢–µ—Å—Ç 2: –†–µ–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
    logger.info("\n--- –¢–ï–°–¢ 2: –†–µ–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç ---")
    real_commit_ok = await test_with_real_commit()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---")
    logger.info(f"–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow: {'‚úÖ –£–°–ü–ï–•' if workflow_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    logger.info(f"–†–µ–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç: {'‚úÖ –£–°–ü–ï–•' if real_commit_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if workflow_ok:
        logger.info("üéâ GitHub workflow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        logger.error("üí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ workflow")

if __name__ == "__main__":
    asyncio.run(main()) 