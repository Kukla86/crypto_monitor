#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —à–∞–±–ª–æ–Ω—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é
"""

import asyncio
import logging
import json
import time
from typing import Dict, List, Any, Optional, Union
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from enum import Enum
import hashlib
from pathlib import Path

logger = logging.getLogger(__name__)

class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"

class AlertChannel(Enum):
    """–ö–∞–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    TELEGRAM = "telegram"
    DISCORD = "discord"
    EMAIL = "email"
    WEBHOOK = "webhook"
    CONSOLE = "console"
    LOG = "log"

@dataclass
class AlertTemplate:
    """–®–∞–±–ª–æ–Ω –∞–ª–µ—Ä—Ç–∞"""
    name: str
    title: str
    message: str
    emoji: str = ""
    color: str = "#000000"
    priority: AlertLevel = AlertLevel.INFO

@dataclass
class Alert:
    """–ê–ª–µ—Ä—Ç"""
    id: str
    level: AlertLevel
    title: str
    message: str
    token_symbol: Optional[str] = None
    source: Optional[str] = None
    timestamp: datetime = None
    data: Optional[Dict[str, Any]] = None
    channels: List[AlertChannel] = None
    template: Optional[str] = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()
        if self.channels is None:
            self.channels = [AlertChannel.TELEGRAM, AlertChannel.CONSOLE]

class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.alerts_history = []
        self.sent_alerts = set()
        self.alert_templates = self._load_templates()
        self.channel_handlers = self._setup_channel_handlers()
        self.rate_limits = {}
        self.alert_filters = []
        
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_templates(self) -> Dict[str, AlertTemplate]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤"""
        templates = {
            'price_spike': AlertTemplate(
                name='price_spike',
                title='üöÄ –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã',
                message='–¢–æ–∫–µ–Ω {token} –ø–æ–∫–∞–∑–∞–ª —Ä–æ—Å—Ç –Ω–∞ {change}% –∑–∞ {period}',
                emoji='üöÄ',
                color='#00ff00',
                priority=AlertLevel.WARNING
            ),
            'volume_surge': AlertTemplate(
                name='volume_surge',
                title='üìà –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞',
                message='–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ {token} –≤—ã—Ä–æ—Å –Ω–∞ {change}%',
                emoji='üìà',
                color='#ffaa00',
                priority=AlertLevel.WARNING
            ),
            'whale_movement': AlertTemplate(
                name='whale_movement',
                title='üêã –î–≤–∏–∂–µ–Ω–∏–µ –∫–∏—Ç–æ–≤',
                message='–ö—Ä—É–ø–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {amount} {token} –Ω–∞ —Å—É–º–º—É ${value}',
                emoji='üêã',
                color='#ff0000',
                priority=AlertLevel.ERROR
            ),
            'social_buzz': AlertTemplate(
                name='social_buzz',
                title='üì± –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                message='–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –¥–ª—è {token}',
                emoji='üì±',
                color='#0088ff',
                priority=AlertLevel.INFO
            ),
            'system_error': AlertTemplate(
                name='system_error',
                title='‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                message='–û—à–∏–±–∫–∞ –≤ {component}: {error}',
                emoji='‚ùå',
                color='#ff0000',
                priority=AlertLevel.CRITICAL
            ),
            'performance_warning': AlertTemplate(
                name='performance_warning',
                title='‚ö° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                message='{metric}: {value} (–ø–æ—Ä–æ–≥: {threshold})',
                emoji='‚ö°',
                color='#ff8800',
                priority=AlertLevel.WARNING
            )
        }
        
        return templates
    
    def _setup_channel_handlers(self) -> Dict[AlertChannel, callable]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–æ–≤"""
        return {
            AlertChannel.TELEGRAM: self._send_telegram_alert,
            AlertChannel.DISCORD: self._send_discord_alert,
            AlertChannel.EMAIL: self._send_email_alert,
            AlertChannel.WEBHOOK: self._send_webhook_alert,
            AlertChannel.CONSOLE: self._send_console_alert,
            AlertChannel.LOG: self._send_log_alert
        }
    
    def create_alert(self, level: AlertLevel, title: str, message: str, 
                    token_symbol: Optional[str] = None, source: Optional[str] = None,
                    data: Optional[Dict[str, Any]] = None, 
                    channels: Optional[List[AlertChannel]] = None,
                    template: Optional[str] = None) -> Alert:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if template and template in self.alert_templates:
            template_obj = self.alert_templates[template]
            title = template_obj.title
            message = template_obj.message.format(**data) if data else template_obj.message
            level = template_obj.priority
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        alert_id = self._generate_alert_id(title, message, token_symbol)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç –∞–ª–µ—Ä—Ç
        if alert_id in self.sent_alerts:
            logger.debug(f"–ê–ª–µ—Ä—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert_id}")
            return None
        
        alert = Alert(
            id=alert_id,
            level=level,
            title=title,
            message=message,
            token_symbol=token_symbol,
            source=source,
            data=data,
            channels=channels or [AlertChannel.TELEGRAM, AlertChannel.CONSOLE],
            template=template
        )
        
        return alert
    
    def _generate_alert_id(self, title: str, message: str, token_symbol: Optional[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∞–ª–µ—Ä—Ç–∞"""
        content = f"{title}:{message}:{token_symbol or ''}"
        return hashlib.md5(content.encode()).hexdigest()[:8]
    
    async def send_alert(self, alert: Alert) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        if not alert:
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limits
            if not self._check_rate_limit(alert):
                logger.warning(f"Rate limit –¥–ª—è –∞–ª–µ—Ä—Ç–∞ {alert.id}")
                return False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if not self._apply_filters(alert):
                logger.debug(f"–ê–ª–µ—Ä—Ç {alert.id} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
            success = True
            for channel in alert.channels:
                if channel in self.channel_handlers:
                    try:
                        await self.channel_handlers[channel](alert)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {channel.value}: {e}")
                        success = False
            
            if success:
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                self.sent_alerts.add(alert.id)
                self.alerts_history.append(alert)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                if len(self.alerts_history) > 1000:
                    self.alerts_history = self.alerts_history[-1000:]
                
                logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert.title}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    def _check_rate_limit(self, alert: Alert) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit"""
        key = f"{alert.level.value}:{alert.token_symbol or 'global'}"
        current_time = time.time()
        
        if key not in self.rate_limits:
            self.rate_limits[key] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        self.rate_limits[key] = [t for t in self.rate_limits[key] if current_time - t < 3600]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        limits = {
            AlertLevel.INFO: 60,      # 60 –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å
            AlertLevel.WARNING: 30,   # 30 –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å
            AlertLevel.ERROR: 10,     # 10 –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å
            AlertLevel.CRITICAL: 5    # 5 –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å
        }
        
        if len(self.rate_limits[key]) >= limits.get(alert.level, 60):
            return False
        
        self.rate_limits[key].append(current_time)
        return True
    
    def _apply_filters(self, alert: Alert) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        for filter_func in self.alert_filters:
            if not filter_func(alert):
                return False
        return True
    
    def add_filter(self, filter_func: callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.alert_filters.append(filter_func)
    
    async def _send_telegram_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
        try:
            from telegram_bot import CryptoMonitorBot
            
            message = self._format_alert_message(alert, 'telegram')
            await CryptoMonitorBot.send_message(message)
            
        except ImportError:
            logger.warning("Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    
    async def _send_discord_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Discord
            logger.info(f"Discord –∞–ª–µ—Ä—Ç: {alert.title}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord: {e}")
    
    async def _send_email_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ email"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email
            logger.info(f"Email –∞–ª–µ—Ä—Ç: {alert.title}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
    
    async def _send_webhook_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ webhook"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å webhook
            logger.info(f"Webhook –∞–ª–µ—Ä—Ç: {alert.title}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")
    
    async def _send_console_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        emoji = self.alert_templates.get(alert.template, AlertTemplate("", "", "")).emoji if alert.template else ""
        print(f"{emoji} [{alert.level.value.upper()}] {alert.title}: {alert.message}")
    
    def _send_log_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–æ–≥"""
        log_level = getattr(logging, alert.level.value.upper(), logging.INFO)
        logger.log(log_level, f"{alert.title}: {alert.message}")
    
    def _format_alert_message(self, alert: Alert, channel: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        template = self.alert_templates.get(alert.template)
        emoji = template.emoji if template else ""
        
        if channel == 'telegram':
            return f"{emoji} <b>{alert.title}</b>\n{alert.message}"
        else:
            return f"{emoji} {alert.title}\n{alert.message}"
    
    def get_alerts_history(self, hours: int = 24, level: Optional[AlertLevel] = None) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        alerts = [a for a in self.alerts_history if a.timestamp > cutoff_time]
        
        if level:
            alerts = [a for a in alerts if a.level == level]
        
        return alerts
    
    def get_alert_stats(self, hours: int = 24) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = self.get_alerts_history(hours)
        
        stats = {
            'total_alerts': len(alerts),
            'by_level': {},
            'by_token': {},
            'by_source': {}
        }
        
        for alert in alerts:
            # –ü–æ —É—Ä–æ–≤–Ω—é
            level = alert.level.value
            stats['by_level'][level] = stats['by_level'].get(level, 0) + 1
            
            # –ü–æ —Ç–æ–∫–µ–Ω—É
            if alert.token_symbol:
                stats['by_token'][alert.token_symbol] = stats['by_token'].get(alert.token_symbol, 0) + 1
            
            # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
            if alert.source:
                stats['by_source'][alert.source] = stats['by_source'].get(alert.source, 0) + 1
        
        return stats
    
    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.alerts_history.clear()
        self.sent_alerts.clear()
        logger.info("–ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤
alert_manager = None

def get_alert_manager() -> AlertManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    global alert_manager
    if alert_manager is None:
        alert_manager = AlertManager()
    return alert_manager

async def send_alert(level: AlertLevel, title: str, message: str, 
                    token_symbol: Optional[str] = None, source: Optional[str] = None,
                    data: Optional[Dict[str, Any]] = None, 
                    channels: Optional[List[AlertChannel]] = None,
                    template: Optional[str] = None) -> bool:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    manager = get_alert_manager()
    alert = manager.create_alert(level, title, message, token_symbol, source, data, channels, template)
    return await manager.send_alert(alert) 