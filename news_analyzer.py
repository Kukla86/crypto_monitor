#!/usr/bin/env python3
"""
AI-Based Crypto News Analyzer ‚Äî With Impact Filtering
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π —Å AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import logging
import os
import openai
from typing import Dict, Any, Optional
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

class NewsAnalyzer:
    """AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.prompt_template = """
You are a crypto analyst. For the news below, return JSON with:
{
  'summary': 'brief human-readable summary',
  'impact': 'high | medium | low | none',
  'reason': 'why this impact level was selected',
  'action_required': true/false,
  'skip': true/false
}

üî¥ Impact = "high" if:
- Token listing or delisting (CEX or DEX)
- Major hack, exploit, regulation news
- Mainnet, testnet, launch announcement
- Airdrop confirmation or claim phase
- Role or early access information (e.g. Discord OG / Whitelist)
- NFT mint or NFT-related announcement (initial drop or collection launch)
- Fundraising round (seed / private / Series A+)
- Large whale movement or liquidity unlock
- Public product launch or roadmap milestone

üü° Impact = "medium" if:
- AMA events, interviews with founders
- Minor partnerships
- Project joins hackathon, minor integrations
- Blog posts with indirect news
- Updates to product or UI

‚ö™ Impact = "low" or "none" if:
- Market recap or price commentary
- Generic influencer tweets / community memes
- No actionable or novel info
- Repeat posts with no change
- Unverified rumors or hype

News to analyze:
{news_text}

Only output valid JSON, no extra text.
"""
    
    async def analyze_news(self, news_text: str, source: str = "unknown") -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            news_text: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏ (telegram, twitter, rss, etc.)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            if not OPENAI_API_KEY:
                logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                await self._send_ai_unavailable_alert("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self.prompt_template.format(news_text=news_text[:2000])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI API
            response = await openai.ChatCompletion.acreate(
                model="gpt-4o-mini",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
                messages=[
                    {"role": "system", "content": "You are a crypto news analyst. Return only valid JSON."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                max_tokens=500
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            ai_response = response.choices[0].message.content.strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_start = ai_response.find('{')
            json_end = ai_response.rfind('}') + 1
            
            if json_start != -1 and json_end > json_start:
                json_str = ai_response[json_start:json_end]
                result = json.loads(json_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                result['source'] = source
                result['analyzed_at'] = datetime.now().isoformat()
                result['ai_model'] = 'gpt-4o-mini'
                
                logger.info(f"AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['impact']} - {result['summary'][:50]}...")
                return result
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI: {ai_response}")
                await self._send_ai_unavailable_alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI")
                return None
                
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç AI: {e}")
            await self._send_ai_unavailable_alert(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç AI: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await self._send_ai_unavailable_alert(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    async def _send_ai_unavailable_alert(self, error_message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ Telegram –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º send_alert –∏–∑ monitor.py
            import sys
            import os
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            try:
                from monitor import send_alert
                
                alert_message = f"""ü§ñ AI –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–£–ü–ï–ù

‚ùå –û—à–∏–±–∫–∞: {error_message}

‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞
üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

                await send_alert('CRITICAL', alert_message)
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI")
                
            except ImportError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å send_alert –∏–∑ monitor.py")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI: {e}")
    
    def _fallback_analysis(self, news_text: str, source: str) -> Dict[str, Any]:
        """
        Fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI - –ü–†–û–°–¢–´–ï –ü–†–ê–í–ò–õ–ê (–û–¢–ö–õ–Æ–ß–ï–ù)
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logger.warning("Fallback –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ AI")
        return None
    
    def should_send_alert(self, analysis: Dict[str, Any]) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
        """
        if analysis is None:
            return False
            
        return (
            not analysis.get('skip', False) and 
            analysis.get('action_required', False) and
            analysis.get('impact') in ['high', 'medium']
        )
    
    def get_alert_level(self, analysis: Dict[str, Any]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            
        Returns:
            –£—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞: 'high', 'medium', 'low'
        """
        if analysis is None:
            return 'low'
            
        impact = analysis.get('impact', 'low')
        
        if impact == 'high':
            return 'high'
        elif impact == 'medium':
            return 'medium'
        else:
            return 'low'
    
    def format_alert_message(self, analysis: Dict[str, Any], original_text: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            original_text: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
        """
        if analysis is None:
            return f"""‚ùå –ù–û–í–û–°–¢–¨ –ù–ï –û–ë–†–ê–ë–û–¢–ê–ù–ê

ü§ñ AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª: {original_text[:200]}{'...' if len(original_text) > 200 else ''}"""
        
        impact = analysis.get('impact', 'low')
        summary = analysis.get('summary', '')
        reason = analysis.get('reason', '')
        source = analysis.get('source', 'unknown')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–≥ –¥–ª—è —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏
        if impact == 'high':
            emoji = "üö®"
            tag = "[üö® –°–†–û–ß–ù–û]"
        elif impact == 'medium':
            emoji = "‚ö†Ô∏è"
            tag = "[‚ö†Ô∏è –í–ê–ñ–ù–û]"
        else:
            emoji = "‚ÑπÔ∏è"
            tag = "[‚ÑπÔ∏è –ò–ù–§–û]"
        
        message = f"""
{tag} {emoji} –ù–û–í–û–°–¢–¨ {emoji}

üì∞ {summary}

üîç –ü—Ä–∏—á–∏–Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {reason}
üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {source}

üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª:
{original_text[:300]}{'...' if len(original_text) > 300 else ''}
"""
        return message.strip()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
news_analyzer = NewsAnalyzer()

async def analyze_crypto_news(news_text: str, source: str = "unknown") -> Dict[str, Any]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π
    
    Args:
        news_text: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        source: –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    """
    return await news_analyzer.analyze_news(news_text, source)

async def should_alert_news(analysis: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
    """
    return news_analyzer.should_send_alert(analysis)

async def format_news_alert(analysis: Dict[str, Any], original_text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏
        original_text: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
    """
    return news_analyzer.format_alert_message(analysis, original_text)

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_news_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π"""
    test_news = [
        {
            "text": "üöÄ FUEL Network announces mainnet launch on March 15th! Get ready for the future of modular blockchains.",
            "source": "telegram"
        },
        {
            "text": "Just checked the price of ARC, looking good today! üìà",
            "source": "twitter"
        },
        {
            "text": "Breaking: Major hack detected on DeFi protocol. $50M stolen from liquidity pools.",
            "source": "rss"
        },
        {
            "text": "Join our AMA with the FUEL team tomorrow at 3 PM UTC!",
            "source": "discord"
        }
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –ù–û–í–û–°–¢–ï–ô")
    print("=" * 50)
    
    for i, news in enumerate(test_news, 1):
        print(f"\nüì∞ –¢–µ—Å—Ç {i}: {news['source'].upper()}")
        print(f"–¢–µ–∫—Å—Ç: {news['text']}")
        
        analysis = await analyze_crypto_news(news['text'], news['source'])
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"  ‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å: {analysis['impact']}")
        print(f"  ‚Ä¢ –†–µ–∑—é–º–µ: {analysis['summary']}")
        print(f"  ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {analysis['reason']}")
        print(f"  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è: {analysis['action_required']}")
        print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å: {analysis['skip']}")
        print(f"  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç: {await should_alert_news(analysis)}")
        
        if await should_alert_news(analysis):
            alert_message = await format_news_alert(analysis, news['text'])
            print(f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞:\n{alert_message}")

if __name__ == "__main__":
    asyncio.run(test_news_analyzer()) 