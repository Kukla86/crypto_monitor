#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
"""

import sys
import importlib
from typing import List, Dict, Tuple

def check_module(module_name: str, package_name: str = None) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è"""
    try:
        importlib.import_module(module_name)
        return True, f"‚úÖ {package_name or module_name}"
    except ImportError as e:
        return False, f"‚ùå {package_name or module_name}: {e}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞...\n")
    
    # –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependencies = [
        ("aiohttp", "aiohttp"),
        ("requests", "requests"),
        ("asyncio", "asyncio"),
        ("websockets", "websockets"),
        ("sqlite3", "sqlite3"),
        ("yaml", "PyYAML"),
        ("json", "json"),
        ("os", "os"),
        ("logging", "logging"),
        ("datetime", "datetime"),
        ("typing", "typing"),
        ("time", "time"),
        ("random", "random"),
        ("threading", "threading"),
        ("collections", "collections"),
        ("telethon", "telethon"),
        ("discord", "discord.py"),
        ("subprocess", "subprocess"),
        ("sys", "sys"),
        ("hashlib", "hashlib"),
        ("openai", "openai"),
        ("xml.etree.ElementTree", "xml"),
        ("re", "re"),
        ("bs4", "beautifulsoup4"),
        ("flask", "Flask"),
        ("dotenv", "python-dotenv"),
        ("cachetools", "cachetools"),
        ("redis", "redis"),
        ("pandas", "pandas"),
        ("matplotlib", "matplotlib"),
        ("numpy", "numpy"),
        ("plotly", "plotly"),
        ("sklearn", "scikit-learn"),
        ("scipy", "scipy"),
        ("tweepy", "tweepy"),
        ("snscrape", "snscrape"),
        ("transformers", "transformers"),
        ("torch", "torch"),
        ("nltk", "nltk"),
        ("textblob", "textblob"),
        ("lxml", "lxml"),
        ("feedparser", "feedparser"),
        ("selenium", "selenium"),
        ("playwright", "playwright"),
        ("cryptography", "cryptography"),
        ("bcrypt", "bcrypt"),
        ("structlog", "structlog"),
        ("prometheus_client", "prometheus-client"),
        ("pytest", "pytest"),
        ("pytest_asyncio", "pytest-asyncio"),
        ("pytest_cov", "pytest-cov"),
        ("click", "click"),
        ("rich", "rich"),
        ("tqdm", "tqdm"),
        ("colorama", "colorama"),
        ("ccxt", "ccxt"),
        ("psutil", "psutil"),
        ("cpuinfo", "py-cpuinfo"),
        ("sphinx", "sphinx"),
    ]
    
    results = []
    all_passed = True
    
    for module_name, package_name in dependencies:
        success, message = check_module(module_name, package_name)
        results.append((success, message))
        if not success:
            all_passed = False
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n")
    for success, message in results:
        print(message)
    
    print(f"\n{'='*50}")
    if all_passed:
        print("üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   pip install -r requirements.txt")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 