#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç FUEL –∏ ARC
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ on-chain –¥–∞–Ω–Ω—ã—Ö, CEX, DEX, —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import asyncio
import aiohttp
import requests
import sqlite3
import json
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import time
import random
import websockets
import threading
from collections import deque
from googletrans import Translator
from telethon import TelegramClient, events
import discord
import subprocess
import sys
import hashlib
import openai
import xml.etree.ElementTree as ET
import re
from bs4 import BeautifulSoup
from flask import Flask, request, jsonify

# –°–æ–∑–¥–∞–µ–º Flask app –¥–ª—è webhook
app = Flask(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import get_config

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
try:
    from exceptions import (
        CryptoMonitorError, APIError, RateLimitError, NetworkError, DatabaseError,
        ConfigurationError, TokenError, SocialMediaError, AlertError,
        DataValidationError, RetryableError, CriticalError
    )
    from error_handler import handle_errors, ErrorHandler
    ERROR_HANDLING_AVAILABLE = True
except ImportError:
    ERROR_HANDLING_AVAILABLE = False
    # Fallback –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    def handle_errors(operation_name):
        def decorator(func):
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ {operation_name}: {e}")
                    return {}
            return wrapper
        return decorator

# –ò–º–ø–æ—Ä—Ç AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
try:
    from news_analyzer import analyze_crypto_news, should_alert_news, format_news_alert
    NEWS_ANALYZER_AVAILABLE = True
except ImportError:
    NEWS_ANALYZER_AVAILABLE = False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv('config.env')

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = get_config()

# OpenAI API –∫–ª—é—á
OPENAI_API_KEY = config.api_config.get('openai', {}).get('api_key') if 'openai' in config.api_config else None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
- –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –§–æ—Ä–º–∞—Ç: –≤—Ä–µ–º—è, —É—Ä–æ–≤–µ–Ω—å, –º–æ–¥—É–ª—å:—Å—Ç—Ä–æ–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ
- –õ–æ–≥–∏ –ø–∏—à—É—Ç—Å—è –≤ —Ñ–∞–π–ª monitoring.log –∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
- –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫: error.log
"""
import logging.handlers

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=getattr(logging, config.logging_config['level'], logging.INFO),
    format='%(asctime)s %(levelname)s [%(module)s:%(lineno)d] %(message)s',
    handlers=[
        logging.FileHandler(config.logging_config['file'], mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
error_logger = logging.getLogger('error_logger')
error_logger.setLevel(logging.ERROR)
error_handler = logging.FileHandler('error.log')
error_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s [%(module)s:%(lineno)d] %(message)s'))
error_logger.addHandler(error_handler)

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def log_error(operation: str, error: Exception, context: dict = None):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    error_msg = f"‚ùå –û–®–ò–ë–ö–ê –≤ {operation}: {type(error).__name__}: {str(error)}"
    if context:
        error_msg += f" | –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
    
    logger.error(error_msg)
    error_logger.error(error_msg)
    
    # –õ–æ–≥–∏—Ä—É–µ–º stack trace –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if isinstance(error, (ConnectionError, TimeoutError, OSError)):
        import traceback
        stack_trace = traceback.format_exc()
        error_logger.error(f"Stack trace –¥–ª—è {operation}:\n{stack_trace}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö
realtime_data = {
    'FUEL': {
        'price': 0.0,
        'volume_24h': 0.0,
        'price_change_24h': 0.0,
        'last_update': None,
        'source': None
    },
    'ARC': {
        'price': 0.0,
        'volume_24h': 0.0,
        'price_change_24h': 0.0,
        'last_update': None,
        'source': None
    }
}

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
alert_queue = deque(maxlen=100)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ config
TOKENS = config.get_tokens_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = config.database_config['path']

def datetime_to_iso(dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç datetime –≤ ISO —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if dt is None:
        return None
    if isinstance(dt, datetime):
        return dt.isoformat()
    return str(dt)

def clean_realtime_data_for_json():
    """–û—á–∏—â–∞–µ—Ç realtime_data –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    cleaned = {}
    for symbol, data in realtime_data.items():
        cleaned[symbol] = {
            'price': data['price'],
            'volume_24h': data['volume_24h'],
            'price_change_24h': data['price_change_24h'],
            'last_update': datetime_to_iso(data['last_update']),
            'source': data['source']
        }
    return cleaned

async def rate_limit_check(api_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è API"""
    current_time = time.time()
    limit_info = config.rate_limits.get(api_name, {'requests_per_minute': 60, 'last_request': 0})
    
    if current_time - limit_info['last_request'] < 60.0 / limit_info['requests_per_minute']:
        return False
    
    config.rate_limits[api_name]['last_request'] = current_time
    return True

async def retry_request(func, *args, max_retries=None, **kwargs):
    """Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if max_retries is None:
        max_retries = config.retry_config['max_retries']
    
    for attempt in range(max_retries + 1):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            if attempt == max_retries:
                raise e
            
            delay = config.retry_config['retry_delay'] * (config.retry_config['backoff_factor'] ** attempt)
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å: {e}")
            await asyncio.sleep(delay)

def init_openai():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API"""
    try:
        if 'openai' in config.api_config:
            openai.api_key = config.api_config['openai']['api_key']
            logger.info("OpenAI API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")

async def analyze_with_chatgpt(prompt: str, analysis_type: str) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é ChatGPT"""
    try:
        if not OPENAI_API_KEY or OPENAI_API_KEY == 'your_openai_api_key_here':
            logger.warning("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–∞: {analysis_type}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        model = "gpt-3.5-turbo"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ChatGPT
        messages = [
            {"role": "system", "content": f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}"},
            {"role": "user", "content": prompt}
        ]
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API (–º–æ–¥–µ–ª—å: {model})")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model=model,
            messages=messages,
            max_tokens=1000,
            temperature=0.7
        )
        
        logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return response
        
    except openai.error.AuthenticationError as e:
        log_error("OpenAI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", e, {"analysis_type": analysis_type})
        return None
    except openai.error.RateLimitError as e:
        log_error("OpenAI rate limit", e, {"analysis_type": analysis_type})
        return None
    except openai.error.APIError as e:
        log_error("OpenAI API –æ—à–∏–±–∫–∞", e, {"analysis_type": analysis_type})
        return None
    except Exception as e:
        log_error("AI –∞–Ω–∞–ª–∏–∑", e, {"analysis_type": analysis_type})
        return None

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
        with sqlite3.connect(DB_PATH) as conn:
            with conn:
                cursor = conn.cursor()
                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS token_data (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        symbol TEXT NOT NULL,
                        price REAL,
                        volume_24h REAL,
                        market_cap REAL,
                        holders_count INTEGER,
                        top_holders TEXT,
                        tvl REAL,
                        social_mentions INTEGER,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS alerts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        level TEXT NOT NULL,
                        message TEXT NOT NULL,
                        token_symbol TEXT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS realtime_data (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        symbol TEXT NOT NULL,
                        price REAL,
                        volume_24h REAL,
                        price_change_24h REAL,
                        source TEXT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS technical_indicators (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        symbol TEXT NOT NULL,
                        indicator_name TEXT NOT NULL,
                        value REAL,
                        signal TEXT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS social_alerts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        timestamp TEXT,
                        source TEXT,
                        level TEXT,
                        original_text TEXT,
                        translated_text TEXT,
                        link TEXT,
                        token TEXT,
                        keywords TEXT,
                        important_news INTEGER
                    )
                ''')
                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–æ—á–µ–∫ –æ—Ç—Å—á—ë—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS alert_reference (
                        symbol TEXT PRIMARY KEY,
                        last_price REAL,
                        last_volume REAL,
                        last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS processed_tweets (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        tweet_hash TEXT UNIQUE,
                        username TEXT NOT NULL,
                        tweet_id TEXT,
                        processed_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
            # conn.commit() –Ω–µ –Ω—É–∂–µ–Ω, with —Å–∞–º –∫–æ–º–º–∏—Ç–∏—Ç
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

async def websocket_bybit_handler():
    """WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Bybit —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)"""
    reconnect_delay = 5
    max_reconnect_delay = 60
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
            if not await rate_limit_check('bybit_ws'):
                await asyncio.sleep(1)
                continue
            
            url = "wss://stream.bybit.com/v5/public/spot"
            async with websockets.connect(url, ping_interval=20, ping_timeout=10) as websocket:
                logger.info("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ FUEL –∏ ARC
                subscribe_msg = {
                    "op": "subscribe",
                    "args": [
                        "orderbook.1.FUELUSDT",
                        "orderbook.1.ARCUSDT"
                    ]
                }
                await websocket.send(json.dumps(subscribe_msg))
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º delay –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                reconnect_delay = 5
                
                while True:
                    try:
                        message = await asyncio.wait_for(websocket.recv(), timeout=30)
                        data = json.loads(message)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        if 'data' in data:
                            symbol = data.get('topic', '').split('.')[-1]
                            if 'FUEL' in symbol:
                                # –û–±–Ω–æ–≤–ª—è–µ–º realtime –¥–∞–Ω–Ω—ã–µ
                                if 'b' in data['data'] and data['data']['b']:
                                    price = float(data['data']['b'][0][0])
                                    realtime_data['FUEL']['price'] = price
                                    realtime_data['FUEL']['last_update'] = datetime.now()
                                    realtime_data['FUEL']['source'] = 'Bybit WS'
                            elif 'ARC' in symbol:
                                if 'b' in data['data'] and data['data']['b']:
                                    price = float(data['data']['b'][0][0])
                                    realtime_data['ARC']['price'] = price
                                    realtime_data['ARC']['last_update'] = datetime.now()
                                    realtime_data['ARC']['source'] = 'Bybit WS'
                                    
                    except asyncio.TimeoutError:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        await websocket.ping()
                    except websockets.exceptions.ConnectionClosed:
                        logger.warning("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                        break
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        break
                        
        except Exception as e:
            logger.error(f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {e}")
            await asyncio.sleep(reconnect_delay)
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º delay —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            reconnect_delay = min(reconnect_delay * 2, max_reconnect_delay)

async def save_realtime_data(symbol: str, data: Dict[str, Any], source: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ real-time –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            with conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO realtime_data (symbol, price, volume_24h, price_change_24h, source)
                    VALUES (?, ?, ?, ?, ?)
                ''', (symbol, data['price'], data['volume_24h'], data['price_change_24h'], source))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è real-time –¥–∞–Ω–Ω—ã—Ö: {e}")

async def check_realtime_alerts(symbol: str, data: Dict[str, Any]):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã
        price_change = abs(data['price_change_24h'])
        if price_change > config.monitoring_config['price_change_threshold']:
            alert_message = f"üö® –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {symbol}: {price_change:.2f}% –∑–∞ 24—á"
            send_alert('WARNING', alert_message, symbol)
            alert_queue.append({
                'level': 'WARNING',
                'message': alert_message,
                'symbol': symbol,
                'timestamp': datetime.now()
            })
        

            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ real-time –∞–ª–µ—Ä—Ç–æ–≤: {e}")

def calculate_technical_indicators(symbol: str, price_history: List[float]) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        if len(price_history) < 26:
            return {}
        
        current_price = price_history[-1]
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è (SMA)
        sma_20 = sum(price_history[-20:]) / 20
        sma_10 = sum(price_history[-10:]) / 10
        sma_50 = sum(price_history[-50:]) / 50 if len(price_history) >= 50 else sma_20
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è (EMA)
        ema_12 = calculate_ema(price_history, 12)
        ema_26 = calculate_ema(price_history, 26)
        
        # RSI
        rsi = calculate_rsi(price_history, 14)
        
        # MACD
        macd_data = calculate_macd(price_history) if len(price_history) >= 26 else None
        
        # Bollinger Bands
        bb_data = calculate_bollinger_bands(price_history, 20, 2)
        
        # Stochastic Oscillator
        stoch_data = calculate_stochastic(price_history, 14)
        
        # Williams %R
        williams_r = calculate_williams_r(price_history, 14)
        
        # –°–∏–≥–Ω–∞–ª—ã
        signals = {}
        
        # SMA —Å–∏–≥–Ω–∞–ª—ã
        if current_price > sma_20:
            signals['sma_20_signal'] = 'BUY'
        else:
            signals['sma_20_signal'] = 'SELL'
            
        if current_price > sma_50:
            signals['sma_50_signal'] = 'BUY'
        else:
            signals['sma_50_signal'] = 'SELL'
        
        # RSI —Å–∏–≥–Ω–∞–ª—ã
        if rsi > 70:
            signals['rsi_signal'] = 'SELL'
        elif rsi < 30:
            signals['rsi_signal'] = 'BUY'
        else:
            signals['rsi_signal'] = 'NEUTRAL'
        
        # MACD —Å–∏–≥–Ω–∞–ª—ã
        if macd_data:
            if macd_data['histogram'] > 0:
                signals['macd_signal'] = 'BUY'
            else:
                signals['macd_signal'] = 'SELL'
        
        # Bollinger Bands —Å–∏–≥–Ω–∞–ª—ã
        if bb_data:
            if current_price <= bb_data['lower']:
                signals['bb_signal'] = 'BUY'
            elif current_price >= bb_data['upper']:
                signals['bb_signal'] = 'SELL'
            else:
                signals['bb_signal'] = 'NEUTRAL'
        
        # Stochastic —Å–∏–≥–Ω–∞–ª—ã
        if stoch_data:
            if stoch_data['k'] > 80:
                signals['stoch_signal'] = 'SELL'
            elif stoch_data['k'] < 20:
                signals['stoch_signal'] = 'BUY'
            else:
                signals['stoch_signal'] = 'NEUTRAL'
        
        # Williams %R —Å–∏–≥–Ω–∞–ª—ã
        if williams_r is not None:
            if williams_r > -20:
                signals['williams_signal'] = 'SELL'
            elif williams_r < -80:
                signals['williams_signal'] = 'BUY'
            else:
                signals['williams_signal'] = 'NEUTRAL'
        
        return {
            'sma_20': sma_20,
            'sma_10': sma_10,
            'sma_50': sma_50,
            'ema_12': ema_12,
            'ema_26': ema_26,
            'rsi': rsi,
            'macd': macd_data,
            'bollinger_bands': bb_data,
            'stochastic': stoch_data,
            'williams_r': williams_r,
            'signals': signals
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return {}

def calculate_ema(prices: List[float], period: int) -> float:
    """–†–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π"""
    try:
        if len(prices) < period:
            return prices[-1] if prices else 0
            
        multiplier = 2 / (period + 1)
        ema = prices[0]
        
        for price in prices[1:]:
            ema = (price * multiplier) + (ema * (1 - multiplier))
            
        return round(ema, 6)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA: {e}")
        return prices[-1] if prices else 0

def calculate_macd(prices: List[float], fast: int = 12, slow: int = 26, signal: int = 9) -> Dict[str, float]:
    """–†–∞—Å—á–µ—Ç MACD"""
    try:
        if len(prices) < slow:
            return None
            
        ema_fast = calculate_ema(prices, fast)
        ema_slow = calculate_ema(prices, slow)
        
        macd_line = ema_fast - ema_slow
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç signal line
        signal_line = macd_line * 0.8
        histogram = macd_line - signal_line
        
        return {
            'macd': round(macd_line, 6),
            'signal_line': round(signal_line, 6),
            'histogram': round(histogram, 6)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MACD: {e}")
        return None

def calculate_bollinger_bands(prices: List[float], period: int = 20, std_dev: float = 2) -> Dict[str, float]:
    """–†–∞—Å—á–µ—Ç –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"""
    try:
        if len(prices) < period:
            return None
            
        sma = sum(prices[-period:]) / period
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        variance = sum((price - sma) ** 2 for price in prices[-period:]) / period
        std = variance ** 0.5
        
        upper = sma + (std_dev * std)
        lower = sma - (std_dev * std)
        
        return {
            'upper': round(upper, 6),
            'middle': round(sma, 6),
            'lower': round(lower, 6)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Bollinger Bands: {e}")
        return None

def calculate_stochastic(prices: List[float], period: int = 14) -> Dict[str, float]:
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞"""
    try:
        if len(prices) < period:
            return None
            
        recent_prices = prices[-period:]
        highest_high = max(recent_prices)
        lowest_low = min(recent_prices)
        current_price = prices[-1]
        
        if highest_high == lowest_low:
            k_percent = 50
        else:
            k_percent = ((current_price - lowest_low) / (highest_high - lowest_low)) * 100
            
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç %D (—Å—Ä–µ–¥–Ω–µ–µ %K)
        d_percent = k_percent * 0.8
        
        return {
            'k': round(k_percent, 2),
            'd': round(d_percent, 2)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Stochastic: {e}")
        return None

def calculate_williams_r(prices: List[float], period: int = 14) -> float:
    """–†–∞—Å—á–µ—Ç Williams %R"""
    try:
        if len(prices) < period:
            return None
            
        recent_prices = prices[-period:]
        highest_high = max(recent_prices)
        lowest_low = min(recent_prices)
        current_price = prices[-1]
        
        if highest_high == lowest_low:
            return -50
            
        williams_r = ((highest_high - current_price) / (highest_high - lowest_low)) * -100
        
        return round(williams_r, 2)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Williams %R: {e}")
        return None

async def save_technical_indicators(symbol: str, indicators: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            with conn:
                cursor = conn.cursor()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                basic_indicators = ['sma_20', 'sma_10', 'sma_50', 'ema_12', 'ema_26', 'rsi', 'williams_r']
                for indicator_name in basic_indicators:
                    if indicator_name in indicators and indicators[indicator_name] is not None:
                        signal = indicators.get('signals', {}).get(f"{indicator_name}_signal", "NEUTRAL")
                        cursor.execute('''
                            INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                            VALUES (?, ?, ?, ?)
                        ''', (symbol, indicator_name, indicators[indicator_name], signal))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º MACD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                if indicators.get('macd'):
                    macd_data = indicators['macd']
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'MACD', macd_data['macd'], indicators.get('signals', {}).get('macd_signal', 'NEUTRAL')))
                    
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'MACD_SIGNAL', macd_data['signal_line'], indicators.get('signals', {}).get('macd_signal', 'NEUTRAL')))
                    
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'MACD_HISTOGRAM', macd_data['histogram'], indicators.get('signals', {}).get('macd_signal', 'NEUTRAL')))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º Bollinger Bands
                if indicators.get('bollinger_bands'):
                    bb_data = indicators['bollinger_bands']
                    bb_signal = indicators.get('signals', {}).get('bb_signal', 'NEUTRAL')
                    
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'BB_UPPER', bb_data['upper'], bb_signal))
                    
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'BB_MIDDLE', bb_data['middle'], bb_signal))
                    
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'BB_LOWER', bb_data['lower'], bb_signal))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º Stochastic
                if indicators.get('stochastic'):
                    stoch_data = indicators['stochastic']
                    stoch_signal = indicators.get('signals', {}).get('stoch_signal', 'NEUTRAL')
                    
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'STOCH_K', stoch_data['k'], stoch_signal))
                    
                    cursor.execute('''
                        INSERT INTO technical_indicators (symbol, indicator_name, value, signal)
                        VALUES (?, ?, ?, ?)
                    ''', (symbol, 'STOCH_D', stoch_data['d'], stoch_signal))
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")

@handle_errors("check_onchain")
async def check_onchain(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ on-chain –¥–∞–Ω–Ω—ã—Ö (Etherscan, Solana RPC)
    –í—Å–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ error_handler
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ on-chain –¥–∞–Ω–Ω—ã—Ö...")
    results = {}
    
    for symbol, token in TOKENS.items():
        try:
            if token['chain'] == 'ethereum':
                data = await check_ethereum_onchain(session, token)
            elif token['chain'] == 'solana':
                data = await check_solana_onchain(session, token)
            elif token['chain'] == 'multi':
                # –î–ª—è –º—É–ª—å—Ç–∏—á–µ–π–Ω —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ç–∏
                multi_data = {}
                contracts = token.get('contracts', {})
                
                if 'ethereum' in contracts:
                    eth_token = {**token, 'contract': contracts['ethereum']}
                    eth_data = await check_ethereum_onchain(session, eth_token)
                    multi_data['ethereum'] = eth_data
                
                if 'solana' in contracts:
                    sol_token = {**token, 'contract': contracts['solana']}
                    sol_data = await check_solana_onchain(session, sol_token)
                    multi_data['solana'] = sol_data
                
                # –î–ª—è Base –∏—Å–ø–æ–ª—å–∑—É–µ–º Ethereum API (Base —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Ethereum)
                if 'base' in contracts:
                    base_token = {**token, 'contract': contracts['base']}
                    base_data = await check_ethereum_onchain(session, base_token)
                    multi_data['base'] = base_data
                
                data = multi_data
            else:
                continue
                
            results[symbol] = data
            logger.info(f"On-chain –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {data}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ on-chain –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            results[symbol] = {'error': str(e)}
    
    logger.info("On-chain –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    return results

async def check_ethereum_onchain(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Ethereum on-chain –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.debug(f"–ó–∞–ø—Ä–æ—Å Etherscan API –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token['symbol']}")
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Etherscan API
        etherscan_api_key = os.getenv('ETHERSCAN_API_KEY')
        if not etherscan_api_key or etherscan_api_key == 'your_etherscan_api_key_here':
            logger.warning(f"Etherscan API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {token['symbol']}")
            return {'error': 'Etherscan API key not configured'}
        
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': token['contract'],
            'startblock': 0,
            'endblock': 99999999,
            'sort': 'desc',
            'apikey': etherscan_api_key
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è Etherscan
        if not await rate_limit_check('etherscan'):
            logger.warning(f"Rate limit –¥–ª—è Etherscan API, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {token['symbol']}")
            return {'error': 'Rate limit exceeded'}
        
        async with session.get('https://api.etherscan.io/api', params=params) as response:
            if response.status == 200:
                data = await response.json()
                logger.debug(f"Etherscan –æ—Ç–≤–µ—Ç –¥–ª—è {token['symbol']}: {data}")
                if data['status'] == '1':
                    transactions = data['result'][:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {token['symbol']}")
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    large_transfers = []
                    for tx in transactions:
                        if tx['value'] and int(tx['value']) > 0:
                            value_eth = int(tx['value']) / (10 ** token['decimals'])
                            if value_eth > 1000:  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ–ª—å—à–µ 1000 —Ç–æ–∫–µ–Ω–æ–≤
                                large_transfers.append({
                                    'hash': tx['hash'],
                                    'value': value_eth,
                                    'from': tx['from'],
                                    'to': tx['to'],
                                    'timestamp': int(tx['timeStamp'])
                                })
                    
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(large_transfers)} –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {token['symbol']}")
                    return {
                        'large_transfers': large_transfers,
                        'total_transactions': len(transactions),
                        'last_activity': int(transactions[0]['timeStamp']) if transactions else 0
                    }
                else:
                    error_msg = data.get('message', 'Unknown error')
                    if 'NOTOK' in error_msg:
                        logger.warning(f"Etherscan API –æ—à–∏–±–∫–∞: {error_msg} - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º")
                        
                        # Fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                        try:
                            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Covalent API
                            covalent_api_key = os.getenv('COVALENT_API_KEY')
                            if covalent_api_key:
                                covalent_url = f"https://api.covalenthq.com/v1/1/address/{token['contract']}/transactions_v3/"
                                headers = {'Authorization': f'Bearer {covalent_api_key}'}
                                
                                async with session.get(covalent_url, headers=headers, timeout=10) as cov_response:
                                    if cov_response.status == 200:
                                        cov_data = await cov_response.json()
                                        if cov_data.get('data', {}).get('items'):
                                            transactions = cov_data['data']['items'][:10]
                                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Covalent API –¥–ª—è {token['symbol']}")
                                            
                                            large_transfers = []
                                            for tx in transactions:
                                                if tx.get('value_quote', 0) > 1000:  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ–ª—å—à–µ $1000
                                                    large_transfers.append({
                                                        'hash': tx['tx_hash'],
                                                        'value': tx['value_quote'],
                                                        'from': tx['from_address'],
                                                        'to': tx['to_address'],
                                                        'timestamp': tx['block_signed_at']
                                                    })
                                            
                                            return {
                                                'large_transfers': large_transfers,
                                                'total_transactions': len(transactions),
                                                'last_activity': int(time.time()),
                                                'source': 'covalent'
                                            }
                        except Exception as cov_error:
                            logger.debug(f"Covalent fallback –æ—à–∏–±–∫–∞: {cov_error}")
                    else:
                        logger.warning(f"Etherscan API –æ—à–∏–±–∫–∞: {error_msg}")
            else:
                logger.warning(f"Etherscan HTTP –æ—à–∏–±–∫–∞: {response.status}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Ethereum on-chain –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    return {'error': 'Failed to fetch data'}

async def check_solana_onchain(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ on-chain –¥–∞–Ω–Ω—ã—Ö Solana —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit"""
    try:
        symbol = token['symbol']
        address = token.get('contract') or token.get('address')
        
        if not address:
            logger.error(f"–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol}")
            return {'error': 'Address not found'}
        
        # –°–ø–∏—Å–æ–∫ RPC endpoints —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        rpc_urls = [
            "https://api.mainnet-beta.solana.com",
            "https://solana.public-rpc.com",
            "https://rpc.ankr.com/solana",
            "https://solana-api.projectserum.com",
            "https://solana.getblock.io/mainnet/",
            "https://solana.rpc.extrnode.com",
            "https://solana.rpcpool.com",
            "https://mainnet.rpcpool.com",
            "https://solana.public-rpc.com",
            "https://api.mainnet-beta.solana.com",
            "https://solana-api.projectserum.com",
            "https://solana.rpc.extrnode.com",
            "https://solana.rpcpool.com",
            "https://mainnet.rpcpool.com",
            "https://solana.public-rpc.com",
            "https://api.mainnet-beta.solana.com",
            "https://solana-api.projectserum.com",
            "https://solana.rpc.extrnode.com",
            "https://solana.rpcpool.com",
            "https://mainnet.rpcpool.com",
            "https://solana.rpc.extrnode.com",
            "https://solana.rpcpool.com",
            "https://mainnet.rpcpool.com",
            "https://solana.public-rpc.com",
            "https://api.mainnet-beta.solana.com",
            "https://solana-api.projectserum.com"
        ]
        
        async def fetch_solana_data(rpc_url: str):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ RPC endpoint"""
            payload = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "getTokenSupply",
                "params": [address]
            }
            
            headers = {
                'Content-Type': 'application/json',
                'User-Agent': 'CryptoMonitor/1.0'
            }
            
            try:
                async with session.post(rpc_url, json=payload, headers=headers, timeout=15) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if data and 'result' in data:
                            return data
                        else:
                            raise Exception("Invalid response format")
                    elif resp.status == 429:
                        raise Exception("Rate limited")
                    elif resp.status == 503:
                        raise Exception("Service unavailable")
                    else:
                        raise Exception(f"HTTP {resp.status}")
            except asyncio.TimeoutError:
                raise Exception("Timeout")
            except Exception as e:
                raise Exception(f"Request failed: {str(e)}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ RPC endpoints
        for i, rpc_url in enumerate(rpc_urls):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
                if not await rate_limit_check(f'solana_rpc_{i}'):
                    logger.debug(f"Rate limit –¥–ª—è Solana RPC {i}, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π")
                    continue
                
                logger.debug(f"–ü—Ä–æ–±—É–µ–º Solana RPC {i}: {rpc_url}")
                data = await retry_request(fetch_solana_data, rpc_url, max_retries=2)
                
                if data and 'result' in data and 'value' in data['result']:
                    supply_info = data['result']['value']
                    try:
                        result = {
                            'total_supply': float(supply_info['amount']) / (10 ** supply_info['decimals']),
                            'decimals': supply_info['decimals'],
                            'ui_amount': float(supply_info['uiAmount']),
                            'rpc_endpoint': rpc_url
                        }
                        
                        logger.info(f"Solana –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: supply={result['total_supply']:,.0f}")
                        return result
                    except (ValueError, KeyError, TypeError) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç RPC {i}: {e}")
                        continue
                else:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç RPC {i}")
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ RPC {i} ({rpc_url}): {e}")
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                await asyncio.sleep(1.0)
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        logger.warning(f"–í—Å–µ Solana RPC endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {symbol}")
        return {'error': 'All RPC endpoints failed'}
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Solana on-chain –¥–ª—è {token['symbol']}: {e}")
        return {'error': str(e)}

@handle_errors("check_cex")
async def check_cex(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö CEX (Binance, Bybit, OKX, HTX, Gate)
    –í—Å–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ error_handler
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö CEX...")
    results = {}
    
    for symbol, token in TOKENS.items():
        try:
            cex_data = {}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit (–¥–ª—è FUEL –∏ VIRTUAL)
            if symbol in ['FUEL', 'VIRTUAL']:
                bybit_data = await check_bybit_price(session, symbol)
                cex_data['bybit'] = bybit_data
            else:
                cex_data['bybit'] = {'error': 'Not traded on Bybit'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ OKX (–¥–ª—è ARC –∏ VIRTUAL)
            if symbol in ['ARC', 'VIRTUAL']:
                okx_data = await check_okx_price(session, symbol)
                cex_data['okx'] = okx_data
            else:
                cex_data['okx'] = {'error': 'Not traded on OKX'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTX (–¥–ª—è ARC –∏ VIRTUAL)
            if symbol in ['ARC', 'VIRTUAL']:
                htx_data = await check_htx_price(session, symbol)
                cex_data['htx'] = htx_data
            else:
                cex_data['htx'] = {'error': 'Not traded on HTX'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Gate.io (–¥–ª—è FUEL, VIRTUAL –∏ BID)
            if symbol in ['FUEL', 'VIRTUAL', 'BID']:
                gate_data = await check_gate_price(session, symbol)
                cex_data['gate'] = gate_data
            else:
                cex_data['gate'] = {'error': 'Not traded on Gate.io'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MEXC (–¥–ª—è BID)
            if symbol == 'BID':
                mexc_data = await check_mexc_price(session, symbol)
                cex_data['mexc'] = mexc_data
            else:
                cex_data['mexc'] = {'error': 'Not traded on MEXC'}
            
            results[symbol] = cex_data
            
            logger.info(f"CEX –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {results[symbol]}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CEX –¥–ª—è {symbol}: {e}")
            results[symbol] = {'error': str(e)}
    
    logger.info("CEX –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    return results

async def check_bybit_price(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Bybit"""
    try:
        logger.debug(f"–ó–∞–ø—Ä–æ—Å Bybit API –¥–ª—è {symbol}")
        url = f"{config.api_config['bybit']['base_url']}/v5/market/tickers"
        params = {'category': 'spot', 'symbol': f'{symbol}USDT'}
        
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                logger.debug(f"Bybit –æ—Ç–≤–µ—Ç –¥–ª—è {symbol}: {data}")
                if data['retCode'] == 0 and data['result']['list']:
                    ticker = data['result']['list'][0]
                    return {
                        'price': float(ticker['lastPrice']),
                        'volume_24h': float(ticker['volume24h']),
                        'price_change_24h': float(ticker['price24hPcnt']) * 100
                    }
            else:
                logger.warning(f"Bybit API HTTP –æ—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Bybit API: {e}")
    
    return {'error': 'Failed to fetch data'}

async def check_okx_price(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å OKX"""
    try:
        url = f"{config.api_config['okx']['base_url']}/market/ticker"
        params = {'instId': f'{symbol}-USDT'}
        
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data['code'] == '0' and data['data']:
                    ticker = data['data'][0]
                    return {
                        'price': float(ticker['last']),
                        'volume_24h': float(ticker['vol24h']),
                        'price_change_24h': float(ticker['change24h']) * 100,
                        'high_24h': float(ticker['high24h']),
                        'low_24h': float(ticker['low24h'])
                    }
            return {'error': f'HTTP {response.status}'}
    except Exception as e:
        return {'error': str(e)}

async def check_htx_price(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å HTX (Huobi)"""
    try:
        url = f"{config.api_config['htx']['base_url']}/market/detail/merged"
        params = {'symbol': f'{symbol.lower()}usdt'}
        
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data['status'] == 'ok':
                    tick = data['tick']
                    return {
                        'price': float(tick['close']),
                        'volume_24h': float(tick['vol']),
                        'price_change_24h': ((float(tick['close']) - float(tick['open'])) / float(tick['open'])) * 100,
                        'high_24h': float(tick['high']),
                        'low_24h': float(tick['low'])
                    }
            return {'error': f'HTTP {response.status}'}
    except Exception as e:
        return {'error': str(e)}

async def check_gate_price(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Gate.io"""
    try:
        url = f"{config.api_config['gate']['base_url']}/spot/tickers"
        params = {'currency_pair': f'{symbol}_USDT'}
        
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data:
                    ticker = data[0]
                    return {
                        'price': float(ticker['last']),
                        'volume_24h': float(ticker['quote_volume']),
                        'price_change_24h': float(ticker['change_percentage']),
                        'high_24h': float(ticker['high_24h']),
                        'low_24h': float(ticker['low_24h'])
                    }
            return {'error': f'HTTP {response.status}'}
    except Exception as e:
        return {'error': str(e)}

async def check_mexc_price(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å MEXC"""
    try:
        url = f"https://www.mexc.com/api/platform/spot/market/ticker"
        params = {'symbol': f'{symbol}_USDT'}
        
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data.get('code') == 200 and data.get('data'):
                    ticker = data['data']
                    return {
                        'price': float(ticker['last']),
                        'volume_24h': float(ticker['volume']),
                        'price_change_24h': float(ticker['changeRate']) * 100,
                        'high_24h': float(ticker['high']),
                        'low_24h': float(ticker['low'])
                    }
            return {'error': f'HTTP {response.status}'}
    except Exception as e:
        return {'error': str(e)}

# –ö—ç—à –¥–ª—è DEX –¥–∞–Ω–Ω—ã—Ö
DEX_CACHE = {}
DEX_CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

@handle_errors("check_dex")
async def check_dex(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö DEX (DefiLlama, Dexscreener, GeckoTerminal)
    –í—Å–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ error_handler
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö DEX...")
    results = {}
    current_time = time.time()
    
    for symbol, token in TOKENS.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"dex_{symbol}"
            if cache_key in DEX_CACHE:
                cache_entry = DEX_CACHE[cache_key]
                if current_time - cache_entry['timestamp'] < DEX_CACHE_TTL:
                    logger.info(f"DEX –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∏–∑ –∫—ç—à–∞")
                    results[symbol] = cache_entry['data']
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DexScreener
            dexscreener_data = await check_dexscreener(session, token)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DefiLlama TVL
            defillama_data = await check_defillama_tvl(session, token)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Aerodrome (—Ç–æ–ª—å–∫–æ –¥–ª—è BID)
            aerodrome_data = None
            if symbol == 'BID':
                aerodrome_data = await check_aerodrome(session, token)
            
            dex_result = {
                'dexscreener': dexscreener_data,
                'defillama': defillama_data
            }
            
            if aerodrome_data:
                dex_result['aerodrome'] = aerodrome_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            DEX_CACHE[cache_key] = {
                'timestamp': current_time,
                'data': dex_result
            }
            
            results[symbol] = dex_result
            logger.info(f"DEX –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {results[symbol]}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX –¥–ª—è {symbol}: {e}")
            results[symbol] = {'error': str(e)}
    
    logger.info("DEX –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    return results

async def check_dexscreener(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å DexScreener"""
    try:
        symbol = token['symbol']
        logger.debug(f"–ó–∞–ø—Ä–æ—Å DexScreener –¥–ª—è {symbol}")
        
        # –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        search_url = f"https://api.dexscreener.com/latest/dex/search?q={symbol}"
        async with session.get(search_url) as response:
            if response.status == 200:
                data = await response.json()
                logger.debug(f"DexScreener –ø–æ–∏—Å–∫ –¥–ª—è {symbol}: {data}")
                
                if not data.get('pairs'):
                    logger.warning(f"DexScreener: –Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è {symbol}")
                    return {'error': 'No trading pairs found'}
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—É —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º
                best_pair = max(data['pairs'], key=lambda x: float(x.get('volume', {}).get('h24', 0)))
                logger.debug(f"–õ—É—á—à–∞—è –ø–∞—Ä–∞ –¥–ª—è {symbol}: {best_pair}")
                
                return {
                    'price': float(best_pair['priceUsd']),
                    'volume_24h': float(best_pair['volume']['h24']),
                    'price_change_24h': float(best_pair['priceChange']['h24']),
                    'liquidity_usd': float(best_pair['liquidity']['usd'])
                }
            else:
                logger.warning(f"DexScreener HTTP –æ—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ DexScreener: {e}")
    
    return {'error': 'Failed to fetch data'}

async def check_defillama_tvl(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ TVL —Å DefiLlama"""
    try:
        if not await rate_limit_check('defillama'):
            logger.warning("Rate limit –¥–ª—è DefiLlama, –ø—Ä–æ–ø—É—Å–∫")
            return {'error': 'Rate limited'}
        
        symbol = token['symbol']
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª
        protocols_url = "https://api.llama.fi/protocols"
        
        async def fetch_protocols():
            async with session.get(protocols_url, timeout=10) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    raise Exception(f"HTTP {resp.status}")
        
        protocols = await retry_request(fetch_protocols)
        
        # –ò—â–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —Å–∏–º–≤–æ–ª—É
        protocol = None
        for p in protocols:
            if symbol.lower() in p.get('symbol', '').lower() or symbol.lower() in p.get('name', '').lower():
                protocol = p
                break
        
        if not protocol:
            logger.info(f"DefiLlama: –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
            return {'error': 'Protocol not found'}
        
        # –ü–æ–ª—É—á–∞–µ–º TVL
        tvl_url = f"https://api.llama.fi/protocol/{protocol['slug']}"
        
        async def fetch_tvl():
            async with session.get(tvl_url, timeout=10) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    raise Exception(f"HTTP {resp.status}")
        
        tvl_data = await retry_request(fetch_tvl)
        
        if 'tvl' in tvl_data:
            return {
                'tvl': tvl_data['tvl'],
                'protocol_name': protocol['name'],
                'protocol_slug': protocol['slug']
            }
        else:
            return {'error': 'No TVL data'}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ DefiLlama –¥–ª—è {token['symbol']}: {e}")
        return {'error': 'Failed to fetch data'}

@handle_errors("check_social")
async def check_social(session: aiohttp.ClientSession = None):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Twitter, Telegram, Discord)
    –í—Å–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ error_handler
    """
    logger.info("[SOCIAL] Start social monitoring...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        telegram_api_id = os.getenv('TELEGRAM_API_ID')
        telegram_api_hash = os.getenv('TELEGRAM_API_HASH')
        telegram_phone = os.getenv('TELEGRAM_PHONE')
        discord_bot_token = os.getenv('DISCORD_BOT_TOKEN')
        
        has_telegram_api = (telegram_api_id and telegram_api_hash and telegram_phone and 
                           telegram_api_id != 'your_telegram_api_id_here')
        has_discord_token = (discord_bot_token and discord_bot_token != 'your_discord_bot_token_here')
        
        tasks = []
        
        # Twitter
        tasks.append(check_twitter(session))
        
        # Telegram (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏)
        if has_telegram_api:
            tasks.append(check_telegram())
        else:
            logger.info("[SOCIAL] Telegram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # Discord (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
        if has_discord_token:
            tasks.append(check_discord())
        else:
            logger.info("[SOCIAL] Discord —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # GitHub (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
        tasks.append(check_github())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        else:
            logger.info("[SOCIAL] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
    except Exception as e:
        logger.error(f"[SOCIAL] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    logger.info("Social –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

def translate_text(text: str, dest: str = 'en') -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é googletrans"""
    try:
        translator = Translator()
        result = translator.translate(text, dest=dest)
        return result.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

async def check_twitter(session: aiohttp.ClientSession = None):
    """–†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitter —á–µ—Ä–µ–∑ Twint - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Twint...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å twint
        try:
            import twint
            logger.info("‚úÖ Twint –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.error("‚ùå Twint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        twitter_accounts = config.social_config.get('twitter_accounts', [])
        if not twitter_accounts:
            logger.warning("‚ö†Ô∏è Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(twitter_accounts)} Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        for account in twitter_accounts:
            try:
                username = account.replace('@', '')
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç: @{username}")
                
                # Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω (–±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API)
                logger.info(f"üì° Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è @{username}")
                continue
                
            except Exception as e:
                log_error(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ {account}", e, {"account": account})
        
        logger.info("‚úÖ Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        log_error("Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", e)
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")

async def get_twitter_tweets_snscrape(username: str) -> List:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ snscrape - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ twint"""
    try:
        import snscrape.modules.twitter as sntwitter
        import asyncio
        from datetime import datetime, timedelta
        
        tweets_list = []
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = f"from:{username}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–≤–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º snscrape –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–≤–∏—Ç–æ–≤
            scraper = sntwitter.TwitterSearchScraper(query)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–≤–∏—Ç–æ–≤
            for i, tweet in enumerate(scraper.get_items()):
                if i >= 10:  # –õ–∏–º–∏—Ç —Ç–≤–∏—Ç–æ–≤
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–≤–∏—Ç –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                tweet_date = tweet.date
                if tweet_date < datetime.now(tweet_date.tzinfo) - timedelta(hours=24):
                    break
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–≤–∏—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                tweet_obj = type('Tweet', (), {
                    'id': tweet.id,
                    'username': username,
                    'tweet': tweet.rawContent,
                    'date': tweet_date,
                    'likes': tweet.likeCount,
                    'retweets': tweet.retweetCount,
                    'replies': tweet.replyCount,
                    'url': tweet.url
                })()
                
                tweets_list.append(tweet_obj)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tweets_list)} —Ç–≤–∏—Ç–æ–≤ –¥–ª—è @{username} —á–µ—Ä–µ–∑ snscrape")
            return tweets_list
            
        except Exception as scrape_error:
            logger.error(f"‚ùå Snscrape –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {scrape_error}")
            return []
            
    except Exception as e:
        log_error(f"Snscrape –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ –¥–ª—è @{username}", e, {"username": username})
        return []

async def analyze_tweet_relevance(tweet_text: str, username: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–≤–∏—Ç–∞"""
    try:
        text_lower = tweet_text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        token_keywords = {
            'FUEL': ['fuel', 'fuel network', 'fuelvm', 'sway'],
            'ARC': ['arc', 'arcdotfun', 'arc protocol'],
            'BID': ['bid', 'creatorbid', 'creator bid'],
            'MANTA': ['manta', 'manta network', 'manta protocol'],
            'ANON': ['anon', 'hey anon', 'anonymous'],
            'URO': ['uro', 'urolithin', 'pumpdot'],
            'XION': ['xion', 'burnt', 'burnt labs'],
            'AI16Z': ['ai16z', 'eliza', 'elizaos'],
            'SAHARA': ['sahara', 'sahara labs', 'sahara ai'],
            'VIRTUAL': ['virtual', 'virtuals', 'virtuals.io']
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        alert_keywords = {
            'CRITICAL': ['launch', 'mainnet', 'airdrop', 'token', 'listing', 'partnership', 'announcement'],
            'HIGH': ['update', 'release', 'upgrade', 'migration', 'staking', 'governance'],
            'MEDIUM': ['development', 'progress', 'milestone', 'community', 'ecosystem'],
            'LOW': ['news', 'info', 'reminder', 'community']
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
        relevant_token = None
        for token, keywords in token_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                relevant_token = token
                break
        
        if not relevant_token:
            return {'is_relevant': False}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞
        alert_level = 'LOW'
        for level, keywords in alert_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                alert_level = level
                break
        
        return {
            'is_relevant': True,
            'token_symbol': relevant_token,
            'alert_level': alert_level,
            'keywords_found': [k for k in token_keywords[relevant_token] if k in text_lower]
        }
        
    except Exception as e:
        log_error("–ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–≤–∏—Ç–∞", e, {"tweet_text": tweet_text[:100]})
        return {'is_relevant': False}

async def analyze_tweet_with_ai(tweet_text: str, token_symbol: str) -> Dict[str, Any]:
    """AI –∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–∞"""
    try:
        if not OPENAI_API_KEY:
            return {'ai_analysis': 'OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–≤–∏—Ç –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ {token_symbol}:
        
        –¢–µ–∫—Å—Ç: {tweet_text}
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "sentiment": "positive/negative/neutral",
            "importance": "high/medium/low",
            "impact_on_price": "bullish/bearish/neutral",
            "key_points": ["–ø—É–Ω–∫—Ç1", "–ø—É–Ω–∫—Ç2"],
            "recommendation": "–∫—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
        }}
        """
        
        analysis = await analyze_with_chatgpt(prompt, "tweet_analysis")
        
        if analysis and 'choices' in analysis:
            try:
                import json
                content = analysis['choices'][0]['message']['content']
                return json.loads(content)
            except:
                return {'ai_analysis': content}
        
        return {'ai_analysis': '–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞'}
        
    except Exception as e:
        log_error("AI –∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–∞", e, {"token_symbol": token_symbol})
        return {'ai_analysis': '–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞'}

async def send_twitter_alert_to_telegram(tweet_text: str, username: str, token_symbol: str, 
                                       alert_level: str, link: str, ai_analysis: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ Twitter –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üö® **{alert_level} ALERT: {token_symbol}**

**–¢–≤–∏—Ç –æ—Ç @{username}:**
{tweet_text}

**AI –ê–Ω–∞–ª–∏–∑:**
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {ai_analysis.get('sentiment', 'N/A')}
‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å: {ai_analysis.get('importance', 'N/A')}
‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: {ai_analysis.get('impact_on_price', 'N/A')}
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {', '.join(ai_analysis.get('key_points', []))}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {ai_analysis.get('recommendation', 'N/A')}

üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–∏—Ç]({link})
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await send_alert(alert_level, message, token_symbol, {
            'source': 'Twitter',
            'username': username,
            'link': link,
            'ai_analysis': ai_analysis
        })
        
        logger.info(f"‚úÖ Twitter –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è {token_symbol}")
        
    except Exception as e:
        log_error("–û—Ç–ø—Ä–∞–≤–∫–∞ Twitter –∞–ª–µ—Ä—Ç–∞ –≤ Telegram", e, {
            'username': username,
            'token_symbol': token_symbol
        })

def was_tweet_processed(tweet_hash: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ç–≤–∏—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT 1 FROM processed_tweets WHERE tweet_hash = ?
            ''', (tweet_hash,))
            return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞: {e}")
        return False

def mark_tweet_as_processed(tweet_hash: str):
    """–û—Ç–º–µ—á–∞–µ—Ç —Ç–≤–∏—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO processed_tweets (tweet_hash, processed_at)
                VALUES (?, CURRENT_TIMESTAMP)
            ''', (tweet_hash,))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ç–≤–∏—Ç–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
        
        logger.info("‚úÖ Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
    except Exception as e:
        log_error("Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", e)

# –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è check_twitter_fallback - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã

async def check_telegram():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–µ—Ä–µ–∑ Telethon"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        api_id = os.getenv('TELEGRAM_API_ID')
        api_hash = os.getenv('TELEGRAM_API_HASH')
        phone = os.getenv('TELEGRAM_PHONE')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API ID
        if not api_id or api_id == 'your_telegram_api_id':
            logger.warning("TELEGRAM_API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return
            
        try:
            api_id_int = int(api_id)
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TELEGRAM_API_ID: {api_id}. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        if not all([api_id, api_hash, phone]) or api_hash == 'your_telegram_api_hash' or phone == 'your_phone_number':
            logger.warning("Telegram —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client = TelegramClient('crypto_monitor_session', api_id_int, api_hash)
        
        try:
            await client.start(phone=phone)
            logger.info("Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            channels = config.social_config.get('telegram_channels', [])
            if not channels:
                logger.info("Telegram –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
                
            for channel_id in channels:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                    channel = await client.get_entity(channel_id)
                    messages = await client.get_messages(channel, limit=50)
                    
                    for message in messages:
                        if not message.text:
                            continue
                            
                        text = message.text.lower()
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                        token_terms = [k.lower() for k in config.social_config['keywords']]
                        alert_terms = sum([config.social_config['alert_keywords'][lvl] for lvl in config.social_config['alert_keywords']], [])
                        
                        if any(term in text for term in token_terms) and any(word in text for word in alert_terms):
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞
                            level = None
                            for lvl, words in config.social_config['alert_keywords'].items():
                                if any(word in text for word in words):
                                    level = lvl
                                    break
                            if not level:
                                level = 'INFO'
                                
                            # –ü–µ—Ä–µ–≤–æ–¥
                            translated = translate_text(message.text, dest=config.social_config['translate_to'])
                            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            link = f"https://t.me/{channel.username}/{message.id}" if channel.username else ""
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
                            await send_social_alert(
                                level,
                                'Telegram',
                                message.text,
                                translated,
                                link,
                                token='FUEL' if 'fuel' in text else ('ARC' if 'arc' in text else ('BID' if 'bid' in text or 'creatorbid' in text else ('MANTA' if 'manta' in text else ('ANON' if 'anon' in text or 'hey anon' in text else '')))),
                                keywords=[w for w in token_terms if w in text] + [w for w in alert_terms if w in text]
                            )
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                    
        finally:
            await client.disconnect()
            
    except Exception as e:
        logger.error(f"[SOCIAL] Telegram monitoring error: {e}")

async def check_discord():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–∫ —Å–µ–ª—Ñ–±–æ—Ç —á–µ—Ä–µ–∑ discord.py-self"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user token –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        discord_token = config.social_config.get('discord_token')
        if not discord_token:
            logger.warning("Discord —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        try:
            import discord
        except ImportError:
            logger.error("discord.py-self –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install -U discord.py-self")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (—Å–µ–ª—Ñ–±–æ—Ç)
        intents = discord.Intents.default()
        intents.messages = True
        intents.guilds = True
        client = discord.Client(intents=intents)

        servers = config.social_config.get('discord_servers', [])
        if not servers:
            logger.info("Discord —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        done = False

        @client.event
        async def on_ready():
            nonlocal done
            logger.info(f"Discord —Å–µ–ª—Ñ–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {client.user}")
            try:
                available_servers = client.guilds
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {[s.name for s in available_servers]}")
                for server in available_servers:
                    server_name_lower = server.name.lower()
                    if any(keyword.lower() in server_name_lower for keyword in ['fuel', 'arc', 'crypto', 'blockchain']):
                        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞: {server.name}")
                        for channel in server.text_channels:
                            try:
                                messages = await channel.history(limit=20).flatten()
                                for message in messages:
                                    if not message.content:
                                        continue
                                    text = message.content.lower()
                                    token_terms = [k.lower() for k in config.social_config['keywords']]
                                    alert_terms = sum([config.social_config['alert_keywords'][lvl] for lvl in config.social_config['alert_keywords']], [])
                                    if any(term in text for term in token_terms) and any(word in text for word in alert_terms):
                                        level = None
                                        for lvl, words in config.social_config['alert_keywords'].items():
                                            if any(word in text for word in words):
                                                level = lvl
                                                break
                                        if not level:
                                            level = 'INFO'
                                        translated = translate_text(message.content, dest=config.social_config['translate_to'])
                                        link = f"https://discord.com/channels/{server.id}/{channel.id}/{message.id}"
                                        await send_social_alert(
                                            level,
                                            'Discord',
                                            message.content,
                                            translated,
                                            link,
                                            token='FUEL' if 'fuel' in text else ('ARC' if 'arc' in text else ('BID' if 'bid' in text or 'creatorbid' in text else ('MANTA' if 'manta' in text else ('ANON' if 'anon' in text or 'hey anon' in text else '')))),
                                            keywords=[w for w in token_terms if w in text] + [w for w in alert_terms if w in text]
                                        )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel.name}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Discord —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            finally:
                done = True
                await client.close()

        try:
            await client.start(discord_token, bot=False)
            timeout = 30
            start_time = time.time()
            while not done and (time.time() - start_time) < timeout:
                await asyncio.sleep(1)
            if not done:
                logger.warning("Discord –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
                await client.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Discord —Å–µ–ª—Ñ–±–æ—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"[SOCIAL] Discord monitoring error: {e}")

async def analyze_github_changes_with_ai(commit_data: Dict[str, Any], repo_info: Dict[str, str]) -> Dict[str, Any]:
    """AI –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub —Å –ø–æ–º–æ—â—å—é OpenAI"""
    try:
        if not OPENAI_API_KEY or OPENAI_API_KEY == 'your_openai_api_key_here':
            return {
                'importance': 'low',
                'summary': 'AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ—Ç API –∫–ª—é—á–∞',
                'impact': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'should_alert': False,
                'reason': 'No OpenAI API key'
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        files_info = ""
        if 'files' in commit_data and commit_data['files']:
            files_info = "\n–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"
            for file_info in commit_data['files'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                files_info += f"- {file_info['filename']} (+{file_info.get('additions', 0)}/-{file_info.get('deletions', 0)})\n"
        
        context = f"""
        –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_info['owner']}/{repo_info['repo']}
        –ö–æ–º–º–∏—Ç: {commit_data['sha'][:8]}
        –ê–≤—Ç–æ—Ä: {commit_data['commit']['author']['name']}
        –î–∞—Ç–∞: {commit_data['commit']['author']['date']}
        –°–æ–æ–±—â–µ–Ω–∏–µ: {commit_data['commit']['message']}
        
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
        - –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {len(commit_data.get('files', []))}
        - –°—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {commit_data.get('stats', {}).get('additions', 0)}
        - –°—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ: {commit_data.get('stats', {}).get('deletions', 0)}
        - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {commit_data.get('stats', {}).get('total', 0)} —Å—Ç—Ä–æ–∫{files_info}
        """
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:

        {context}

        –û—Ü–µ–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç FUEL –∏ ARC:

        –ö–†–ò–¢–ï–†–ò–ò –í–ê–ñ–ù–û–°–¢–ò:
        - CRITICAL: —Ä–µ–ª–∏–∑—ã, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫—Ä—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        - HIGH: –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        - MEDIUM: –º–µ–ª–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
        - LOW: –ø—Ä–∞–≤–∫–∏ –æ–ø–µ—á–∞—Ç–æ–∫, –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è README

        –ö–†–ò–¢–ï–†–ò–ò –í–õ–ò–Ø–ù–ò–Ø:
        - POSITIVE: –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤
        - NEGATIVE: —É–¥–∞–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        - NEUTRAL: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "importance": "critical/high/medium/low",
            "impact": "positive/negative/neutral", 
            "should_alert": true/false,
            "summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "affected_tokens": ["FUEL", "ARC"],
            "technical_details": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        }}
        """
        
        response = await analyze_with_chatgpt(prompt, "github_analysis")
        
        if response and 'choices' in response:
            analysis_text = response['choices'][0]['message']['content']
            
            try:
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                import json
                analysis = json.loads(analysis_text)
                return analysis
            except json.JSONDecodeError:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç ChatGPT: {analysis_text}")
                return {
                    'importance': 'medium',
                    'summary': '–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞',
                    'impact': 'neutral',
                    'should_alert': True,
                    'reason': 'AI analysis failed'
                }
        else:
            return {
                'importance': 'medium',
                'summary': 'AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'impact': 'neutral',
                'should_alert': True,
                'reason': 'AI analysis unavailable'
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ GitHub –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        return {
            'importance': 'medium',
            'summary': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
            'impact': 'neutral',
            'should_alert': True,
            'reason': f'Analysis error: {str(e)}'
        }

async def check_github():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ GitHub –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        github_accounts = config.social_config.get('github_accounts', [])
        if not github_accounts:
            logger.info("GitHub –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
            
        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
        cache_file = 'github_commits_cache.json'
        processed_commits = {}
        
        try:
            with open(cache_file, 'r') as f:
                processed_commits = json.load(f)
        except FileNotFoundError:
            processed_commits = {}
            
        async with aiohttp.ClientSession() as session:
            for repo_url in github_accounts:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º owner/repo –∏–∑ URL
                    if 'github.com' in repo_url:
                        parts = repo_url.split('github.com/')[-1].split('/')
                        if len(parts) >= 2:
                            owner = parts[0]
                            repo = parts[1]
                            repo_info = {'owner': owner, 'repo': repo}
                            
                            # GitHub API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                            api_url = f"https://api.github.com/repos/{owner}/{repo}/commits"
                            headers = {
                                'User-Agent': 'CryptoMonitor/1.0',
                                'Accept': 'application/vnd.github.v3+json'
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
                            github_token = os.getenv('GITHUB_TOKEN')
                            if github_token:
                                headers['Authorization'] = f'token {github_token}'
                            
                            async with session.get(api_url, headers=headers) as response:
                                if response.status == 200:
                                    commits = await response.json()
                                    
                                    if commits:
                                        latest_commit = commits[0]
                                        commit_message = latest_commit['commit']['message']
                                        commit_date = latest_commit['commit']['author']['date']
                                        
                                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ
                                        commit_sha = latest_commit['sha']
                                        commit_detail_url = f"https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}"
                                        
                                        async with session.get(commit_detail_url, headers=headers) as detail_response:
                                            if detail_response.status == 200:
                                                detailed_commit = await detail_response.json()
                                            else:
                                                detailed_commit = latest_commit
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä—ã–π –∫–æ–º–º–∏—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
                                        commit_time = datetime.fromisoformat(commit_date.replace('Z', '+00:00'))
                                        if datetime.now(commit_time.tzinfo) - commit_time < timedelta(hours=24):
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∫–æ–º–º–∏—Ç
                                            repo_key = f"{owner}/{repo}"
                                            commit_sha = latest_commit['sha']
                                            
                                            if repo_key not in processed_commits:
                                                processed_commits[repo_key] = []
                                            
                                            if commit_sha in processed_commits[repo_key]:
                                                logger.info(f"–ö–æ–º–º–∏—Ç {commit_sha[:8]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {repo_key}")
                                                continue
                                            
                                            # AI –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                                            ai_analysis = await analyze_github_changes_with_ai(detailed_commit, repo_info)
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç
                                            if ai_analysis.get('should_alert', False):
                                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
                                                importance = ai_analysis.get('importance', 'medium')
                                                level_map = {
                                                    'critical': 'CRITICAL',
                                                    'high': 'HIGH', 
                                                    'medium': 'MEDIUM',
                                                    'low': 'INFO'
                                                }
                                                level = level_map.get(importance, 'MEDIUM')
                                                
                                                # –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
                                                translated = translate_text(commit_message, dest=config.social_config['translate_to'])
                                                
                                                # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç
                                                commit_link = f"https://github.com/{owner}/{repo}/commit/{latest_commit['sha']}"
                                                
                                                # –§–æ—Ä–º–∏—Ä—É–µ–º AI-—É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                                ai_summary = ai_analysis.get('summary', '')
                                                ai_reason = ai_analysis.get('reason', '')
                                                technical_details = ai_analysis.get('technical_details', '')
                                                impact = ai_analysis.get('impact', 'neutral')
                                                
                                                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–ª–∏—è–Ω–∏—è
                                                impact_emoji = {
                                                    'positive': 'üöÄ',
                                                    'negative': '‚ö†Ô∏è',
                                                    'neutral': 'üìù'
                                                }.get(impact, 'üìù')
                                                
                                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                                alert_message = f"{impact_emoji} <b>{level} - GITHUB UPDATE</b>\n\n"
                                                alert_message += f"<b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {owner}/{repo}\n"
                                                alert_message += f"<b>–í–∞–∂–Ω–æ—Å—Ç—å:</b> {importance.upper()}\n"
                                                alert_message += f"<b>–í–ª–∏—è–Ω–∏–µ:</b> {impact.upper()}\n\n"
                                                alert_message += f"<b>AI –ê–Ω–∞–ª–∏–∑:</b>\n{ai_summary}\n\n"
                                                
                                                if technical_details:
                                                    alert_message += f"<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>\n{technical_details}\n\n"
                                                
                                                alert_message += f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>\n{ai_reason}\n\n"
                                                alert_message += f"<b>–ö–æ–º–º–∏—Ç:</b>\n{commit_message}\n\n"
                                                alert_message += f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n{translated}\n\n"
                                                alert_message += f"<b>–°—Å—ã–ª–∫–∞:</b> {commit_link}"
                                                
                                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                                                await send_github_alert(alert_message, level, commit_link, repo_info)
                                                
                                                logger.info(f"GitHub –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {importance} - {owner}/{repo}")
                                            else:
                                                logger.info(f"GitHub –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≤–∞–∂–Ω–æ): {owner}/{repo}")
                                            
                                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–∏—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                            processed_commits[repo_key].append(commit_sha)
                                            
                                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∫–æ–º–º–∏—Ç–æ–≤)
                                            if len(processed_commits[repo_key]) > 100:
                                                processed_commits[repo_key] = processed_commits[repo_key][-100:]
                                                
                                else:
                                    logger.warning(f"GitHub API error –¥–ª—è {repo_url}: {response.status}")
                                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_url}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
        try:
            with open(cache_file, 'w') as f:
                json.dump(processed_commits, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è GitHub –∫—ç—à–∞: {e}")
                    
    except Exception as e:
        logger.error(f"[SOCIAL] GitHub monitoring error: {e}")

async def send_github_alert(message: str, level: str, commit_link: str, repo_info: Dict[str, str]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ GitHub –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO social_alerts (timestamp, source, level, original_text, translated_text, link, token, keywords, important_news)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            datetime.now().isoformat(),
            'GitHub',
            level,
            f"Repository: {repo_info['owner']}/{repo_info['repo']}",
            message,
            commit_link,
            'FUEL' if 'fuel' in repo_info['repo'].lower() else ('ARC' if 'arc' in repo_info['repo'].lower() else ''),
            json.dumps(['github', 'development', 'update']),
            1 if level in ['CRITICAL', 'HIGH'] else 0
        ))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        telegram_url = f"https://api.telegram.org/bot{config.api_config['telegram']['bot_token']}/sendMessage"
        payload = {
            'chat_id': config.api_config['telegram']['chat_id'],
            'text': message,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=payload) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GitHub –∞–ª–µ—Ä—Ç–∞: {response.status}")
                    
        logger.info(f"GitHub –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {level} - {repo_info['owner']}/{repo_info['repo']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GitHub –∞–ª–µ—Ä—Ç–∞: {e}")

async def send_social_alert(level: str, source: str, original_text: str, translated_text: str, link: str = "", token: str = "", keywords: List[str] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        # AI –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if NEWS_ANALYZER_AVAILABLE:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                analysis = await analyze_crypto_news(original_text, source)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç
                if not await should_alert_news(analysis):
                    logger.info(f"AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å: {analysis.get('reason', '')}")
                    return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                alert_message = await format_news_alert(analysis, original_text)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
                ai_level = analysis.get('impact', 'low')
                level = 'HIGH' if ai_level == 'high' else 'MEDIUM' if ai_level == 'medium' else 'INFO'
                
                logger.info(f"AI –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏: {ai_level} - {analysis.get('summary', '')[:50]}...")
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                alert_message = None
        else:
            alert_message = None
        
        # –ï—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not alert_message:
            emoji_map = {
                'INFO': 'üì±',
                'MEDIUM': '‚ö†Ô∏è',
                'HIGH': 'üö®',
                'CRITICAL': 'üî•'
            }
            
            emoji = emoji_map.get(level, 'üìä')
            
            alert_message = f"{emoji} <b>{level.upper()} - {source.upper()}</b>\n\n"
            alert_message += f"<b>–û—Ä–∏–≥–∏–Ω–∞–ª:</b>\n{original_text[:500]}...\n\n"
            alert_message += f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n{translated_text[:500]}...\n\n"
            
            if token:
                alert_message += f"<b>–¢–æ–∫–µ–Ω:</b> {token}\n"
            if keywords:
                alert_message += f"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(keywords[:5])}\n"
            if link:
                alert_message += f"<b>–°—Å—ã–ª–∫–∞:</b> {link}\n"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO social_alerts (timestamp, source, level, original_text, translated_text, link, token, keywords, important_news)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            datetime.now().isoformat(),
            source,
            level,
            original_text,
            translated_text,
            link,
            token,
            json.dumps(keywords or []),
            1 if level in ['CRITICAL', 'HIGH'] else 0
        ))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        telegram_url = f"https://api.telegram.org/bot{config.api_config['telegram']['bot_token']}/sendMessage"
        payload = {
            'chat_id': config.api_config['telegram']['chat_id'],
            'text': alert_message,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=payload) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∞–ª–µ—Ä—Ç–∞: {response.status}")
                    
        logger.info(f"–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {level} - {source}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")

@handle_errors("check_analytics")
async def check_analytics(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (DeBank, Arkham, BubbleMaps)
    –í—Å–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ error_handler
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    results = {}
    
    for symbol, token in TOKENS.items():
        try:
            symbol_analytics = {}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DeBank (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            debank_data = await check_debank_analytics(session, token)
            if debank_data and 'error' not in debank_data:
                symbol_analytics['debank'] = debank_data
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Arkham (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            arkham_data = await check_arkham_analytics(session, token)
            if arkham_data and 'error' not in arkham_data:
                symbol_analytics['arkham'] = arkham_data
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ BubbleMaps (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
            bubblemaps_data = await check_bubblemaps_analytics(session, token)
            if bubblemaps_data and 'error' not in bubblemaps_data:
                symbol_analytics['bubblemaps'] = bubblemaps_data
            
            if symbol_analytics:
                results[symbol] = symbol_analytics
                logger.info(f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {list(symbol_analytics.keys())}")
            else:
                results[symbol] = {'note': 'No analytics data available'}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è {symbol}: {e}")
            results[symbol] = {'error': str(e)}
    
    logger.info("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    return results

async def check_debank_analytics(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –ø–ª–∞—Ç–Ω—ã–π API)"""
    try:
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: DeBank —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º Etherscan –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if token['chain'] == 'ethereum':
            etherscan_api_key = os.getenv('ETHERSCAN_API_KEY')
            if etherscan_api_key and etherscan_api_key != 'your_etherscan_api_key_here':
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Å Etherscan
                url = f"https://api.etherscan.io/api"
                params = {
                    'module': 'token',
                    'action': 'tokenholderlist',
                    'contractaddress': token['contract'],
                    'page': 1,
                    'offset': 100,
                    'apikey': etherscan_api_key
                }
                
                async with session.get(url, params=params, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if data['status'] == '1':
                            holders = data['result']
                            total_holders = len(holders)
                            
                            # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
                            return {
                                'total_holders': total_holders,
                                'top_10_concentration': sum(float(h['TokenHolderQuantity']) for h in holders[:10]) / sum(float(h['TokenHolderQuantity']) for h in holders) if holders else 0,
                                'source': 'etherscan_api',
                                'note': 'Basic portfolio analysis from Etherscan'
                            }
        
        # Fallback: –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        return {
            'note': 'Portfolio analytics disabled - requires paid API',
            'status': 'disabled'
        }
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π: {e}")
        return {'error': 'Failed to fetch data'}

async def check_arkham_analytics(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –ø–ª–∞—Ç–Ω—ã–π API)"""
    try:
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: Arkham —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko –¥–ª—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        symbol = token['symbol']
        url = f"https://api.coingecko.com/api/v3/coins/{symbol.lower()}"
        
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
                community_data = data.get('community_data', {})
                market_data = data.get('market_data', {})
                
                return {
                    'reddit_subscribers': community_data.get('reddit_subscribers', 0),
                    'twitter_followers': community_data.get('twitter_followers', 0),
                    'market_cap_rank': market_data.get('market_cap_rank', 0),
                    'source': 'coingecko_api',
                    'note': 'Basic token analytics from CoinGecko'
                }
            else:
                logger.warning(f"CoinGecko API error: {resp.status}")
                return {'error': f'HTTP {resp.status}'}
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {e}")
        return {'error': 'Failed to fetch data'}

async def check_bubblemaps_analytics(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –Ω–µ—Ç API)"""
    try:
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: BubbleMaps –Ω–µ –∏–º–µ–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –∏–ª–∏ –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º Etherscan –¥–ª—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö
        if token['chain'] == 'ethereum':
            etherscan_api_key = os.getenv('ETHERSCAN_API_KEY')
            if etherscan_api_key and etherscan_api_key != 'your_etherscan_api_key_here':
                url = f"https://api.etherscan.io/api"
                params = {
                    'module': 'token',
                    'action': 'tokenholderlist',
                    'contractaddress': token['contract'],
                    'page': 1,
                    'offset': 10,  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-10 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
                    'apikey': etherscan_api_key
                }
                
                async with session.get(url, params=params, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if data['status'] == '1':
                            holders = data['result']
                            
                            # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–ø –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
                            top_holders = []
                            for holder in holders[:5]:  # –¢–æ–ø-5
                                top_holders.append({
                                    'address': holder['TokenHolderAddress'],
                                    'balance': float(holder['TokenHolderQuantity']),
                                    'percentage': float(holder['TokenHolderShare'])
                                })
                            
                            return {
                                'top_holders': top_holders,
                                'total_holders': len(holders),
                                'source': 'etherscan_api',
                                'note': 'Basic holder analysis from Etherscan'
                            }
        
        # Fallback: –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        return {
            'note': 'Holder visualization disabled - no public API available',
            'status': 'disabled'
        }
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {e}")
        return {'error': 'Failed to fetch data'}

def calculate_total_volume(symbol: str, data: Dict[str, Any]) -> float:
    """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)"""
    total_volume = 0.0
    
    try:
        # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã —Å CEX
        cex_data = data.get('cex', {})
        for exchange in ['bybit', 'okx', 'htx', 'gate']:
            if exchange in cex_data and 'volume_24h' in cex_data[exchange] and 'error' not in cex_data[exchange]:
                volume = float(cex_data[exchange]['volume_24h'])
                if volume > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–º –Ω–µ –Ω—É–ª–µ–≤–æ–π
                    total_volume += volume
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–º —Å DEX
        dex_data = data.get('dex', {})
        if 'dexscreener' in dex_data and 'volume_24h' in dex_data['dexscreener']:
            dex_volume = float(dex_data['dexscreener']['volume_24h'])
            if dex_volume > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–º –Ω–µ –Ω—É–ª–µ–≤–æ–π
                total_volume += dex_volume
        
        # –ï—Å–ª–∏ –≤—Å–µ –æ–±—ä–µ–º—ã –Ω—É–ª–µ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        if total_volume == 0:
            logger.warning(f"–í—Å–µ –æ–±—ä–µ–º—ã –¥–ª—è {symbol} —Ä–∞–≤–Ω—ã –Ω—É–ª—é")
        
        logger.info(f"–û–±—â–∏–π –æ–±—ä–µ–º {symbol}: {total_volume:,.2f} USD")
        return total_volume
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ –¥–ª—è {symbol}: {e}")
        return 0.0

async def get_crypto_news(symbol: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CryptoPanic API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        url = "https://cryptopanic.com/api/v1/posts/"
        params = {
            'auth_token': os.getenv('CRYPTOPANIC_API_KEY', ''),
            'currencies': symbol,
            'filter': 'hot',
            'public': 'true'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('results'):
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
                        news = data['results'][0]
                        return f"üì∞ {news['title']} - {news['url']}"
        
        # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {symbol} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –∞–∫—Ç–∏–≤–µ–Ω"

@handle_errors("send_alert")
async def send_alert(level, message, token_symbol=None, context=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram –∏ push (Pushover)
    """
    try:
        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞: —É—Ä–æ–≤–µ–Ω—å={level}, —Ç–æ–∫–µ–Ω={token_symbol}, –∫–æ–Ω—Ç–µ–∫—Å—Ç={context}")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if context and 'price' in context and 'volume_24h' in context:
            message = f"{message}\nüí∞ –¶–µ–Ω–∞: ${context['price']:.6f}\nüìä –û–±—ä–µ–º 24—á: ${context['volume_24h']:,.0f}"
        
        # AI —É–ª—É—á—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ (–ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # if context:
        #     enhanced_message = await generate_ai_alert(message, context)
        #     if enhanced_message:
        #         message = enhanced_message
        #         logger.debug("–ê–ª–µ—Ä—Ç —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é AI")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        telegram_url = f"https://api.telegram.org/bot{config.api_config['telegram']['bot_token']}/sendMessage"
        payload = {
            'chat_id': config.api_config['telegram']['chat_id'],
            'text': message,
            'parse_mode': 'HTML'
        }
        
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {payload}")
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.debug(f"Telegram –æ—Ç–≤–µ—Ç: {result}")
                    logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {message}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        with sqlite3.connect(DB_PATH) as conn:
            with conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO alerts (level, message, token_symbol)
                    VALUES (?, ?, ?)
                ''', (level, message, token_symbol))
        
        logger.debug(f"–ê–ª–µ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {level} - {token_symbol}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
        if level == 'CRITICAL':
            send_mobile_alert(level, message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

def save_token_data(symbol: str, data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º with –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        with sqlite3.connect(DB_PATH) as conn:
            with conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO token_data (symbol, price, volume_24h, market_cap, holders_count, top_holders, tvl, social_mentions)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    symbol,
                    data.get('price'),
                    data.get('volume_24h'),
                    data.get('market_cap'),
                    data.get('holders_count'),
                    json.dumps(data.get('top_holders')) if data.get('top_holders') else None,
                    data.get('tvl'),
                    data.get('social_mentions')
                ))
        # conn.commit() –Ω–µ –Ω—É–∂–µ–Ω, with —Å–∞–º –∫–æ–º–º–∏—Ç–∏—Ç
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞: {e}")

# --- –ù–æ–≤—ã–π –±–ª–æ–∫: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–∑–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞ ---
def get_last_volume(symbol: str, minutes: int = 60) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ N –º–∏–Ω—É—Ç"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT volume_24h FROM realtime_data
                WHERE symbol = ? AND timestamp >= datetime('now', ? || ' minutes')
                ORDER BY timestamp DESC LIMIT 1
            ''', (symbol, -minutes))
            row = cursor.fetchone()
            return row[0] if row else 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞: {e}")
        return 0.0

def was_alert_sent(symbol: str, volume: float, threshold: float = 0.01) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –ø–æ –æ–±—ä–µ–º—É"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM alerts
                WHERE token_symbol = ? AND message LIKE ?
                AND timestamp >= datetime('now', '-1 hour')
            ''', (symbol, f'%{volume}%'))
            count = cursor.fetchone()[0]
            return count > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ –æ–±—ä–µ–º—É: {e}")
        return False

def get_last_price(symbol: str, minutes: int = 60) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ N –º–∏–Ω—É—Ç"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT price FROM realtime_data
                WHERE symbol = ? AND timestamp >= datetime('now', ? || ' minutes')
                ORDER BY timestamp DESC LIMIT 1
            ''', (symbol, -minutes))
            row = cursor.fetchone()
            return row[0] if row else 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return 0.0

def was_price_alert_sent(symbol: str, price: float, threshold: float = 0.01) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –ø–æ —Ü–µ–Ω–µ"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM alerts
                WHERE token_symbol = ? AND message LIKE ?
                AND timestamp >= datetime('now', '-1 hour')
            ''', (symbol, f'%{price}%'))
            count = cursor.fetchone()[0]
            return count > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ —Ü–µ–Ω–µ: {e}")
        return False

# --- –ò–∑–º–µ–Ω—è–µ–º check_alerts ---
async def check_alerts(symbol: str, data: Dict[str, Any]):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–æ–π –æ—Ç—Å—á—ë—Ç–∞)"""
    try:
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}: {data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_price = 0
        current_volume = 0
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CEX > DEX > realtime_data
        if 'cex' in data and data['cex']:
            for exchange, exchange_data in data['cex'].items():
                if isinstance(exchange_data, dict) and 'error' not in exchange_data:
                    if 'price' in exchange_data:
                        current_price = float(exchange_data['price'])
                    if 'volume_24h' in exchange_data:
                        current_volume = float(exchange_data['volume_24h'])
                    break
        
        if current_price == 0 and 'dex' in data and data['dex']:
            for dex_name, dex_data in data['dex'].items():
                if isinstance(dex_data, dict) and 'error' not in dex_data:
                    if 'price' in dex_data:
                        current_price = float(dex_data['price'])
                    if 'volume_24h' in dex_data:
                        current_volume = float(dex_data['volume_24h'])
                    break
        
        if current_price == 0 and symbol in realtime_data:
            current_price = realtime_data[symbol].get('price', 0)
            current_volume = realtime_data[symbol].get('volume_24h', 0)
        
        logger.debug(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ {symbol}: —Ü–µ–Ω–∞=${current_price}, –æ–±—ä–µ–º=${current_volume}")
        
        if current_price == 0 and current_volume == 0:
            logger.debug(f"–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫ –∞–ª–µ—Ä—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫—É –æ—Ç—Å—á—ë—Ç–∞
        reference = get_alert_reference(symbol)
        if reference:
            last_price = reference['last_price']
            last_volume = reference['last_volume']
            logger.debug(f"–¢–æ—á–∫–∞ –æ—Ç—Å—á—ë—Ç–∞ {symbol}: —Ü–µ–Ω–∞=${last_price}, –æ–±—ä–µ–º=${last_volume}")
        else:
            last_price = current_price
            last_volume = current_volume
            logger.debug(f"–ù–µ—Ç —Ç–æ—á–∫–∏ –æ—Ç—Å—á—ë—Ç–∞ –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        if last_price > 0:
            price_change = abs((current_price - last_price) / last_price) * 100
            logger.debug(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {symbol}: {price_change:.2f}%")
            
            if price_change > config.monitoring_config['price_change_threshold']:
                if not was_price_alert_sent(symbol, current_price):
                    alert_message = f"üö® –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {symbol}: {price_change:.2f}% (${last_price:.6f} ‚Üí ${current_price:.6f})"
                    await send_alert('WARNING', alert_message, symbol, {
                        'price': current_price,
                        'volume_24h': current_volume,
                        'price_change': price_change
                    })
                    logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –ø–æ —Ü–µ–Ω–µ –¥–ª—è {symbol}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞
        if last_volume > 0:
            volume_change = abs((current_volume - last_volume) / last_volume) * 100
            logger.debug(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ {symbol}: {volume_change:.2f}%")
            
            if volume_change > config.monitoring_config['volume_change_threshold']:
                if not was_alert_sent(symbol, current_volume):
                    alert_message = f"üìä –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ {symbol}: {volume_change:.2f}% (${last_volume:,.0f} ‚Üí ${current_volume:,.0f})"
                    await send_alert('INFO', alert_message, symbol, {
                        'price': current_price,
                        'volume_24h': current_volume,
                        'volume_change': volume_change
                    })
                    logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –ø–æ –æ–±—ä–µ–º—É –¥–ª—è {symbol}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ—Ç—Å—á—ë—Ç–∞
        set_alert_reference(symbol, current_price, current_volume)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ –æ—Ç—Å—á—ë—Ç–∞ –¥–ª—è {symbol}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}: {e}")

async def update_fuel_price_realtime():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É FUEL/USDT —Å Gate.io –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    """
    url = f"{config.api_config['gate']['base_url']}/spot/tickers?currency_pair=FUEL_USDT"
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if isinstance(data, list) and data:
                            price = float(data[0]['last'])
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                            realtime_data['FUEL']['price'] = price
                            realtime_data['FUEL']['last_update'] = datetime.now()
                            realtime_data['FUEL']['source'] = 'Gate.io'
                            logger.info(f"[REALTIME] FUEL price updated from Gate.io: {price}")
                    else:
                        logger.warning(f"[REALTIME] Gate.io FUEL HTTP {resp.status}")
        except Exception as e:
            logger.warning(f"[REALTIME] Gate.io FUEL price error: {e}")
        await asyncio.sleep(5)

async def update_arc_price_realtime():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É ARC/USDT —Å HTX –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    """
    url = f"https://api.htx.com/market/detail/merged?symbol=arcusdt"
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if data.get('status') == 'ok' and 'tick' in data:
                            price = float(data['tick']['close'])
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                            realtime_data['ARC']['price'] = price
                            realtime_data['ARC']['last_update'] = datetime.now()
                            realtime_data['ARC']['source'] = 'HTX'
                            logger.info(f"[REALTIME] ARC price updated from HTX: {price}")
                    else:
                        logger.warning(f"[REALTIME] HTX ARC HTTP {resp.status}")
        except Exception as e:
            logger.warning(f"[REALTIME] HTX ARC price error: {e}")
        await asyncio.sleep(5)

# --- AI/ML Sentiment Analysis ---
def analyze_sentiment(text: str) -> Dict[str, float]:
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª"""
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text_lower = text.lower()
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
        positive_words = [
            'bullish', 'moon', 'pump', 'surge', 'rally', 'breakout', 'uptrend',
            'buy', 'long', 'hodl', 'diamond hands', 'to the moon', 'lambo',
            'success', 'win', 'profit', 'gains', 'positive', 'good', 'great',
            'amazing', 'excellent', 'perfect', 'love', 'like', 'support',
            'partnership', 'adoption', 'growth', 'development', 'launch',
            'mainnet', 'upgrade', 'innovation', 'revolutionary', 'breakthrough'
        ]
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
        negative_words = [
            'bearish', 'dump', 'crash', 'sell', 'short', 'paper hands',
            'rug', 'scam', 'fake', 'dead', 'dumpster', 'trash', 'garbage',
            'lose', 'loss', 'negative', 'bad', 'terrible', 'awful', 'hate',
            'dislike', 'problem', 'issue', 'bug', 'exploit', 'hack', 'vulnerability',
            'suspended', 'banned', 'delisted', 'bankruptcy', 'liquidation'
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç -1 –¥–æ 1
        total_words = positive_count + negative_count
        if total_words == 0:
            sentiment = 0.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
        else:
            sentiment = (positive_count - negative_count) / total_words
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1
        normalized_sentiment = (sentiment + 1) / 2
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        confidence = min(total_words / 10, 1.0)
        
        return {
            'sentiment': normalized_sentiment,
            'confidence': confidence,
            'positive_count': positive_count,
            'negative_count': negative_count
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
        return {
            'sentiment': 0.5,
            'confidence': 0.0,
            'positive_count': 0,
            'negative_count': 0
        }

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
sentiment_cache = {}

def get_cached_sentiment_data(cache_key: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    try:
        if cache_key in sentiment_cache:
            cached_data, timestamp, duration = sentiment_cache[cache_key]
            if time.time() - timestamp < duration:
                return cached_data
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                del sentiment_cache[cache_key]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
        return None

def set_cached_sentiment_data(cache_key: str, data: Dict[str, Any], duration: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –∫—ç—à"""
    try:
        sentiment_cache[cache_key] = (data, time.time(), duration)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π)
        if len(sentiment_cache) > 100:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            oldest_key = min(sentiment_cache.keys(), 
                           key=lambda k: sentiment_cache[k][1])
            del sentiment_cache[oldest_key]
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")

async def fetch_reddit_sentiment(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏–∑ Reddit"""
    try:
        reddit_data = []
        
        for subreddit in config.social_config['reddit_subreddits']:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Reddit JSON API (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                url = f"https://www.reddit.com/{subreddit}/search.json"
                params = {
                    'q': symbol,
                    't': 'day',
                    'limit': 25
                }
                
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'data' in data and 'children' in data['data']:
                            for post in data['data']['children']:
                                post_data = post['data']
                                text = f"{post_data.get('title', '')} {post_data.get('selftext', '')}"
                                sentiment = analyze_sentiment(text)
                                
                                reddit_data.append({
                                    'title': post_data.get('title', ''),
                                    'text': text,
                                    'score': post_data.get('score', 0),
                                    'sentiment': sentiment,
                                    'subreddit': subreddit,
                                    'url': f"https://reddit.com{post_data.get('permalink', '')}"
                                })
                                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {subreddit}: {e}")
                continue
        
        if reddit_data:
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_sentiment = sum(item['sentiment']['sentiment'] for item in reddit_data)
            avg_sentiment = total_sentiment / len(reddit_data)
            total_score = sum(item['score'] for item in reddit_data)
            
            return {
                'sentiment_score': (avg_sentiment + 1) / 2,  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1
                'posts_count': len(reddit_data),
                'total_score': total_score,
                'source': 'reddit',
                'posts': reddit_data[:5]  # –¢–æ–ø 5 –ø–æ—Å—Ç–æ–≤
            }
        
        return {}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Reddit sentiment: {e}")
        return {}

async def fetch_coingecko_social_data(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CoinGecko API"""
    try:
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è CoinGecko
        symbol_mapping = {
            'FUEL': 'fuel-network',
            'ARC': 'ai-rig-complex',  # AI Rig Complex
            'BTC': 'bitcoin',
            'ETH': 'ethereum',
            'SOL': 'solana'
        }
        
        coin_id = symbol_mapping.get(symbol, symbol.lower())
        

        
        async with session.get(f"https://api.coingecko.com/api/v3/coins/{coin_id}", timeout=10) as response:
            if response.status == 200:
                data = await response.json()
                community_data = data.get('community_data', {})
                developer_data = data.get('developer_data', {})
                
                # –†–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                twitter_followers = community_data.get('twitter_followers', 0)
                reddit_subscribers = community_data.get('reddit_subscribers', 0)
                reddit_accounts_active = community_data.get('reddit_accounts_active_48h', 0)
                reddit_posts = community_data.get('reddit_average_posts_48h', 0)
                reddit_comments = community_data.get('reddit_average_comments_48h', 0)
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                total_community = twitter_followers + reddit_subscribers
                activity_score = (reddit_accounts_active + reddit_posts + reddit_comments) / max(total_community, 1)
                
                if total_community > 1000000:  # > 1M –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    base_sentiment = 0.7
                elif total_community > 100000:  # > 100K –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    base_sentiment = 0.6
                elif total_community > 10000:  # > 10K –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    base_sentiment = 0.5
                else:
                    base_sentiment = 0.4
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                final_sentiment = min(1.0, base_sentiment + (activity_score * 0.3))
                
                return {
                    'sentiment_score': final_sentiment,
                    'social_volume': total_community,
                    'social_contributors': reddit_accounts_active,
                    'social_engagement': reddit_posts + reddit_comments,
                    'twitter_followers': twitter_followers,
                    'reddit_subscribers': reddit_subscribers,
                    'source': 'coingecko'
                }
            else:
                logger.warning(f"CoinGecko API error for {symbol}: {response.status}")
                return {}
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CoinGecko API –¥–ª—è {symbol}: {e}")
        return {}



async def fetch_crypto_news_sentiment(session: aiohttp.ClientSession, symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏–∑ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"news_sentiment_{symbol}"
        cached_data = get_cached_sentiment_data(cache_key)
        if cached_data:
            return cached_data
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_data = await fetch_crypto_news(symbol)
        if not news_data:
            return {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        sentiments = []
        for news in news_data[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
            title = news.get('title', '')
            if title:
                sentiment = analyze_sentiment(title)
                sentiments.append(sentiment['sentiment'])
        
        if not sentiments:
            return {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        avg_sentiment = sum(sentiments) / len(sentiments)
        
        result = {
            'sentiment': avg_sentiment,
            'confidence': min(len(sentiments) / 10, 1.0),  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            'sources_count': len(sentiments),
            'last_updated': datetime.now().isoformat()
        }
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç
        set_cached_sentiment_data(cache_key, result, 1800)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
        return {}



async def analyze_social_sentiment(symbol: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö"""
    try:
        logger.debug(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {symbol}")
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            reddit_data = await fetch_reddit_sentiment(session, symbol)
            coingecko_data = await fetch_coingecko_social_data(session, symbol)
            news_data = await fetch_crypto_news_sentiment(session, symbol)
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {symbol}: Reddit={bool(reddit_data)}, Coingecko={bool(coingecko_data)}, News={bool(news_data)}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_sentiment = {
                'reddit': reddit_data,
                'coingecko': coingecko_data,
                'news': news_data,
                'overall_sentiment': 'neutral',
                'confidence': 0.5,
                'sources_count': 0
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            sentiments = []
            confidences = []
            
            for source, data in [('reddit', reddit_data), ('coingecko', coingecko_data), ('news', news_data)]:
                if data and 'error' not in data:
                    if 'sentiment' in data:
                        sentiments.append(data['sentiment'])
                    if 'confidence' in data:
                        confidences.append(data['confidence'])
                    combined_sentiment['sources_count'] += 1
            
            if sentiments:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                bullish_count = sentiments.count('bullish')
                bearish_count = sentiments.count('bearish')
                neutral_count = sentiments.count('neutral')
                
                if bullish_count > bearish_count and bullish_count > neutral_count:
                    combined_sentiment['overall_sentiment'] = 'bullish'
                elif bearish_count > bullish_count and bearish_count > neutral_count:
                    combined_sentiment['overall_sentiment'] = 'bearish'
                else:
                    combined_sentiment['overall_sentiment'] = 'neutral'
                
                # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                if confidences:
                    combined_sentiment['confidence'] = sum(confidences) / len(confidences)
            
            execution_time = time.time() - start_time
            logger.debug(f"–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.2f}—Å: {combined_sentiment['overall_sentiment']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {combined_sentiment['confidence']:.2f})")
            
            return combined_sentiment
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {symbol}: {e}")
        return {'error': str(e)}

# --- Risk Management ---
async def calculate_risk_score(symbol: str, data: Dict[str, Any]) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        data_hash = calculate_data_hash(data)
        cached_result = get_cached_risk_score(symbol, data_hash)
        if cached_result:
            return cached_result
        
        risk_factors = {}
        total_risk = 0.0
        details = []
        
        # 1. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã (0-20 –±–∞–ª–ª–æ–≤) - –£–ú–ï–ù–¨–®–ï–ù –í–ï–°
        price_data = get_price_history(symbol, hours=24)
        if len(price_data) > 1:
            prices = [float(p[1]) for p in price_data]
            volatility = calculate_volatility(prices)
            risk_factors['volatility'] = min(20, volatility * 80)  # –£–º–µ–Ω—å—à–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            total_risk += risk_factors['volatility']
            details.append(f"üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {risk_factors['volatility']:.1f}/20 (–∫–æ—ç—Ñ: {volatility:.3f})")
        else:
            risk_factors['volatility'] = 10  # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            total_risk += risk_factors['volatility']
            details.append(f"üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {risk_factors['volatility']:.1f}/20 (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        
        # 2. –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (0-25 –±–∞–ª–ª–æ–≤) - –£–í–ï–õ–ò–ß–ï–ù –í–ï–°
        volume_24h = data.get('volume_24h', 0)
        if volume_24h < 50000:  # < 50k USD
            risk_factors['liquidity'] = 25
            details.append(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 25/25 (–æ–±—ä–µ–º: ${volume_24h:,.0f} - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ò–ô)")
        elif volume_24h < 200000:  # < 200k USD
            risk_factors['liquidity'] = 20
            details.append(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 20/25 (–æ–±—ä–µ–º: ${volume_24h:,.0f} - –û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ô)")
        elif volume_24h < 1000000:  # < 1M USD
            risk_factors['liquidity'] = 15
            details.append(f"ÔøΩÔøΩ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 15/25 (–æ–±—ä–µ–º: ${volume_24h:,.0f} - –ù–ò–ó–ö–ò–ô)")
        elif volume_24h < 5000000:  # < 5M USD
            risk_factors['liquidity'] = 10
            details.append(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 10/25 (–æ–±—ä–µ–º: ${volume_24h:,.0f} - –°–†–ï–î–ù–ò–ô)")
        elif volume_24h < 20000000:  # < 20M USD
            risk_factors['liquidity'] = 5
            details.append(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 5/25 (–æ–±—ä–µ–º: ${volume_24h:,.0f} - –•–û–†–û–®–ò–ô)")
        else:
            risk_factors['liquidity'] = 0
            details.append(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 0/25 (–æ–±—ä–µ–º: ${volume_24h:,.0f} - –û–¢–õ–ò–ß–ù–´–ô)")
        total_risk += risk_factors['liquidity']
        
        # 3. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (0-15 –±–∞–ª–ª–æ–≤) - –£–õ–£–ß–®–ï–ù–ê –õ–û–ì–ò–ö–ê
        sentiment_data = await analyze_social_sentiment(symbol)
        sentiment_score = sentiment_data.get('sentiment', 0.5)
        sentiment_confidence = sentiment_data.get('confidence', 0.0)
        sentiment_sources = sentiment_data.get('sources', {})
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        sentiment_details = []
        if sentiment_sources:
            for source, data in sentiment_sources.items():
                source_score = data.get('sentiment_score', 0.5)
                source_count = data.get('message_count', 0) or data.get('posts_count', 0) or data.get('articles_count', 0) or 0
                sentiment_details.append(f"{source}: {source_score:.2f} ({source_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        if sentiment_score < 0.3:
            risk_factors['sentiment'] = 15
            details.append(f"üì± –°–æ—Ü. –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: 15/15 (–æ—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {sentiment_score:.2f})")
        elif sentiment_score < 0.4:
            risk_factors['sentiment'] = 10
            details.append(f"üì± –°–æ—Ü. –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: 10/15 (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {sentiment_score:.2f})")
        elif sentiment_score < 0.6:
            risk_factors['sentiment'] = 5
            details.append(f"üì± –°–æ—Ü. –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: 5/15 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {sentiment_score:.2f})")
        else:
            risk_factors['sentiment'] = 0
            details.append(f"üì± –°–æ—Ü. –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: 0/15 (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {sentiment_score:.2f})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if sentiment_details:
            details.append(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sentiment_details)}")
        else:
            details.append(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        details.append(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sentiment_confidence:.2f}")
        total_risk += risk_factors['sentiment']
        
        # 4. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π (0-15 –±–∞–ª–ª–æ–≤) - –£–õ–£–ß–®–ï–ù–ê –õ–û–ì–ò–ö–ê
        holders_count = data.get('holders_count', 0)
        market_cap = data.get('market_cap', 0)
        
        if holders_count > 0:
            if holders_count < 500:
                risk_factors['concentration'] = 15
                details.append(f"üë• –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: 15/15 (–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {holders_count} - –û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø)")
            elif holders_count < 2000:
                risk_factors['concentration'] = 12
                details.append(f"üë• –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: 12/15 (–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {holders_count} - –í–´–°–û–ö–ê–Ø)")
            elif holders_count < 10000:
                risk_factors['concentration'] = 8
                details.append(f"üë• –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: 8/15 (–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {holders_count} - –°–†–ï–î–ù–Ø–Ø)")
            else:
                risk_factors['concentration'] = 3
                details.append(f"üë• –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: 3/15 (–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {holders_count} - –ù–ò–ó–ö–ê–Ø)")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–º –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if volume_24h < 1000000:  # < 1M USD
                risk_factors['concentration'] = 12
                details.append(f"üë• –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: 12/15 (–º–∞–ª–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π/–Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º)")
            else:
                risk_factors['concentration'] = 8
                details.append(f"üë• –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: 8/15 (—Å—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è)")
        total_risk += risk_factors['concentration']
        
        # 5. –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ (0-10 –±–∞–ª–ª–æ–≤) - –£–õ–£–ß–®–ï–ù–ê –õ–û–ì–ò–ö–ê
        age_days = data.get('age_days', 180)
        if age_days < 7:
            risk_factors['age'] = 10
            details.append(f"üïí –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞: 10/10 (–Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω < 7 –¥–Ω–µ–π)")
        elif age_days < 30:
            risk_factors['age'] = 8
            details.append(f"üïí –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞: 8/10 (–º–æ–ª–æ–¥–æ–π —Ç–æ–∫–µ–Ω < 30 –¥–Ω–µ–π)")
        elif age_days < 90:
            risk_factors['age'] = 6
            details.append(f"üïí –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞: 6/10 (–º–æ–ª–æ–¥–æ–π —Ç–æ–∫–µ–Ω < 90 –¥–Ω–µ–π)")
        elif age_days < 365:
            risk_factors['age'] = 4
            details.append(f"üïí –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞: 4/10 (—Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç < 1 –≥–æ–¥–∞)")
        else:
            risk_factors['age'] = 2
            details.append(f"üïí –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞: 2/10 (–∑—Ä–µ–ª—ã–π —Ç–æ–∫–µ–Ω > 1 –≥–æ–¥–∞)")
        total_risk += risk_factors['age']
        
        # 6. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (0-10 –±–∞–ª–ª–æ–≤) - –£–õ–£–ß–®–ï–ù–ê –õ–û–ì–ò–ö–ê
        technical_risk = 0
        technical_details = []
        
        # RSI
        rsi = data.get('rsi', 50)
        if rsi > 85:
            technical_risk += 4
            technical_details.append(f"RSI –æ—á–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω ({rsi:.1f})")
        elif rsi > 75:
            technical_risk += 2
            technical_details.append(f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω ({rsi:.1f})")
        elif rsi < 15:
            technical_risk += 4
            technical_details.append(f"RSI –æ—á–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω ({rsi:.1f})")
        elif rsi < 25:
            technical_risk += 2
            technical_details.append(f"RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω ({rsi:.1f})")
        
        # –¶–µ–Ω–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á
        price_change_24h = data.get('price_change_24h', 0)
        if abs(price_change_24h) > 50:
            technical_risk += 4
            technical_details.append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ({price_change_24h:+.1f}%)")
        elif abs(price_change_24h) > 30:
            technical_risk += 3
            technical_details.append(f"–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ({price_change_24h:+.1f}%)")
        elif abs(price_change_24h) > 15:
            technical_risk += 2
            technical_details.append(f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ({price_change_24h:+.1f}%)")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ 10 –±–∞–ª–ª–æ–≤
        technical_risk = min(10, technical_risk)
        risk_factors['technical'] = technical_risk
        total_risk += technical_risk
        
        if technical_details:
            details.append(f"üìä –¢–µ—Ö. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {technical_risk}/10 ({', '.join(technical_details)})")
        else:
            details.append(f"üìä –¢–µ—Ö. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {technical_risk}/10 (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ)")
        
        # 7. –ù–û–í–´–ô –§–ê–ö–¢–û–†: On-chain –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (0-5 –±–∞–ª–ª–æ–≤)
        onchain_risk = 0
        onchain_details = []
        
        large_transfers = data.get('large_transfers', [])
        if len(large_transfers) > 10:
            onchain_risk += 3
            onchain_details.append(f"–ú–Ω–æ–≥–æ –∫—Ä—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ({len(large_transfers)})")
        elif len(large_transfers) > 5:
            onchain_risk += 2
            onchain_details.append(f"–ö—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã ({len(large_transfers)})")
        
        total_transactions = data.get('total_transactions', 0)
        if total_transactions > 1000:
            onchain_risk += 2
            onchain_details.append(f"–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({total_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
        
        risk_factors['onchain'] = onchain_risk
        total_risk += onchain_risk
        
        if onchain_details:
            details.append(f"üîó On-chain –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {onchain_risk}/5 ({', '.join(onchain_details)})")
        else:
            details.append(f"üîó On-chain –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {onchain_risk}/5 (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è)")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if total_risk >= 75:
            risk_level = 'CRITICAL'
        elif total_risk >= 55:
            risk_level = 'HIGH'
        elif total_risk >= 35:
            risk_level = 'MEDIUM'
        else:
            risk_level = 'LOW'
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        logger.warning(f"‚ö†Ô∏è {symbol} —Ä–∏—Å–∫: {risk_level} ({total_risk:.1f}/100)")
        for detail in details:
            logger.info(f"   {detail}")
        
        result = {
            'total_risk': total_risk,
            'risk_level': risk_level,
            'risk_factors': risk_factors,
            'details': details,
            'recommendation': get_risk_recommendation(risk_level)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        set_cached_risk_score(symbol, data_hash, result)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ –¥–ª—è {symbol}: {e}")
        return {'total_risk': 100, 'risk_level': 'UNKNOWN', 'risk_factors': {}, 'details': ['–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞'], 'recommendation': 'Unable to calculate risk'}

def get_risk_recommendation(risk_level: str) -> str:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞"""
    recommendations = {
        'CRITICAL': 'üö® –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫! –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
        'HIGH': '‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫. –¢–æ–ª—å–∫–æ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤',
        'MEDIUM': 'üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫. –¢—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
        'LOW': '‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤'
    }
    return recommendations.get(risk_level, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞')

def calculate_volatility(prices: List[float]) -> float:
    """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω"""
    if len(prices) < 2:
        return 0.0
    
    returns = []
    for i in range(1, len(prices)):
        if prices[i-1] != 0:
            returns.append((prices[i] - prices[i-1]) / prices[i-1])
    
    if not returns:
        return 0.0
    
    mean_return = sum(returns) / len(returns)
    variance = sum((r - mean_return) ** 2 for r in returns) / len(returns)
    return (variance ** 0.5) * (24 ** 0.5)  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

def get_price_history(symbol: str, hours: int = 24) -> List[tuple]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –∏–∑ –ë–î"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT timestamp, price FROM token_data
            WHERE symbol = ? AND timestamp >= datetime('now', ?)
            ORDER BY timestamp ASC
        ''', (symbol, f'-{hours} hours'))
        data = cursor.fetchall()
        conn.close()
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {e}")
        return []

# --- Portfolio Analytics ---
def calculate_portfolio_metrics(portfolio: Dict[str, float]) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    try:
        total_value = sum(portfolio.values())
        if total_value == 0:
            return {'error': 'Portfolio is empty'}
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        allocation = {symbol: value/total_value for symbol, value in portfolio.items()}
        
        # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–∏–Ω–¥–µ–∫—Å –•–µ—Ä—Ñ–∏–Ω–¥–∞–ª—è)
        concentration = sum(allocation[symbol] ** 2 for symbol in allocation)
        
        # –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        diversification = 1 - concentration
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∏—Å–∫–∞—Ö –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        portfolio_risk = 0
        for symbol in portfolio:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if symbol in risk_cache:
                portfolio_risk += risk_cache[symbol]['data']['total_risk'] * allocation[symbol]
            else:
                # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                portfolio_risk += 50 * allocation[symbol]
        
        return {
            'total_value': total_value,
            'allocation': allocation,
            'concentration': concentration,
            'diversification': diversification,
            'portfolio_risk': portfolio_risk,
            'risk_level': get_portfolio_risk_level(portfolio_risk)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return {'error': str(e)}

def get_portfolio_risk_level(risk_score: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    if risk_score >= 70:
        return 'CRITICAL'
    elif risk_score >= 50:
        return 'HIGH'
    elif risk_score >= 30:
        return 'MEDIUM'
    else:
        return 'LOW'

async def track_portfolio(portfolio: Dict[str, float]) -> Dict[str, Any]:
    """–¢—Ä–µ–∫–∏–Ω–≥ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∞–ª–µ—Ä—Ç–∞–º–∏"""
    try:
        results = {}
        
        for symbol, amount in portfolio.items():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = await get_current_price(symbol)
            if current_price:
                current_value = amount * current_price
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É (24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
                historical_price = await get_historical_price(symbol, hours=24)
                
                if historical_price:
                    price_change_24h = ((current_price - historical_price) / historical_price) * 100
                    value_change_24h = current_value - (amount * historical_price)
                    
                    results[symbol] = {
                        'amount': amount,
                        'current_price': current_price,
                        'current_value': current_value,
                        'price_change_24h': price_change_24h,
                        'value_change_24h': value_change_24h,
                        'percentage_of_portfolio': (current_value / sum(portfolio.values())) * 100 if sum(portfolio.values()) > 0 else 0
                    }
                    
                    # –ê–ª–µ—Ä—Ç—ã –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if abs(price_change_24h) > 10:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10%
                        alert_level = 'CRITICAL' if abs(price_change_24h) > 20 else 'WARNING'
                        direction = '—Ä–æ—Å—Ç' if price_change_24h > 0 else '–ø–∞–¥–µ–Ω–∏–µ'
                        await send_alert(
                            alert_level,
                            f"–ü–æ—Ä—Ç—Ñ–µ–ª—å: {symbol} –ø–æ–∫–∞–∑–∞–ª {direction} –Ω–∞ {abs(price_change_24h):.2f}% –∑–∞ 24—á",
                            symbol
                        )
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_metrics = calculate_portfolio_metrics(portfolio)
        results['portfolio_metrics'] = portfolio_metrics
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_portfolio_data(results)
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return {}

async def get_current_price(symbol: str) -> Optional[float]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT price FROM token_data 
                WHERE symbol = ? 
                ORDER BY timestamp DESC 
                LIMIT 1
            ''', (symbol,))
            
            result = cursor.fetchone()
            return result[0] if result else None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None

async def get_historical_price(symbol: str, hours: int = 24) -> Optional[float]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT price FROM token_data 
                WHERE symbol = ? 
                AND timestamp <= datetime('now', '-{} hours')
                ORDER BY timestamp DESC 
                LIMIT 1
            '''.format(hours), (symbol,))
            
            result = cursor.fetchone()
            return result[0] if result else None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None

async def save_portfolio_data(portfolio_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –ë–î"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS portfolio_tracking (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    symbol TEXT,
                    amount REAL,
                    current_price REAL,
                    current_value REAL,
                    price_change_24h REAL,
                    value_change_24h REAL,
                    percentage_of_portfolio REAL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–∫–µ–Ω—É
            for symbol, data in portfolio_data.items():
                if symbol == 'portfolio_metrics':
                    continue
                    
                cursor.execute('''
                    INSERT INTO portfolio_tracking 
                    (symbol, amount, current_price, current_value, price_change_24h, value_change_24h, percentage_of_portfolio)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    symbol,
                    data['amount'],
                    data['current_price'],
                    data['current_value'],
                    data['price_change_24h'],
                    data['value_change_24h'],
                    data['percentage_of_portfolio']
                ))
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

async def get_portfolio_history(symbol: str, days: int = 7) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM portfolio_tracking 
                WHERE symbol = ? 
                AND timestamp >= datetime('now', '-{} days')
                ORDER BY timestamp ASC
            '''.format(days), (symbol,))
            
            columns = [description[0] for description in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return []

# --- News Aggregator ---
async def fetch_crypto_news(symbol: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_sources = [
            # RSS –ª–µ–Ω—Ç—ã
            'https://cointelegraph.com/rss',
            'https://coindesk.com/arc/outboundfeeds/rss/',
            'https://decrypt.co/feed',
            'https://www.coindesk.com/arc/outboundfeeds/rss/',
            'https://bitcoinmagazine.com/.rss/full/',
            'https://www.theblock.co/rss.xml',
            'https://www.newsbtc.com/feed/',
            'https://ambcrypto.com/feed/',
            'https://cryptonews.com/news/feed/',
            'https://www.cryptoglobe.com/feed/',
            
            # API –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            f"https://api.coingecko.com/api/v3/news/{symbol.lower()}",
            f"https://cryptopanic.com/api/v1/posts/?auth_token=free&currencies={symbol}",
        ]
        
        news_items = []
        
        async with aiohttp.ClientSession() as session:
            for url in news_sources:
                try:
                    if 'api.coingecko.com' in url:
                        # Coingecko API
                        async with session.get(url, timeout=10) as response:
                            if response.status == 200:
                                data = await response.json()
                                for item in data.get('data', []):
                                    news_items.append({
                                        'title': item.get('title', ''),
                                        'description': item.get('description', ''),
                                        'link': item.get('url', ''),
                                        'source': 'Coingecko',
                                        'published_at': item.get('published_at', ''),
                                        'sentiment': item.get('sentiment', 'neutral')
                                    })
                    elif 'cryptopanic.com' in url:
                        # CryptoPanic API
                        async with session.get(url, timeout=10) as response:
                            if response.status == 200:
                                data = await response.json()
                                for item in data.get('results', []):
                                    news_items.append({
                                        'title': item.get('title', ''),
                                        'description': item.get('metadata', {}).get('description', ''),
                                        'link': item.get('url', ''),
                                        'source': 'CryptoPanic',
                                        'published_at': item.get('published_at', ''),
                                        'sentiment': item.get('vote', 'neutral')
                                    })

                    else:
                        # RSS –ª–µ–Ω—Ç—ã
                        rss_items = await parse_rss_news(session, url)
                        news_items.extend(rss_items)
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {url}: {e}")
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        news_items.sort(key=lambda x: x.get('published_at', ''), reverse=True)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        seen_titles = set()
        unique_news = []
        for item in news_items:
            title = item.get('title', '').lower().strip()
            if title and title not in seen_titles:
                seen_titles.add(title)
                unique_news.append(item)
        
        return unique_news[:20]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-20 –Ω–æ–≤–æ—Å—Ç–µ–π
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
        return []

async def aggregate_similar_news(news_items: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—ã"""
    try:
        from difflib import SequenceMatcher
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        news_groups = []
        processed = set()
        
        for i, news1 in enumerate(news_items):
            if i in processed:
                continue
                
            group = [news1]
            processed.add(i)
            
            for j, news2 in enumerate(news_items[i+1:], i+1):
                if j in processed:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                similarity = SequenceMatcher(None, 
                    news1.get('title', '').lower(), 
                    news2.get('title', '').lower()
                ).ratio()
                
                if similarity > 0.7:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
                    group.append(news2)
                    processed.add(j)
            
            if len(group) > 1:
                # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
                aggregated = {
                    'title': group[0]['title'],
                    'description': f"–ù–∞–π–¥–µ–Ω–æ {len(group)} –ø–æ—Ö–æ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
                    'link': group[0]['link'],
                    'source': f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ {len(group)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                    'published_at': group[0]['published_at'],
                    'sentiment': 'neutral',
                    'related_news': group,
                    'count': len(group)
                }
                news_groups.append(aggregated)
            else:
                news_groups.append(news1)
        
        return news_groups
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return news_items

async def prioritize_news(news_items: List[Dict[str, Any]], symbol: str) -> List[Dict[str, Any]]:
    """–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    try:
        prioritized = []
        
        for news in news_items:
            score = 0
            title = news.get('title', '').lower()
            description = news.get('description', '').lower()
            source = news.get('source', '').lower()
            
            # –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
            source_scores = {
                'cointelegraph': 10,
                'coindesk': 9,
                'decrypt': 8,
                'bitcoinmagazine': 7,
                'theblock': 8,
                'newsbtc': 6,
                'ambcrypto': 5,
                'cryptonews': 6,
                'cryptoglobe': 5,
                'coingecko': 7,
                'cryptopanic': 6,

            }
            
            for source_name, source_score in source_scores.items():
                if source_name in source:
                    score += source_score
                    break
            
            # –û—á–∫–∏ –∑–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            high_priority = ['listing', 'delisting', 'hack', 'exploit', 'mainnet', 'airdrop', 'whitelist', 'nft', 'mint']
            medium_priority = ['partnership', 'launch', 'update', 'announcement', 'ama', 'interview']
            low_priority = ['price', 'market', 'analysis', 'recap']
            
            for keyword in high_priority:
                if keyword in title or keyword in description:
                    score += 15
                    break
                    
            for keyword in medium_priority:
                if keyword in title or keyword in description:
                    score += 10
                    break
                    
            for keyword in low_priority:
                if keyword in title or keyword in description:
                    score += 5
                    break
            
            # –û—á–∫–∏ –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            if symbol.lower() in title or symbol.lower() in description:
                score += 20
            
            # –û—á–∫–∏ –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å (–Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
            try:
                pub_date = datetime.fromisoformat(news.get('published_at', '').replace('Z', '+00:00'))
                if (datetime.now(pub_date.tzinfo) - pub_date).days <= 1:
                    score += 10
            except:
                pass
            
            # –û—á–∫–∏ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            sentiment = news.get('sentiment', 'neutral')
            if sentiment == 'positive':
                score += 5
            elif sentiment == 'negative':
                score += 8  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤–∞–∂–Ω–µ–µ
            
            news['priority_score'] = score
            prioritized.append(news)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        prioritized.sort(key=lambda x: x.get('priority_score', 0), reverse=True)
        
        return prioritized
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return news_items

async def analyze_news_trends(symbol: str, days: int = 7) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT sentiment, COUNT(*) as count, DATE(timestamp) as date
                FROM social_alerts 
                WHERE source = 'news_analysis' AND token = ? 
                AND timestamp >= datetime('now', '-{} days')
                GROUP BY sentiment, DATE(timestamp)
                ORDER BY date DESC
            '''.format(days), (symbol,))
            
            results = cursor.fetchall()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        sentiment_counts = {'positive': 0, 'negative': 0, 'neutral': 0}
        daily_trends = {}
        
        for sentiment, count, date in results:
            sentiment_counts[sentiment] += count
            if date not in daily_trends:
                daily_trends[date] = {'positive': 0, 'negative': 0, 'neutral': 0}
            daily_trends[date][sentiment] = count
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥
        total_news = sum(sentiment_counts.values())
        if total_news > 0:
            positive_ratio = sentiment_counts['positive'] / total_news
            negative_ratio = sentiment_counts['negative'] / total_news
            
            if positive_ratio > 0.6:
                overall_trend = 'bullish'
            elif negative_ratio > 0.6:
                overall_trend = 'bearish'
            else:
                overall_trend = 'neutral'
        else:
            overall_trend = 'neutral'
        
        return {
            'symbol': symbol,
            'period_days': days,
            'total_news': total_news,
            'sentiment_distribution': sentiment_counts,
            'daily_trends': daily_trends,
            'overall_trend': overall_trend,
            'positive_ratio': sentiment_counts['positive'] / total_news if total_news > 0 else 0,
            'negative_ratio': sentiment_counts['negative'] / total_news if total_news > 0 else 0
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
        return {}

async def check_news_impact_on_price(symbol: str, news_data: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ü–µ–Ω—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        price_history = get_price_history(symbol, hours=24)
        
        if not price_history:
            return {'impact': 'unknown', 'reason': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ'}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏
        try:
            news_time = datetime.fromisoformat(news_data.get('published_at', '').replace('Z', '+00:00'))
        except:
            return {'impact': 'unknown', 'reason': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏'}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–∏
        prices_before = [p for t, p in price_history if t < news_time]
        prices_after = [p for t, p in price_history if t >= news_time]
        
        if not prices_before or not prices_after:
            return {'impact': 'unknown', 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ'}
        
        avg_price_before = sum(prices_before) / len(prices_before)
        avg_price_after = sum(prices_after) / len(prices_after)
        
        price_change_percent = ((avg_price_after - avg_price_before) / avg_price_before) * 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ
        if abs(price_change_percent) < 2:
            impact = 'minimal'
        elif abs(price_change_percent) < 5:
            impact = 'moderate'
        else:
            impact = 'significant'
        
        return {
            'impact': impact,
            'price_change_percent': price_change_percent,
            'avg_price_before': avg_price_before,
            'avg_price_after': avg_price_after,
            'news_time': news_time.isoformat(),
            'analysis_period_hours': 24
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ü–µ–Ω—É {symbol}: {e}")
        return {'impact': 'error', 'reason': str(e)}

async def send_news_alert(news_data: Dict[str, Any], symbol: str, priority: str = 'medium'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –Ω–æ–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if not is_news_relevant_for_token(news_data, symbol):
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –¥–ª—è {symbol}: {news_data.get('title', '')[:50]}...")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        news_hash = generate_news_hash(news_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å
        if was_news_alert_sent(news_hash, symbol, hours=24):
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {symbol}: {news_data.get('title', '')[:50]}...")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if priority == 'high':
            emoji = "üö®"
            tag = "[üö® –°–†–û–ß–ù–û]"
        elif priority == 'medium':
            emoji = "‚ö†Ô∏è"
            tag = "[‚ö†Ô∏è –í–ê–ñ–ù–û]"
        else:
            emoji = "‚ÑπÔ∏è"
            tag = "[‚ÑπÔ∏è –ò–ù–§–û]"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É
        price_impact = await check_news_impact_on_price(symbol, news_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""{tag} {emoji} –ù–û–í–û–°–¢–¨ –û {symbol} {emoji}

üì∞ {news_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}

üìù {news_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}

üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {news_data.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÖ –î–∞—Ç–∞: {news_data.get('published_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.upper()}
üí∞ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: {price_impact.get('impact', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {news_data.get('link', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        await send_alert(
            priority.upper(),
            message,
            symbol,
            {
                'source': 'news_analysis',
                'url': news_data.get('link', ''),
                'sentiment': news_data.get('sentiment', 'neutral'),
                'priority_score': news_data.get('priority_score', 0),
                'price_impact': price_impact
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        save_news_alert_sent(news_hash, symbol, priority)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –æ –Ω–æ–≤–æ—Å—Ç–∏ {symbol}: {priority}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ –Ω–æ–≤–æ—Å—Ç–∏: {e}")

async def check_official_sources():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
        with open('tokens.json', 'r') as f:
            tokens_config = json.load(f)
        
        for symbol, token_data in tokens_config['tokens'].items():
            try:
                logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è {symbol}")
                
                social_accounts = token_data.get('social_accounts', {})
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitter
                if 'twitter' in social_accounts:
                    await check_twitter_official(symbol, social_accounts['twitter'])
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Discord
                if 'discord' in social_accounts:
                    await check_discord_official(symbol, social_accounts['discord'])
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram
                if 'telegram' in social_accounts:
                    await check_telegram_official(symbol, social_accounts['telegram'])
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GitHub
                if 'github' in social_accounts:
                    await check_github_official(symbol, social_accounts['github'])
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
                if 'founders' in social_accounts:
                    await check_founders_official(symbol, social_accounts['founders'])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è {symbol}: {e}")
                continue
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")

async def check_twitter_official(symbol: str, twitter_accounts: List[str]):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitter –¥–ª—è {symbol}: {twitter_accounts}")
        
        for account in twitter_accounts:
            try:
                # –£–±–∏—Ä–∞–µ–º @ –∏–∑ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                username = account.replace('@', '')
                
                # RSS feed –¥–ª—è Twitter (—á–µ—Ä–µ–∑ nitter.net)
                rss_url = f"https://nitter.net/{username}/rss"
                
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç: {username}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ RSS
                async with aiohttp.ClientSession() as session:
                    posts = await parse_rss_news(session, rss_url)
                    
                    if posts:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
                        recent_posts = []
                        for post in posts:
                            try:
                                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø–æ—Å—Ç–∞
                                pub_date = post.get('pub_date', '')
                                if pub_date:
                                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
                                    from email.utils import parsedate_to_datetime
                                    post_datetime = parsedate_to_datetime(pub_date)
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                                    if datetime.now() - post_datetime < timedelta(hours=24):
                                        recent_posts.append(post)
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞: {e}")
                                continue
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                        for post in recent_posts[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å—Ç–∞
                            await send_official_post_alert(post, symbol, 'Twitter', username)
                    
                    else:
                        logger.info(f"–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {username}")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {e}")
                continue
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter –¥–ª—è {symbol}: {e}")

async def check_discord_official(symbol: str, discord_servers: List[str]):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö Discord —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Discord –¥–ª—è {symbol}: {discord_servers}")
        
        for server_url in discord_servers:
            try:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º Discord —Å–µ—Ä–≤–µ—Ä: {server_url}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º invite code –∏–∑ URL
                if 'discord.gg/' in server_url:
                    invite_code = server_url.split('discord.gg/')[-1]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ Discord API
                    invite_url = f"https://discord.com/api/v10/invites/{invite_code}?with_counts=true"
                    
                    async with aiohttp.ClientSession() as session:
                        headers = {
                            'User-Agent': 'CryptoMonitor/1.0'
                        }
                        
                        async with session.get(invite_url, headers=headers, timeout=10) as response:
                            if response.status == 200:
                                server_data = await response.json()
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
                                await send_discord_server_alert(server_data, symbol, invite_code)
                                
                            else:
                                logger.warning(f"Discord API error {response.status} –¥–ª—è {invite_code}")
                                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Discord —Å–µ—Ä–≤–µ—Ä–∞ {server_url}: {e}")
                continue
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Discord –¥–ª—è {symbol}: {e}")

async def check_telegram_official(symbol: str, telegram_channels: List[str]):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –¥–ª—è {symbol}: {telegram_channels}")
        
        for channel in telegram_channels:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∫–∞–Ω–∞–ª: {channel}")
            
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram
            # await fetch_telegram_messages(channel, symbol)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –¥–ª—è {symbol}: {e}")

async def check_github_official(symbol: str, github_repos: List[str]):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    try:
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GitHub –¥–ª—è {symbol}: {github_repos}")
        
        for repo_url in github_repos:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º owner/repo –∏–∑ URL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                owner = None
                repo = None
                
                if 'github.com' in repo_url:
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ www
                    clean_url = repo_url.replace('https://', '').replace('http://', '').replace('www.', '')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ github.com
                    if 'github.com/' in clean_url:
                        path_part = clean_url.split('github.com/')[1]
                        
                        # –£–±–∏—Ä–∞–µ–º trailing slash –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        path_part = path_part.rstrip('/').split('?')[0].split('#')[0]
                        
                        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                        parts = path_part.split('/')
                        
                        if len(parts) >= 2:
                            owner = parts[0]
                            repo = parts[1]
                        elif len(parts) == 1:
                            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                            owner = parts[0]
                            repo = None
                        else:
                            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GitHub URL: {repo_url}")
                            continue
                    else:
                        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π GitHub URL —Ñ–æ—Ä–º–∞—Ç: {repo_url}")
                        continue
                else:
                    logger.warning(f"URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç github.com: {repo_url}")
                    continue
                
                if not owner:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å owner –∏–∑ URL: {repo_url}")
                    continue
                
                if repo:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {owner}/{repo}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
                    commits_url = f"https://api.github.com/repos/{owner}/{repo}/commits"
                    
                    async with aiohttp.ClientSession() as session:
                        headers = {
                            'User-Agent': 'CryptoMonitor/1.0',
                            'Accept': 'application/vnd.github.v3+json'
                        }
                        
                        async with session.get(commits_url, headers=headers, timeout=10) as response:
                            if response.status == 200:
                                commits_data = await response.json()
                                
                                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                                recent_commits = []
                                for commit in commits_data[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤
                                    try:
                                        commit_date = commit['commit']['author']['date']
                                        commit_datetime = datetime.fromisoformat(commit_date.replace('Z', '+00:00'))
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–∏—Ç –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                                        if datetime.now(commit_datetime.tzinfo) - commit_datetime < timedelta(hours=24):
                                            recent_commits.append(commit)
                                    except Exception as e:
                                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∫–æ–º–º–∏—Ç–∞: {e}")
                                        continue
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
                                for commit in recent_commits[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ–º–º–∏—Ç–∞
                                    await send_github_commit_alert(commit, symbol, owner, repo)
                                
                                if not recent_commits:
                                    logger.info(f"–ù–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {owner}/{repo}")
                                    
                            else:
                                logger.warning(f"GitHub API error {response.status} –¥–ª—è {owner}/{repo}")
                else:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {owner}")
                    # –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_url}: {e}")
                continue
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GitHub –¥–ª—è {symbol}: {e}")

async def check_founders_official(symbol: str, founder_accounts: List[str]):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {symbol}: {founder_accounts}")
        
        for account in founder_accounts:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è: {account}")
            
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
            # await fetch_founder_posts(account, symbol)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {symbol}: {e}")

async def check_news():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–æ–±—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for symbol in ['FUEL', 'ARC', 'VIRTUAL']:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                news_items = await fetch_crypto_news(symbol)
                
                if not news_items:
                    logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                
                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                aggregated_news = await aggregate_similar_news(news_items)
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                prioritized_news = await prioritize_news(aggregated_news, symbol)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
                trends = await analyze_news_trends(symbol)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                for news in prioritized_news[:5]:  # –¢–æ–ø-5 –Ω–æ–≤–æ—Å—Ç–µ–π
                    priority_score = news.get('priority_score', 0)
                    
                    if priority_score >= 30:
                        priority = 'high'
                    elif priority_score >= 20:
                        priority = 'medium'
                    else:
                        priority = 'low'
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                    if priority in ['high', 'medium']:
                        await send_news_alert(news, symbol, priority)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}, "
                          f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len([n for n in prioritized_news[:5] if n.get('priority_score', 0) >= 20])} –∞–ª–µ—Ä—Ç–æ–≤")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
                continue
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

# --- Advanced Technical Indicators ---
def calculate_advanced_indicators(prices: List[float]) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        if len(prices) < 20:
            return {}
        
        # MACD
        ema_12 = calculate_ema(prices, 12)
        ema_26 = calculate_ema(prices, 26)
        macd_line = ema_12 - ema_26
        signal_line = calculate_ema([macd_line], 9)
        macd_histogram = macd_line - signal_line
        
        # Bollinger Bands
        sma_20 = sum(prices[-20:]) / 20
        std_dev = (sum((p - sma_20) ** 2 for p in prices[-20:]) / 20) ** 0.5
        upper_band = sma_20 + (2 * std_dev)
        lower_band = sma_20 - (2 * std_dev)
        
        # Stochastic RSI
        rsi = calculate_rsi(prices)
        stoch_rsi = calculate_stochastic_rsi(prices)
        
        # Volume Weighted Average Price (VWAP)
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ–±—ä–µ–º–∞
        vwap = sum(prices) / len(prices)
        
        # –°–∏–≥–Ω–∞–ª—ã
        signals = {}
        current_price = prices[-1]
        
        # MACD —Å–∏–≥–Ω–∞–ª—ã
        if macd_line > signal_line and macd_histogram > 0:
            signals['macd'] = 'bullish'
        elif macd_line < signal_line and macd_histogram < 0:
            signals['macd'] = 'bearish'
        else:
            signals['macd'] = 'neutral'
        
        # Bollinger Bands —Å–∏–≥–Ω–∞–ª—ã
        if current_price > upper_band:
            signals['bb'] = 'overbought'
        elif current_price < lower_band:
            signals['bb'] = 'oversold'
        else:
            signals['bb'] = 'neutral'
        
        # RSI —Å–∏–≥–Ω–∞–ª—ã
        if rsi > 70:
            signals['rsi'] = 'overbought'
        elif rsi < 30:
            signals['rsi'] = 'oversold'
        else:
            signals['rsi'] = 'neutral'
        
        return {
            'macd': {
                'line': macd_line,
                'signal': signal_line,
                'histogram': macd_histogram,
                'signal_type': signals['macd']
            },
            'bollinger_bands': {
                'upper': upper_band,
                'middle': sma_20,
                'lower': lower_band,
                'signal_type': signals['bb']
            },
            'rsi': rsi,
            'stoch_rsi': stoch_rsi,
            'vwap': vwap,
            'signals': signals
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return {}

def calculate_ema(prices: List[float], period: int) -> float:
    """–†–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π"""
    if len(prices) < period:
        return prices[-1] if prices else 0
    
    multiplier = 2 / (period + 1)
    ema = prices[0]
    
    for price in prices[1:]:
        ema = (price * multiplier) + (ema * (1 - multiplier))
    
    return ema

def calculate_rsi(prices: List[float], period: int = 14) -> float:
    """–†–∞—Å—á–µ—Ç RSI"""
    if len(prices) < period + 1:
        return 50
    
    gains = []
    losses = []
    
    for i in range(1, len(prices)):
        change = prices[i] - prices[i-1]
        if change > 0:
            gains.append(change)
            losses.append(0)
        else:
            gains.append(0)
            losses.append(abs(change))
    
    avg_gain = sum(gains[-period:]) / period
    avg_loss = sum(losses[-period:]) / period
    
    if avg_loss == 0:
        return 100
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    return rsi

def calculate_stochastic_rsi(prices: List[float], period: int = 14) -> float:
    """–†–∞—Å—á–µ—Ç Stochastic RSI"""
    if len(prices) < period:
        return 50
    
    rsi_values = []
    for i in range(period, len(prices)):
        rsi_values.append(calculate_rsi(prices[i-period:i+1]))
    
    if not rsi_values:
        return 50
    
    min_rsi = min(rsi_values)
    max_rsi = max(rsi_values)
    
    if max_rsi == min_rsi:
        return 50
    
    current_rsi = rsi_values[-1]
    stoch_rsi = (current_rsi - min_rsi) / (max_rsi - min_rsi)
    
    return stoch_rsi * 100

# --- Backtesting Engine ---
def backtest_strategy(symbol: str, strategy: str, start_date: str, end_date: str) -> Dict[str, Any]:
    """–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT timestamp, price, volume_24h FROM token_data
            WHERE symbol = ? AND timestamp BETWEEN ? AND ?
            ORDER BY timestamp ASC
        ''', (symbol, start_date, end_date))
        data = cursor.fetchall()
        conn.close()
        
        if len(data) < 20:
            return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞'}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        initial_balance = 10000  # $10,000
        balance = initial_balance
        position = 0
        trades = []
        
        prices = [float(row[1]) for row in data]
        
        for i in range(20, len(prices)):
            current_price = prices[i]
            signal = generate_trading_signal(prices[:i+1], strategy)
            
            if signal == 'buy' and position == 0:
                # –ü–æ–∫—É–ø–∞–µ–º
                position = balance / current_price
                balance = 0
                trades.append({
                    'type': 'buy',
                    'price': current_price,
                    'timestamp': data[i][0],
                    'position': position
                })
            
            elif signal == 'sell' and position > 0:
                # –ü—Ä–æ–¥–∞–µ–º
                balance = position * current_price
                trades.append({
                    'type': 'sell',
                    'price': current_price,
                    'timestamp': data[i][0],
                    'balance': balance
                })
                position = 0
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
        if position > 0:
            final_price = prices[-1]
            balance = position * final_price
        
        # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_return = ((balance - initial_balance) / initial_balance) * 100
        num_trades = len([t for t in trades if t['type'] == 'sell'])
        
        return {
            'initial_balance': initial_balance,
            'final_balance': balance,
            'total_return': total_return,
            'num_trades': num_trades,
            'trades': trades,
            'strategy': strategy,
            'symbol': symbol
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
        return {'error': str(e)}

def generate_trading_signal(prices: List[float], strategy: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if len(prices) < 20:
        return 'hold'
    
    if strategy == 'rsi':
        rsi = calculate_rsi(prices)
        if rsi < 30:
            return 'buy'
        elif rsi > 70:
            return 'sell'
    
    elif strategy == 'macd':
        ema_12 = calculate_ema(prices, 12)
        ema_26 = calculate_ema(prices, 26)
        macd = ema_12 - ema_26
        signal = calculate_ema([macd], 9)
        
        if macd > signal:
            return 'buy'
        elif macd < signal:
            return 'sell'
    
    elif strategy == 'bollinger':
        sma_20 = sum(prices[-20:]) / 20
        std_dev = (sum((p - sma_20) ** 2 for p in prices[-20:]) / 20) ** 0.5
        upper_band = sma_20 + (2 * std_dev)
        lower_band = sma_20 - (2 * std_dev)
        current_price = prices[-1]
        
        if current_price < lower_band:
            return 'buy'
        elif current_price > upper_band:
            return 'sell'
    
    return 'hold'

# --- Performance Monitoring ---
def monitor_system_performance() -> Dict[str, Any]:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        import psutil
        import time
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        process = psutil.Process()
        process_cpu = process.cpu_percent()
        process_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –†–∞–∑–º–µ—Ä –ë–î
        cursor.execute("PRAGMA page_count")
        page_count = cursor.fetchone()[0]
        cursor.execute("PRAGMA page_size")
        page_size = cursor.fetchone()[0]
        db_size = (page_count * page_size) / 1024 / 1024  # MB
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM token_data")
        token_records = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM alerts")
        alert_records = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM social_alerts")
        social_records = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'timestamp': time.time(),
            'system': {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'disk_percent': (disk.used / disk.total) * 100
            },
            'process': {
                'cpu_percent': process_cpu,
                'memory_mb': process_memory
            },
            'database': {
                'size_mb': db_size,
                'token_records': token_records,
                'alert_records': alert_records,
                'social_records': social_records
            },
            'status': 'healthy' if cpu_percent < 80 and memory.percent < 80 else 'warning'
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return {'error': str(e)}

# --- API Gateway Functions ---
async def get_token_summary(symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–æ–∫–µ–Ω—É –¥–ª—è API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT price, volume_24h, timestamp FROM token_data
            WHERE symbol = ? ORDER BY timestamp DESC LIMIT 1
        ''', (symbol,))
        latest_data = cursor.fetchone()
        
        if not latest_data:
            return {'error': 'No data available'}
        
        price, volume, timestamp = latest_data
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤–º–µ—Å—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            cursor.execute('''
                SELECT original_text FROM social_alerts
                WHERE token = ? AND timestamp > datetime('now', '-24 hours')
                ORDER BY timestamp DESC LIMIT 10
            ''', (symbol,))
            social_texts = cursor.fetchall()
            
            if social_texts:
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                all_text = ' '.join([text[0] for text in social_texts]).lower()
                positive_words = ['bullish', 'moon', 'pump', 'buy', 'strong', 'good', 'great']
                negative_words = ['bearish', 'dump', 'sell', 'weak', 'bad', 'crash']
                
                positive_count = sum(1 for word in positive_words if word in all_text)
                negative_count = sum(1 for word in negative_words if word in all_text)
                
                if positive_count > negative_count:
                    sentiment = {'overall_sentiment': 'bullish', 'confidence': 0.7}
                elif negative_count > positive_count:
                    sentiment = {'overall_sentiment': 'bearish', 'confidence': 0.7}
                else:
                    sentiment = {'overall_sentiment': 'neutral', 'confidence': 0.5}
            else:
                sentiment = {'overall_sentiment': 'neutral', 'confidence': 0.0}
        except Exception as e:
            sentiment = {'overall_sentiment': 'neutral', 'confidence': 0.0}
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
        risk_data = await calculate_risk_score(symbol, {'volume_24h': volume})
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        price_history = get_price_history(symbol, hours=24)
        prices = [float(p[1]) for p in price_history]
        technical_indicators = calculate_advanced_indicators(prices)
        
        conn.close()
        
        return {
            'symbol': symbol,
            'price': price,
            'volume_24h': volume,
            'last_updated': timestamp,
            'sentiment': sentiment,
            'risk_assessment': risk_data,
            'technical_indicators': technical_indicators,
            'price_change_24h': calculate_price_change(symbol, 24)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return {'error': str(e)}

def calculate_price_change(symbol: str, hours: int) -> float:
    """–†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        price_history = get_price_history(symbol, hours)
        if len(price_history) < 2:
            return 0.0
        
        current_price = float(price_history[-1][1])
        old_price = float(price_history[0][1])
        
        if old_price == 0:
            return 0.0
        
        return ((current_price - old_price) / old_price) * 100
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return 0.0

async def get_market_overview() -> Dict[str, Any]:
    """–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        overview = {}
        
        for symbol in TOKENS.keys():
            overview[symbol] = await get_token_summary(symbol)
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä—ã–Ω–∫–∞
        total_volume = sum(
            overview[symbol].get('volume_24h', 0) 
            for symbol in overview 
            if 'error' not in overview[symbol]
        )
        
        # –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        sentiments = [
            overview[symbol].get('sentiment', {}).get('sentiment', 0)
            for symbol in overview
            if 'error' not in overview[symbol]
        ]
        avg_sentiment = sum(sentiments) / len(sentiments) if sentiments else 0
        
        return {
            'tokens': overview,
            'market_metrics': {
                'total_volume_24h': total_volume,
                'average_sentiment': avg_sentiment,
                'timestamp': datetime.now().isoformat()
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")
        return {'error': str(e)}

async def onchain_loop(session):
    while True:
        await check_onchain(session)
        await asyncio.sleep(5)

async def setup_whale_tracking():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Whale Tracker –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π"""
    try:
        if not config.whale_tracker_config.get('enabled', False):
            logger.info("Whale Tracker –æ—Ç–∫–ª—é—á–µ–Ω")
            return None
        
        # Whale Tracker –º–æ–¥—É–ª—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        logger.warning("Whale Tracker –º–æ–¥—É–ª—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω")
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Whale Tracker: {e}")
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("=== Crypto Monitor —Å—Ç–∞—Ä—Ç—É–µ—Ç ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API
    if OPENAI_API_KEY and OPENAI_API_KEY != 'your_openai_api_key_here':
        logger.info("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Discord —Ç–æ–∫–µ–Ω–∞
    discord_token = config.social_config.get('discord_token')
    if discord_token:
        logger.info("‚úÖ Discord —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è Discord —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - Discord –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
    telegram_api = config.social_config.get('telegram_api')
    if telegram_api:
        logger.info("‚úÖ Telegram API –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è Telegram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Twitter scrapers
    try:
        import twint
        logger.info("‚úÖ Twint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    except ImportError:
        logger.warning("‚ö†Ô∏è Twint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
    
    try:
        from ntscraper import Nitter
        logger.info("‚úÖ Nitter scraper –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Twitter –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    except ImportError:
        logger.warning("‚ö†Ô∏è Nitter scraper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ntscraper")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        log_error("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î", e)
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
    try:
        init_openai()
    except Exception as e:
        log_error("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI", e)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        async with aiohttp.ClientSession() as session:
            logger.info("üìä –ó–∞–ø—É—Å–∫ onchain –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            onchain_task = asyncio.create_task(onchain_loop(session))
            logger.info("üè™ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ CEX...")
            cex_task = asyncio.create_task(check_cex(session))
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DEX...")
            dex_task = asyncio.create_task(check_dex(session))
            logger.info("üì± –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π...")
            social_task = asyncio.create_task(check_social(session))
            logger.info("üìà –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
            analytics_task = asyncio.create_task(check_analytics(session))
            logger.info("üì∞ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
            official_sources_task = asyncio.create_task(check_official_sources())
            logger.info("üì¢ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
            news_task = asyncio.create_task(check_news())
            
            await asyncio.gather(
                onchain_task, cex_task, dex_task, social_task, 
                analytics_task, official_sources_task, news_task
            )
    except Exception as e:
        log_error("–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", e)
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        logger.info("=== Crypto Monitor –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É ===")

# --- –†–∞–±–æ—Ç–∞ —Å —Ç–æ—á–∫–æ–π –æ—Ç—Å—á—ë—Ç–∞ –∞–ª–µ—Ä—Ç–∞ ---
def get_alert_reference(symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—á–∫—É –æ—Ç—Å—á—ë—Ç–∞ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT last_price, last_volume FROM alert_reference WHERE symbol = ?
            ''', (symbol,))
            row = cursor.fetchone()
            if row:
                return {'last_price': row[0], 'last_volume': row[1]}
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–∫–∏ –æ—Ç—Å—á—ë—Ç–∞ –∞–ª–µ—Ä—Ç–∞: {e}")
        return None

def set_alert_reference(symbol: str, price: float, volume: float):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—á–∫—É –æ—Ç—Å—á—ë—Ç–∞ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            with conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO alert_reference (symbol, last_price, last_volume, last_update)
                    VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                ''', (symbol, price, volume))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–∫–∏ –æ—Ç—Å—á—ë—Ç–∞ –∞–ª–µ—Ä—Ç–∞: {e}")

def get_token_info(symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        return {
            'symbol': symbol,
            'age_days': 180,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            'holders_count': 0  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ on-chain –¥–∞–Ω–Ω—ã—Ö
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ {symbol}: {e}")
        return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫-—Å–∫–æ—Ä–∏–Ω–≥–∞
risk_cache = {}
risk_cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à

def get_cached_risk_score(symbol: str, data_hash: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫-—Å–∫–æ—Ä–∏–Ω–≥"""
    if symbol in risk_cache:
        cache_entry = risk_cache[symbol]
        if cache_entry['hash'] == data_hash and time.time() - cache_entry['timestamp'] < risk_cache_ttl:
            return cache_entry['data']
    return None

def set_cached_risk_score(symbol: str, data_hash: str, risk_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∏—Å–∫-—Å–∫–æ—Ä–∏–Ω–≥ –≤ –∫—ç—à"""
    risk_cache[symbol] = {
        'hash': data_hash,
        'timestamp': time.time(),
        'data': risk_data
    }

def calculate_data_hash(data: Dict[str, Any]) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    key_data = {
        'volume_24h': data.get('volume_24h', 0),
        'price_change_24h': data.get('price_change_24h', 0),
        'holders_count': data.get('holders_count', 0),
        'rsi': data.get('rsi', 0),
        'volatility': data.get('volatility', 0)
    }
    return hashlib.md5(json.dumps(key_data, sort_keys=True).encode()).hexdigest()

DEX_ALERT_THRESHOLD_PCT = 10  # –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ % –¥–ª—è –∞–ª–µ—Ä—Ç–∞

async def get_token_dexscreener_info(session, token):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω—É —Å Dexscreener (–æ–±—ä—ë–º, —Ü–µ–Ω–∞, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å).
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Dexscreener
        url = f'https://api.dexscreener.com/latest/dex/tokens/{token["contract"]}'
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                if data and 'pairs' in data and data['pairs']:
                    return data
                else:
                    logger.info(f'[DEXSCREENER] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token["symbol"]}')
                    return None
            else:
                logger.warning(f'[DEXSCREENER] HTTP {resp.status} –¥–ª—è {token["symbol"]}')
                return None
    except Exception as e:
        logger.warning(f'[DEXSCREENER] –û—à–∏–±–∫–∞ –¥–ª—è {token["symbol"]}: {e}')
        return None

async def get_token_defillama_info(session, token):
    """
    –ü–æ–ª—É—á–∏—Ç—å TVL —Ç–æ–∫–µ–Ω–∞ —Å DefiLlama.
    """
    try:
        # DefiLlama API –¥–ª—è TVL
        url = f'https://api.llama.fi/tvl/{token["chain"]}/{token["contract"]}'
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                if isinstance(data, (int, float)) and data > 0:
                    return {'tvl': data}
                else:
                    logger.info(f'[DEFILLAMA] –ù–µ—Ç TVL –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token["symbol"]}')
                    return None
            else:
                logger.warning(f'[DEFILLAMA] HTTP {resp.status} –¥–ª—è {token["symbol"]}')
                return None
    except Exception as e:
        logger.warning(f'[DEFILLAMA] –û—à–∏–±–∫–∞ –¥–ª—è {token["symbol"]}: {e}')
        return None

async def get_token_geckoterminal_info(session, token):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω—É —Å GeckoTerminal (—Ü–µ–Ω–∞, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å).
    """
    try:
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: https://api.geckoterminal.com/api/v2/simple/networks/{chain}/token_price/{address}
        url = f'https://api.geckoterminal.com/api/v2/simple/networks/{token["chain"]}/token_price/{token["contract"]}'
        async with session.get(url, timeout=10) as resp:
            data = await resp.json()
            return data
    except Exception as e:
        logger.warning(f'[GECKOTERMINAL] –û—à–∏–±–∫–∞: {e}')
        return None



TVL_ALERT_THRESHOLD_PCT = 50  # –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è TVL –≤ % –¥–ª—è –∞–ª–µ—Ä—Ç–∞

def get_last_tvl(symbol: str, minutes: int = 60) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å TVL —Ç–æ–∫–µ–Ω–∞ N –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –∏–∑ –ë–î"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT tvl, timestamp FROM token_data
            WHERE symbol = ? AND timestamp <= datetime('now', ?)
            ORDER BY timestamp DESC LIMIT 1
        ''', (symbol, f'-{minutes} minutes'))
        row = cursor.fetchone()
        conn.close()
        if row:
            return float(row[0])
        return 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TVL –∏–∑ –ë–î: {e}")
        return 0.0



async def parse_rss_news(session: aiohttp.ClientSession, rss_url: str) -> List[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ RSS –ª–µ–Ω—Ç—ã –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        async with session.get(rss_url, timeout=10) as resp:
            if resp.status == 200:
                content = await resp.text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç XML
                if not content or len(content.strip()) < 100:
                    logger.warning(f"RSS –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è {rss_url}")
                    return []
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π XML
                try:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
                    if content.startswith('<?xml'):
                        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ RSS
                        rss_start = content.find('<rss')
                        if rss_start > 0:
                            content = content[rss_start:]
                    
                    # –û—á–∏—â–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    content = re.sub(r'[^\x20-\x7E\n\r\t]', '', content)
                    
                    # –ü–∞—Ä—Å–∏–º XML
                    root = ET.fromstring(content)
                except ET.ParseError as xml_error:
                    logger.warning(f"XML –ø–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–∫–∞ –¥–ª—è {rss_url}: {xml_error}")
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    try:
                        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã item –≤—Ä—É—á–Ω—É—é
                        news_items = []
                        item_pattern = r'<item[^>]*>(.*?)</item>'
                        items = re.findall(item_pattern, content, re.DOTALL)
                        
                        for item_content in items[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–æ–≤–æ—Å—Ç–µ–π
                            title_match = re.search(r'<title[^>]*>(.*?)</title>', item_content, re.DOTALL)
                            description_match = re.search(r'<description[^>]*>(.*?)</description>', item_content, re.DOTALL)
                            link_match = re.search(r'<link[^>]*>(.*?)</link>', item_content, re.DOTALL)
                            pub_date_match = re.search(r'<pubDate[^>]*>(.*?)</pubDate>', item_content, re.DOTALL)
                            
                            if title_match:
                                title = re.sub(r'<[^>]+>', '', title_match.group(1)).strip()
                                description = ""
                                if description_match:
                                    soup = BeautifulSoup(description_match.group(1), 'html.parser')
                                    description = soup.get_text().strip()
                                
                                news_items.append({
                                    'title': title,
                                    'description': description,
                                    'link': link_match.group(1).strip() if link_match else '',
                                    'pub_date': pub_date_match.group(1).strip() if pub_date_match else '',
                                    'source': rss_url
                                })
                        
                        return news_items
                    except Exception as alt_error:
                        logger.error(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π RSS –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {rss_url}: {alt_error}")
                        return []
                
                news_items = []
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã item (—Å—Ç–∞–Ω–¥–∞—Ä—Ç RSS)
                for item in root.findall('.//item'):
                    title = item.find('title')
                    description = item.find('description')
                    link = item.find('link')
                    pub_date = item.find('pubDate')
                    
                    if title is not None and title.text:
                        # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        clean_title = re.sub(r'<[^>]+>', '', title.text).strip()
                        
                        # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                        clean_description = ""
                        if description is not None and description.text:
                            # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
                            soup = BeautifulSoup(description.text, 'html.parser')
                            clean_description = soup.get_text().strip()
                        
                        news_items.append({
                            'title': clean_title,
                            'description': clean_description,
                            'link': link.text if link is not None else '',
                            'pub_date': pub_date.text if pub_date is not None else '',
                            'source': rss_url
                        })
                
                return news_items
            else:
                logger.warning(f"RSS error {resp.status} –¥–ª—è {rss_url}")
                return []
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS {rss_url}: {e}")
        return []

async def analyze_news_with_ai(news_data: Dict[str, Any], token_symbol: str) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é ChatGPT"""
    try:
        if not OPENAI_API_KEY:
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏")
            await send_alert('CRITICAL', f"ü§ñ AI –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–£–ü–ï–ù\n\n‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å –æ {token_symbol} –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ {token_symbol}:

        –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_data['title']}
        –û–ø–∏—Å–∞–Ω–∏–µ: {news_data['description']}
        –ò—Å—Ç–æ—á–Ω–∏–∫: {news_data['source']}

        –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

        –ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï: [2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —á–µ–º –Ω–æ–≤–æ—Å—Ç—å]
        –í–õ–ò–Ø–ù–ò–ï –ù–ê –¢–û–ö–ï–ù: [–∫–∞–∫ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ü–µ–Ω—É {token_symbol} - –ø–æ–∑–∏—Ç–∏–≤–Ω–æ/–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ]
        –û–ë–û–°–ù–û–í–ê–ù–ò–ï: [–ø–æ—á–µ–º—É —Ç–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è]

        –û—Ç–≤–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.
        """
        
        response = await analyze_with_chatgpt(prompt, "news_analysis")
        
        if response and 'choices' in response:
            analysis_text = response['choices'][0]['message']['content']
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            summary = ""
            impact = ""
            sentiment = "neutral"
            
            lines = analysis_text.split('\n')
            for line in lines:
                line = line.strip()
                if line.startswith('–ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï:'):
                    summary = line.replace('–ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï:', '').strip()
                elif line.startswith('–í–õ–ò–Ø–ù–ò–ï –ù–ê –¢–û–ö–ï–ù:'):
                    impact_text = line.replace('–í–õ–ò–Ø–ù–ò–ï –ù–ê –¢–û–ö–ï–ù:', '').strip()
                    if '–ø–æ–∑–∏—Ç–∏–≤–Ω–æ' in impact_text.lower():
                        sentiment = 'positive'
                    elif '–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ' in impact_text.lower():
                        sentiment = 'negative'
                    impact = impact_text
                elif line.startswith('–û–ë–û–°–ù–û–í–ê–ù–ò–ï:'):
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫ –≤–ª–∏—è–Ω–∏—é
                    reasoning = line.replace('–û–ë–û–°–ù–û–í–ê–ù–ò–ï:', '').strip()
                    if impact:
                        impact += f" {reasoning}"
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            if not summary and not impact:
                summary = analysis_text[:200] + "..." if len(analysis_text) > 200 else analysis_text
                impact = "–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, –≤–ª–∏—è–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"
            
            return {
                'summary': summary,
                'impact': impact,
                'sentiment': sentiment,
                'full_analysis': analysis_text
            }
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API")
            await send_alert('CRITICAL', f"ü§ñ AI –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–£–ü–ï–ù\n\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API\n‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å –æ {token_symbol} –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await send_alert('CRITICAL', f"ü§ñ AI –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–£–ü–ï–ù\n\n‚ùå –û—à–∏–±–∫–∞: {e}\n‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å –æ {token_symbol} –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return None



async def health_check() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    """
    health_status = {
        'timestamp': datetime.now().isoformat(),
        'overall_status': 'healthy',
        'components': {},
        'errors': []
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM token_data')
                count = cursor.fetchone()[0]
                health_status['components']['database'] = {
                    'status': 'healthy',
                    'message': f'Connected, {count} records in token_data'
                }
        except Exception as e:
            health_status['components']['database'] = {
                'status': 'unhealthy',
                'message': f'Database error: {e}'
            }
            health_status['errors'].append(f'Database: {e}')
            health_status['overall_status'] = 'degraded'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            required_keys = [
                'etherscan.api_key',
                'telegram.bot_token',
                'telegram.chat_id'
            ]
            missing_keys = []
            for key_path in required_keys:
                keys = key_path.split('.')
                value = config.api_config
                for key in keys:
                    if key in value:
                        value = value[key]
                    else:
                        missing_keys.append(key_path)
                        break
            
            if missing_keys:
                health_status['components']['configuration'] = {
                    'status': 'warning',
                    'message': f'Missing keys: {missing_keys}'
                }
            else:
                health_status['components']['configuration'] = {
                    'status': 'healthy',
                    'message': 'All required keys configured'
                }
        except Exception as e:
            health_status['components']['configuration'] = {
                'status': 'unhealthy',
                'message': f'Configuration error: {e}'
            }
            health_status['errors'].append(f'Configuration: {e}')
            health_status['overall_status'] = 'degraded'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ real-time –¥–∞–Ω–Ω—ã—Ö
        try:
            fuel_data = realtime_data.get('FUEL', {})
            arc_data = realtime_data.get('ARC', {})
            
            fuel_fresh = (fuel_data.get('last_update') and 
                         (datetime.now() - fuel_data['last_update']).total_seconds() < 300)
            arc_fresh = (arc_data.get('last_update') and 
                        (datetime.now() - arc_data['last_update']).total_seconds() < 300)
            
            if fuel_fresh and arc_fresh:
                health_status['components']['realtime_data'] = {
                    'status': 'healthy',
                    'message': 'Real-time data is fresh'
                }
            else:
                health_status['components']['realtime_data'] = {
                    'status': 'warning',
                    'message': 'Real-time data may be stale'
                }
        except Exception as e:
            health_status['components']['realtime_data'] = {
                'status': 'unhealthy',
                'message': f'Real-time data error: {e}'
            }
            health_status['errors'].append(f'Real-time data: {e}')
            health_status['overall_status'] = 'degraded'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        try:
            if ERROR_HANDLING_AVAILABLE:
                from error_handler import error_handler
                stats = error_handler.get_stats()
                if stats['total_errors'] > 100:
                    health_status['components']['error_handling'] = {
                        'status': 'warning',
                        'message': f'High error count: {stats["total_errors"]}'
                    }
                else:
                    health_status['components']['error_handling'] = {
                        'status': 'healthy',
                        'message': f'Error handling active, {stats["total_errors"]} total errors'
                    }
            else:
                health_status['components']['error_handling'] = {
                    'status': 'warning',
                    'message': 'Using fallback error handling'
                }
        except Exception as e:
            health_status['components']['error_handling'] = {
                'status': 'unhealthy',
                'message': f'Error handling error: {e}'
            }
            health_status['errors'].append(f'Error handling: {e}')
            health_status['overall_status'] = 'degraded'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT COUNT(*) FROM alerts 
                    WHERE timestamp >= datetime('now', '-1 hour')
                ''')
                recent_alerts = cursor.fetchone()[0]
                
                if recent_alerts > 50:
                    health_status['components']['alerts'] = {
                        'status': 'warning',
                        'message': f'High alert volume: {recent_alerts} in last hour'
                    }
                else:
                    health_status['components']['alerts'] = {
                        'status': 'healthy',
                        'message': f'Alert system normal, {recent_alerts} recent alerts'
                    }
        except Exception as e:
            health_status['components']['alerts'] = {
                'status': 'unhealthy',
                'message': f'Alert system error: {e}'
            }
            health_status['errors'].append(f'Alerts: {e}')
            health_status['overall_status'] = 'degraded'
        
        logger.info(f"Health check completed: {health_status['overall_status']}")
        return health_status
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            'timestamp': datetime.now().isoformat(),
            'overall_status': 'unhealthy',
            'components': {},
            'errors': [f'Health check error: {e}']
        }

@app.route('/webhook/tradingview', methods=['POST'])
async def tradingview_webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç TradingView"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'success': False, 'error': 'No data received'}), 400
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç TradingView
        symbol = data.get('symbol', 'UNKNOWN')
        strategy = data.get('strategy', 'TradingView Alert')
        action = data.get('action', 'INFO')
        price = data.get('price', 0)
        message = data.get('message', 'TradingView alert received')
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
        alert_level = 'CRITICAL' if action in ['BUY', 'SELL'] else 'WARNING'
        alert_message = f"[TradingView] {strategy}: {message} | –¶–µ–Ω–∞: ${price}"
        
        await send_alert(alert_level, alert_message, symbol)
        
        # –õ–æ–≥–∏—Ä—É–µ–º webhook
        logger.info(f"TradingView webhook received: {symbol} - {action} - {message}")
        
        return jsonify({'success': True, 'message': 'Alert processed'})
        
    except Exception as e:
        logger.error(f"Error processing TradingView webhook: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Pushover
def send_mobile_alert(level, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Pushover"""
    try:
        user_key = os.getenv('PUSHOVER_USER_KEY')
        api_token = os.getenv('PUSHOVER_API_TOKEN')
        if not user_key or not api_token:
            logger.warning('Pushover –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            return
        payload = {
            'token': api_token,
            'user': user_key,
            'message': message,
            'title': f'Crypto Alert: {level}',
            'priority': 1 if level == 'CRITICAL' else 0
        }
        resp = requests.post('https://api.pushover.net/1/messages.json', data=payload, timeout=10)
        if resp.status_code != 200:
            logger.warning(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Pushover: {resp.text}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')

def was_news_alert_sent(news_hash: str, symbol: str, hours: int = 24) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM social_alerts 
                WHERE token = ? AND link = ? AND timestamp > datetime('now', '-{} hours')
            '''.format(hours), (symbol, news_hash))
            count = cursor.fetchone()[0]
            return count > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return False

def save_news_alert_sent(news_hash: str, symbol: str, priority: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO social_alerts 
                (timestamp, source, level, original_text, translated_text, link, token, keywords, important_news)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                datetime.now().isoformat(),
                'news_analysis',
                priority,
                f"News alert for {symbol}",
                f"News alert for {symbol}",
                news_hash,
                symbol,
                json.dumps([symbol.lower()]),
                1 if priority in ['high', 'medium'] else 0
            ))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")

def is_news_relevant_for_token(news_data: Dict[str, Any], symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ)
        token_keywords = {
            'FUEL': ['fuel network', 'fuel protocol', 'fuel token', 'fuel blockchain', 'fuel ecosystem'],
            'ARC': ['arc protocol', 'arc token', 'arc blockchain', 'arc ecosystem', 'ai rig complex', 'ai rig', 'rig complex'],
            'VIRTUAL': ['virtuals protocol', 'virtual token', 'virtual blockchain', 'virtual ecosystem']
        }
        
        # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–æ–≤–æ—Å—Ç–∏ —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –ù–ï –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å)
        forbidden_words = ['bitcoin', 'btc', 'ethereum', 'eth', 'solana', 'sol', 'cardano', 'ada', 'polkadot', 'dot']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        keywords = token_keywords.get(symbol.upper(), [symbol.lower()])
        
        # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ)
        search_text = f"{news_data.get('title', '')} {news_data.get('description', '')}".lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        for forbidden in forbidden_words:
            if forbidden in search_text:
                logger.info(f"–ù–æ–≤–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{forbidden}' –¥–ª—è {symbol}: {news_data.get('title', '')[:50]}...")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        for keyword in keywords:
            if keyword.lower() in search_text:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –¥–ª—è {symbol} –≤ –Ω–æ–≤–æ—Å—Ç–∏: {news_data.get('title', '')[:50]}...")
                return True
        
        logger.info(f"–ù–æ–≤–æ—Å—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è {symbol}: {news_data.get('title', '')[:50]}...")
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è {symbol}: {e}")
        return False

async def send_official_post_alert(post_data: Dict[str, Any], symbol: str, platform: str, account: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –ø–æ—Å—Ç–µ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –ø–æ—Å—Ç–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        post_hash = generate_news_hash(post_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç –ø–æ—Å—Ç
        if was_news_alert_sent(post_hash, symbol, hours=24):
            logger.info(f"–ü–æ—Å—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {symbol}: {post_data.get('title', '')[:50]}...")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        title = post_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        description = post_data.get('description', '')
        link = post_data.get('link', '')
        pub_date = post_data.get('pub_date', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platform_emoji = {
            'Twitter': 'üê¶',
            'Discord': 'üí¨',
            'GitHub': 'üìö',
            'Telegram': 'üì±'
        }.get(platform, 'üì¢')
        
        message = f"""[{platform_emoji} –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô {platform.upper()}] {symbol}

üë§ {account}

üìù {title}

üìÑ {description[:200]}{'...' if len(description) > 200 else ''}

üìÖ {pub_date}

üîó {link}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        await send_alert(
            'HIGH',
            message,
            symbol,
            {
                'source': f'official_{platform.lower()}',
                'url': link,
                'account': account,
                'platform': platform
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
        save_news_alert_sent(post_hash, symbol, 'high')
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –æ –ø–æ—Å—Ç–µ {symbol} –∏–∑ {platform}: {account}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ –ø–æ—Å—Ç–µ: {e}")

async def send_github_commit_alert(commit_data: Dict[str, Any], symbol: str, owner: str, repo: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –∫–æ–º–º–∏—Ç–µ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–º–∏—Ç–∞
        commit_hash = commit_data.get('sha', '')[:8]
        commit_id = f"{owner}/{repo}/{commit_hash}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç –∫–æ–º–º–∏—Ç
        if was_news_alert_sent(commit_id, symbol, hours=24):
            logger.info(f"–ö–æ–º–º–∏—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {symbol}: {commit_id}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞
        commit_info = commit_data.get('commit', {})
        author = commit_info.get('author', {})
        message = commit_info.get('message', '')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        short_message = message.split('\n')[0][:100] + ('...' if len(message.split('\n')[0]) > 100 else '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"""[üìö –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô GITHUB] {symbol}

üë§ –ê–≤—Ç–æ—Ä: {author.get('name', 'Unknown')}

üìù –ö–æ–º–º–∏—Ç: {short_message}

üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {owner}/{repo}

üîó –ö–æ–º–º–∏—Ç: https://github.com/{owner}/{repo}/commit/{commit_hash}

üìÖ –î–∞—Ç–∞: {author.get('date', 'Unknown')}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        await send_alert(
            'HIGH',
            message_text,
            symbol,
            {
                'source': 'official_github',
                'url': f"https://github.com/{owner}/{repo}/commit/{commit_hash}",
                'repo': f"{owner}/{repo}",
                'commit_hash': commit_hash
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–º–º–∏—Ç–µ
        save_news_alert_sent(commit_id, symbol, 'high')
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –æ –∫–æ–º–º–∏—Ç–µ {symbol} –≤ {owner}/{repo}: {commit_hash}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ –∫–æ–º–º–∏—Ç–µ: {e}")

async def send_discord_server_alert(server_data: Dict[str, Any], symbol: str, invite_code: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ Discord —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
        server_id = f"discord_{symbol}_{invite_code}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä
        if was_news_alert_sent(server_id, symbol, hours=24):
            logger.info(f"Discord —Å–µ—Ä–≤–µ—Ä —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {symbol}: {server_id}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
        server_name = server_data.get('guild', {}).get('name', 'Unknown Server')
        member_count = server_data.get('approximate_member_count', 0)
        online_count = server_data.get('approximate_presence_count', 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"""[üí¨ –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô DISCORD] {symbol}

üè† –°–µ—Ä–≤–µ—Ä: {server_name}

üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count:,}

üü¢ –û–Ω–ª–∞–π–Ω: {online_count:,}

üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: https://discord.gg/{invite_code}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        await send_alert(
            'MEDIUM',
            message_text,
            symbol,
            {
                'source': 'official_discord',
                'url': f"https://discord.gg/{invite_code}",
                'server_name': server_name,
                'member_count': member_count
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        save_news_alert_sent(server_id, symbol, 'medium')
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –æ Discord —Å–µ—Ä–≤–µ—Ä–µ {symbol}: {server_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ Discord —Å–µ—Ä–≤–µ—Ä–µ: {e}")

def generate_news_hash(news_data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
    import hashlib
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    key_data = f"{news_data.get('title', '')}{news_data.get('link', '')}{news_data.get('source', '')}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º MD5 —Ö–µ—à
    return hashlib.md5(key_data.encode('utf-8')).hexdigest()

async def check_aerodrome(session: aiohttp.ClientSession, token: Dict) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Aerodrome DEX (Base)"""
    try:
        symbol = token['symbol']
        logger.debug(f"–ó–∞–ø—Ä–æ—Å Aerodrome –¥–ª—è {symbol}")
        
        # Aerodrome API endpoint –¥–ª—è Base
        url = f"https://api.aerodrome.finance/v1/pairs"
        
        async with session.get(url, timeout=10) as response:
            if response.status == 200:
                data = await response.json()
                
                # –ò—â–µ–º –ø–∞—Ä—É —Å –Ω–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
                target_pair = None
                for pair in data.get('pairs', []):
                    if (symbol.lower() in pair.get('token0', {}).get('symbol', '').lower() or 
                        symbol.lower() in pair.get('token1', {}).get('symbol', '').lower()):
                        target_pair = pair
                        break
                
                if not target_pair:
                    logger.warning(f"Aerodrome: –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {symbol}")
                    return {'error': 'Pair not found'}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                price_usd = float(target_pair.get('priceUsd', 0))
                volume_24h = float(target_pair.get('volume24h', 0))
                liquidity_usd = float(target_pair.get('liquidityUsd', 0))
                
                # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                price_change_24h = 0.0
                if 'priceChange24h' in target_pair:
                    price_change_24h = float(target_pair['priceChange24h'])
                
                return {
                    'price': price_usd,
                    'volume_24h': volume_24h,
                    'price_change_24h': price_change_24h,
                    'liquidity_usd': liquidity_usd,
                    'source': 'aerodrome_base'
                }
            else:
                logger.warning(f"Aerodrome HTTP –æ—à–∏–±–∫–∞: {response.status}")
                return {'error': f'HTTP {response.status}'}
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Aerodrome –¥–ª—è {token['symbol']}: {e}")
        return {'error': 'Failed to fetch data'}

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 