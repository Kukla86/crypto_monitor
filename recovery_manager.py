#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±–æ–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import time
import traceback
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from enum import Enum
import threading
from functools import wraps

logger = logging.getLogger(__name__)

class RecoveryStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    RETRY = "retry"
    RESTART = "restart"
    FALLBACK = "fallback"
    IGNORE = "ignore"
    ESCALATE = "escalate"

@dataclass
class RecoveryConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    max_retries: int = 3
    retry_delay: float = 1.0
    backoff_factor: float = 2.0
    timeout: float = 30.0
    strategy: RecoveryStrategy = RecoveryStrategy.RETRY
    fallback_function: Optional[Callable] = None
    alert_on_failure: bool = True

@dataclass
class FailureRecord:
    """–ó–∞–ø–∏—Å—å –æ —Å–±–æ–µ"""
    component: str
    error: str
    timestamp: datetime
    retry_count: int = 0
    resolved: bool = False
    resolution_time: Optional[datetime] = None

class RecoveryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.failure_history = []
        self.recovery_configs = {}
        self.active_recoveries = {}
        self.health_checks = {}
        self.recovery_hooks = []
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
        self.monitoring_active = True
        self.monitor_thread = threading.Thread(target=self._health_monitor_loop, daemon=True)
        self.monitor_thread.start()
        
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def register_component(self, component_name: str, config: RecoveryConfig):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.recovery_configs[component_name] = config
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_name}")
    
    def add_health_check(self, component_name: str, health_check_func: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.health_checks[component_name] = health_check_func
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è: {component_name}")
    
    def add_recovery_hook(self, hook_func: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—É–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.recovery_hooks.append(hook_func)
    
    async def execute_with_recovery(self, component_name: str, func: Callable, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        config = self.recovery_configs.get(component_name, RecoveryConfig())
        
        for attempt in range(config.max_retries + 1):
            try:
                if asyncio.iscoroutinefunction(func):
                    result = await asyncio.wait_for(func(*args, **kwargs), timeout=config.timeout)
                else:
                    result = func(*args, **kwargs)
                
                # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                if attempt > 0:
                    await self._record_resolution(component_name)
                
                return result
                
            except Exception as e:
                error_msg = str(e)
                logger.warning(f"–°–±–æ–π –≤ {component_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{config.max_retries + 1}): {error_msg}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–±–æ–π
                await self._record_failure(component_name, error_msg, attempt)
                
                if attempt == config.max_retries:
                    # –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
                    await self._handle_final_failure(component_name, config, e)
                    raise
                else:
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    delay = config.retry_delay * (config.backoff_factor ** attempt)
                    await asyncio.sleep(delay)
    
    async def _record_failure(self, component_name: str, error: str, attempt: int):
        """–ó–∞–ø–∏—Å—å —Å–±–æ—è"""
        failure = FailureRecord(
            component=component_name,
            error=error,
            timestamp=datetime.now(),
            retry_count=attempt
        )
        
        self.failure_history.append(failure)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.failure_history) > 1000:
            self.failure_history = self.failure_history[-1000:]
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ö—É–∫–∏
        for hook in self.recovery_hooks:
            try:
                if asyncio.iscoroutinefunction(hook):
                    await hook(failure)
                else:
                    hook(failure)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ö—É–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _record_resolution(self, component_name: str):
        """–ó–∞–ø–∏—Å—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Å–±–æ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        for failure in reversed(self.failure_history):
            if failure.component == component_name and not failure.resolved:
                failure.resolved = True
                failure.resolution_time = datetime.now()
                logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ {component_name} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
                break
    
    async def _handle_final_failure(self, component_name: str, config: RecoveryConfig, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—è"""
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ {component_name}: {error}")
        
        if config.strategy == RecoveryStrategy.FALLBACK and config.fallback_function:
            logger.info(f"–ó–∞–ø—É—Å–∫ fallback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è {component_name}")
            try:
                if asyncio.iscoroutinefunction(config.fallback_function):
                    await config.fallback_function()
                else:
                    config.fallback_function()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        
        elif config.strategy == RecoveryStrategy.RESTART:
            logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {component_name}")
            await self._restart_component(component_name)
        
        elif config.strategy == RecoveryStrategy.ESCALATE:
            logger.critical(f"–≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–±–æ—è –≤ {component_name}")
            await self._escalate_failure(component_name, error)
        
        if config.alert_on_failure:
            await self._send_failure_alert(component_name, error)
    
    async def _restart_component(self, component_name: str):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {component_name}: {e}")
    
    async def _escalate_failure(self, component_name: str, error: Exception):
        """–≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–±–æ—è"""
        try:
            from alert_manager import AlertLevel, send_alert
            
            await send_alert(
                level=AlertLevel.CRITICAL,
                title="üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π —Å–∏—Å—Ç–µ–º—ã",
                message=f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {str(error)}",
                source="recovery_manager",
                template="system_error"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {e}")
    
    async def _send_failure_alert(self, component_name: str, error: Exception):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ —Å–±–æ–µ"""
        try:
            from alert_manager import AlertLevel, send_alert
            
            await send_alert(
                level=AlertLevel.ERROR,
                title="‚ö†Ô∏è –°–±–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞",
                message=f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name}: {str(error)}",
                source="recovery_manager",
                template="system_error"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def _health_monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        while self.monitoring_active:
            try:
                for component_name, health_check in self.health_checks.items():
                    try:
                        if asyncio.iscoroutinefunction(health_check):
                            # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
                            loop = asyncio.new_event_loop()
                            asyncio.set_event_loop(loop)
                            try:
                                result = loop.run_until_complete(health_check())
                                if not result:
                                    logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è {component_name} –Ω–µ –ø—Ä–æ—à–ª–∞")
                            finally:
                                loop.close()
                        else:
                            result = health_check()
                            if not result:
                                logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è {component_name} –Ω–µ –ø—Ä–æ—à–ª–∞")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {component_name}: {e}")
                
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                time.sleep(60)
    
    def get_failure_stats(self, hours: int = 24) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–±–æ–µ–≤"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        recent_failures = [f for f in self.failure_history if f.timestamp > cutoff_time]
        
        stats = {
            'total_failures': len(recent_failures),
            'resolved_failures': len([f for f in recent_failures if f.resolved]),
            'by_component': {},
            'avg_resolution_time': 0
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        for failure in recent_failures:
            component = failure.component
            if component not in stats['by_component']:
                stats['by_component'][component] = {
                    'total': 0,
                    'resolved': 0,
                    'avg_retries': 0
                }
            
            stats['by_component'][component]['total'] += 1
            if failure.resolved:
                stats['by_component'][component]['resolved'] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for component_stats in stats['by_component'].values():
            if component_stats['total'] > 0:
                component_stats['avg_retries'] = sum(
                    f.retry_count for f in recent_failures 
                    if f.component in stats['by_component']
                ) / component_stats['total']
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        resolved_failures = [f for f in recent_failures if f.resolved and f.resolution_time]
        if resolved_failures:
            total_resolution_time = sum(
                (f.resolution_time - f.timestamp).total_seconds() 
                for f in resolved_failures
            )
            stats['avg_resolution_time'] = total_resolution_time / len(resolved_failures)
        
        return stats
    
    def get_component_health(self, component_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        recent_failures = [f for f in self.failure_history if f.component == component_name]
        recent_failures = [f for f in recent_failures if f.timestamp > datetime.now() - timedelta(hours=1)]
        
        return {
            'component': component_name,
            'is_healthy': len(recent_failures) == 0,
            'recent_failures': len(recent_failures),
            'last_failure': recent_failures[-1].timestamp if recent_failures else None,
            'config': asdict(self.recovery_configs.get(component_name, RecoveryConfig()))
        }
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_active = False
        if self.monitor_thread.is_alive():
            self.monitor_thread.join(timeout=5)
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
recovery_manager = None

def get_recovery_manager() -> RecoveryManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    global recovery_manager
    if recovery_manager is None:
        recovery_manager = RecoveryManager()
    return recovery_manager

def recovery_decorator(component_name: str, config: Optional[RecoveryConfig] = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            manager = get_recovery_manager()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if component_name not in manager.recovery_configs:
                manager.register_component(component_name, config or RecoveryConfig())
            
            return await manager.execute_with_recovery(component_name, func, *args, **kwargs)
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            manager = get_recovery_manager()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if component_name not in manager.recovery_configs:
                manager.register_component(component_name, config or RecoveryConfig())
            
            # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
            async def async_func():
                return func(*args, **kwargs)
            
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(
                manager.execute_with_recovery(component_name, async_func)
            )
        
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator 